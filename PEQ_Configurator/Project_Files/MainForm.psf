<File version="3.1">
  <FileID>6ccc0928-8b6b-4294-9e75-bca1c17bd3eb</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAMWKSURBVHhe7L0HXFbZnf8/abvZbDbJltTNpu1v
yz+b3Uwy6ZnMTJLpRR17w4KKgoKCiKIoICIISLGADSuIVOm99957770/he7n/z33oek8TlUUn+/X
11uee+7pt3w/595z732OjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2N
jY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2N
jY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2N
jY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2N
jY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2N
jY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2N
jY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2N
jY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2N
jY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2Nje0ptcDPfe5zpf/wD18tXbVyeamBwd7S
vQaG0l+GYRiGYZ5+9u41LN2zZ3fpD3/4g9IvfOELpeTbBR9uFLH+F794HoePHEVIVBLK6rtQ1dSL
ysYehmEYhmGeenpR1dyL/LI6uF26gtdefRVf+cpXMO3mH25f/epXSk0PH0VOWRPSyloRn1+L+DyG
YRiGeQohH5VUVI/k4kai4ZGRUFA3W0ZiQT2V0fBIEXnO5V+ntg6fhaTCeiQUNqC4vge3bvvgJz/+
0UcLgOXvLy8NDE9ERnkbEqljGYZhGOZpJYmcZ2B8AW6HZsAr7BFA+dwJy0R0RjmSyYkKRxqRVoyA
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
4LkYAEIIIYS8uNAAEEIIIW4IDQAhhBDihnwhA9AmDIBMgBBCCCGuRavAPhgDYLS1okmsLN0DIYQQ
QlwLGfzNdsGzGoClS30rOh4C1g6BWIkQQgghronFATwAEBNz4PMNwOTJUyr2xOxH1K49iIyKJoQQ
QogLs3ffASxcuOjzDQBFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRF
URRFURRFURRFURRFURRFURRFURRFURRFURRFURRFURRFUdTz10sv/f/RqsmwrkTPlgAAAABJRU5E
rkJggg==</Preview>
  <Form>9ymu12VFrzsBACODCAAAAAAABADsvWmTo0bWP/q+Iuo71PWre0PzN4hFwI1nJoIdxCJ2Cd48wQ4Sm9jh019U
3bbb4267qzzjcftOd0d1CZGZJ/Nsv3Ny+59TcI3DvvvH89PLy/98+PDSL0389+/Mpevj8vtzXkX1
1H3P1W354effXj731d9enLjt8rr6O/I9+Pj7txd6KPqhjf9exUPf+sXfXrQhKPJQihervsXV3wMM
89EQPewJGIlBnPjupfLLrWXFz6tHnd+9hFleRO326nd0XfVtXXTfvVK60aq1dRO3/fKxDDn0tRn6
RczkZVw96NhePfztZQ//D/DDq79VVKmj+Lt/cFtLv1mG8sMbXRd1+90/PlL2m0XoIo+r3szXrQ0M
hP72gkL73yz0GAaqbqO4NfuleFCXz3Fk5lVaxL9Z+DGOSlwNZt/mzQ8Dt71mxEm8DWoYf3xvG7Ch
e7yz/+4F+KGu3668TfPqu38gf3v5+O8risx5ufWfquetI37R/XYX1O3nd//4QSB+83UzqycxrKuv
rd7s/bbX6i7v80chemPQNtJhG8fVb5a14rn/7h8aq79sEpDk6dD6fd3+shg7brV+wk662Nqr0p96
9b+fPP0f4PX1XysbR9/941oHVruJYNz+70+Pf6WsXPvRJw0+Pv7T27+t+j9K0r9d/z+Vxy9bgF9y
RNyI+uTr7YXHk1/rk1XXxWufHp17vPzv69snZH1GBbO4aH5BzE/a+EEjH89+6vw/C9ovx0OuQ/+D
YG8Eg19R4IO2/TT8X1HkE3sG/dICfEZr/ECsongzAJ+xfl9Ssl+h6H+AD5L79XLMt/XQbCbo3y7G
6aOhoJ7fKMVf4Vp+jdX7/cYJ7KuZ/SORX83rA765VQQ/vI3Zv3TDn33d7OvmS8b7lwXsLqbrstl6
HhTxQ1SMeGuufbWuVjt8torfFpCNjI8D/28Xkd4Pwg9N/YaQ/BbHkc9x/Es8/6TVryplxsU2ZHH0
kZefsyRfEhYY3kYHgT/H/V8Tly/Q9VW80/w0/iMY12zt/CbXflW9NxdedY2/Ff4l4Pwtpm+AC4K+
stSPXH8l+SsLaX4UvSoS/LeXj/++suRHzkObS0DAz8vlr/H+8+L1Jddg93mxobe4+1Kp35YZauj7
uvq3i0zw2gxdxH7L6hRt/rbo/KrSoxtDsM8Z4V+TgX+m4auLf+Apsf+Cl/8tnsL41xd6ZesriS9v
o/FRkizydBsdqt76WX6A819ffsNf1hYovWz1PPxItD3anMh3L01bj/nmVza1317pH7j0UwJfijp9
SfIifvGTrb2XbgjDuOuSoXhJCj9NX2H9V9LwDo/2xYqcvBv84jVu/JnR+bVaPg0atoA1vP1SZv73
9fnPw4ePpX+Oxf6cCvgVJvszkUW5Wc5/fml7jcorv13+kTvUyZhAiU9rcvujmnbG2un2G/X4Qbo0
6W7/MWm0wsjjAcVHlGWzJCnzGg3MGaU/nhaTyRXr89P262naCjKdSHFmJr3WkXNHg+Vskx37G9HL
HM+62bpz5NTcB1FvnldN1mfkzjX2rb7a/Qla2yDnoeenmwfVJp2ut9QkDiTNnd02F90pL1xJNGh9
OfX0Mb9fRW2hD1f+cC2n/BAnjXoiXN2Uo2glOw2f4HVNTrvnJxjCXQT1giArmJBUQEx0I8Y6TQsu
JCvsHkANhnx/xjAvCWxqxxCoNrlUGl9HLANueRjvoxTP23DUZ/j5KSspnFVcHhFcAD7dmRKDcgr0
D7Ntu1httG6rM2I/2iK1OLYk77gsxUWnyXQ13IFRp2hhnO6WDFRDnnt+EmEq3oihIVuddjkdaiTT
7w5UL2P6PTc8Fd5P2rw6SEfJqwt2rFAWubmuNtUkPrLrhjzE6tl3dVXCLs9PXTikbbbcw5JWz0dQ
lYC9XqVlwRu0yyzOWoepTJlyMsERQSZK70gdv1/Ozu5oliduYjpHjNrpSmcBY2y0ZcTd4Oy4VSDn
Qu7Pni1wU5VbKXXvTC5mYk/GRC5WuWpE3UycLwd1H7IqOuvSFBkFa/g6q2ax3BjiRpsuX26TUbHL
Yg9Rna8owiQkeou1prutUtgF1gGmoM1UncxzxN1xK9MAruyTLDYKYKardfISvrpaOz6Pnp8QVpXo
yhqceTGz3r41fAr5DtiHsW2iASyu/WDKKBWWzrjoXbUeFcKAK+yoLBZsmsh890u9Uha7dM/e85NC
FsrRtGYrA1jkDqv8FI+Bg6DxZkEgZrkgaIHc6zKRjoEwHg7H62nwgGBA0SgAzniAU/J94sdskwNc
e9UFkmQLzrqZg17S9P8AH1Xun/T1a83iTw4UwrANn6DvcqBfwlBf8pvQ5xORX3REP/nNL8Gnf4n3
KvKuH/N4eqmHvhm+hEG/ISe1/9f7pkf3/ohkQb+189u5gs8P4ycDJ1ZJ/Q5l2BOPcOLrJfRjRPGR
5jdqwyN/AH0J5f+qNnw93P2AIr9euz/Bjv9O1KjVRfHS52X8ktTtS5R3WxxevcbWL2Vd5f328P+O
4sTfhOgFfeni7euo+3++FNq8U6TlTe2dTe3/7TL9g335Q4V6KzOU1S+q/4pk8IeSQuxvTPuD8sAf
KfvnbHD4Skn2Ssn+51ngH1j/s1zwN95F6K/fRfiru/jVgs4NRWHU04fk3Bsd7z/lEd6Kgn5U7Lfi
IGIb6z3yrgzCG2z5WyyyMFQpwHxqiLe3HuF73D3sc1P4y/Ys2xj7Pnhk9n4fv4aPVJz5Y/6wZ19K
b3++uoep/u4fTNz7efHFLNe3EHm/TrYe6wB6dwT+8FyfMez/rHj5492HjH7oHjV0C1ltD18l/hd6
+E6l2ePvix1+HIW3oiZ8U9SvL/Tb+dQvgaafKYPyAZW8qYpXVhlx8XGwPgr/BnheY4V/U0CziVFe
bZFEsWzCFYe37pcIi9U3RNW9Lg15CZYfANcWtfxTGu/bj4N+lLFvPFf3Qz++fYMBEr/fYrwjzPpD
DAbd+l0GPBzpt24usuHVGPwEAf46puBfbwlkP4j//TPkxaMVVv8oWKemf13Z9w578LrK71Ux3sSP
x2rA7/6h5GFbd3XSv5j+5j3MjbPJ317w7yG06f/20j1Y9Xf7wfAir96DwiFw/x778NnBeaOZ2IPI
1vQb8ow/QfI34PhXQ7Fp1kdSX95K6zv16xvxcnXzOyeDsce8LPFO71I3bxUZbMOib8gWfiIybyj0
KjJvou5NLuBR84YD6z77OUr0q+glfPVomb95g48o8S/hCermX+8F6If3/CMS5K9uOqhnxb/FpFkP
VfT7dAYC4U2I0a9PYXxQml+S8R57+9m1j7+pPG8Ac6/K86DxxX95G5VvUqJHC93WRPdo4qWuPlGl
lwee8r+VpQ/fjPgzH3JSWt0Mv9NpfFAA6K1e43OEvEsF3jUD9Aa9+SGZ8aDy5W1kvkkHPjbxUIPm
0cp/1eAPUINXNP8Ibf4VOgC+FXf/gop3KcC70uBvDc7fTuIbUdRW9W/AqOETGPVQjq2etPXLLWx6
C1nfpF78oXGElBcFWUVG/DqwH+eFft/M6zmL/a9n0ScBCbJFCO9bnPq5XrxVvVDsnfHJZzdO/Jp6
Pah9lfWP9L6YrMzSFsv8e9Ttx+baj811H5fm/1L5XtXux0TW61qf7ZsgLurpT6RzvzEV9sVg5nNS
8o0nu3/eJbIo/lO6i/5rVHfrwVv1Fnq33r5tpc9n9JaU5T9IZf3t8/+vtXUTjG9+nd675rD/Bev0
wN+zUO/NU87vXaj31nV6b0S1v3Oh3lwW/2/X+OH2rNmUMm7H+D2r936ZJPxp7R4M/rh47/lJ2eLP
Kn4oenQdur58KEkUN1tzj7nnDRAX/tZ2uDw/PSyBRr9sVG8NlH4Vxt9/cbrxm/BptGaTSZJvo7P8
odsuXvdT2B+2XdBqboDq60Lyi2oaoEi2HRIeXl8xKt3eU9s78/PTdRpxV7cfj48hm3nh9NiCoWwf
MYYMo/HOP4pwomkblMNkWus5x6BWSZZ1CGtCaCTNuxvLIExLy89PK8SObl2IzDU9p7M98kevs6Rz
W7Owketz7yWco0UWMCreucPYblkpNVy6e67dTSMnSv7YzyIVXXIgXJ+fgNk97nSpOax3X97be5Y9
U2Gp2tcpCPquQlq63uH3O6UZA1DnnG5eD/t73tQQ4DeH9l5e7ga36rLDWCK40eabB6y3UaIkR72l
LKvmw5A23QwjJ+GeceUR026S3iTH+WRzh/F2slGUtSkYCwPizIx+d5SLG6tTGrV7ftJEedzt6IN8
MwyK32FCPGkZmKR+J43LZOPrQSVnmE3ZwMh4TpzYsrPyMQIBcDJPVzfuZq41nIIWlAh+foJVpQQ0
h5EEldBzJ1WzxBR7C3XBkVb8RIAQFwJuN0s0wh133jo21Bafip6SVoLP5feRA+7rNJyvRCw+P+3i
kk4uEz13TnytbNDjrjwDylokDJmBSvS/envBq8B+NE9W3bzRQn26pfd18v6tyelfKN071hhhX58Q
/AR/vc3gf9YE/2Oj++UHwp+f/pzb/jYzGcaPJQJ9/Qrkwrr9K6wS+ERk/gpRVFGw+p9gm9+/wt8Y
zqu/YTP56hmEdXT2nBImnnaEkABNEOWozomtbSCDKxqW028sz9HluUz9k5nemttIySjVe165EH7Z
tsfCVzUJ8uagHzF57wQqmU+VT9zAeMcWI4ul8BBuNn3F4PC083dVRKDVEMUix5yI/oaiQIihwEjg
ARX5vq/TU53Jhz1b8y260kubFfOZsvi2xcEB0Aq5lubo+SnFs4uwcAshOOx1gLxV5YlTYSYQmQD1
7ryqs5CnQX0wZARPe7rlVyMOmkyZ15MCtmwsZUII4mk53pzNQyhUdbxMC9pnvtHNu+nG1NFQ5krk
MMF+EZBzuomkMt/cOhfWeeE3cQry9C7CJXVJ3CWiyiHD7plwO3nExgXUuA4SVXf1DQ5WDu/9Tj8l
+13A8/dJ8Bl1q/XYUz5/OPVcJ0Q+UbE+MGvZcC1kDUNFA9WhXZMve4V7fjq2nO8Sw53nxr3FtAxn
d3sWIhrelCrmRvWxVw8OeCTwC1+f954OLHpv0/tDetiD8qRDe5tCsStf87ui23qK7vu6r6o7pOoC
1HjXuOeOHs1L91o/BamFF6eCPqEEuzsRxSqcd2ZFaCjGQUpcsUyzpBm/v6g4ewHt4/OT3kCJfzkJ
zE0Z5EVa4xa5xOt8GY35bk/wTrZchWgTEsDrgBXYVjj5nSDkGo4b+qnGGWSnHrhpBOhdh25+eq7l
MAuyFp5dZU7rFjwiMBQgVxS+5fDB4t1TaWh6NZ/YxLTlOqHiBADhPRGJ9y3MDcorJQLOVZOJdePp
MEcLccUmkdboEQLl3YBUKbaTBFCqB90jZt/BxfMRAUBWgbLjJK7g0WzCErlBBqLC8ZScE4/CxD4+
8s9PhwkbsvkenNwdiPFHlqExaZqBlQOZex+lxrmoFLdIRjk2ZDaBVH7lblV6AoIr7Uq8kDYXf2iJ
yqxP5u35qfZ3aHbp5tPqDF7TTFJ4Yw++rOYRaWVBbl8QshWu0U69X5ZJvpyjdLmZBcvgYTnspTWN
h7zvYZ7SGmFDJGLbqFyHELukRKxTRF/kGyYYsbX4jIB1xmSaB96qAEoHAxAdLksDMMQuG+G6Pfgi
LaRjWBHzKcdkdLc+tJ5e1oQcQ5rXbwg2oJQhwpYrFPIRA/nzWgsRIwKqZaYNr10CsEHHuQoTJj8c
z2Gz4niP3fnBx6UZZJ6f9qWFY628rGp05ndGdwL9VfBIwup9Y7zt9mKxoJQm4qd57/sKqcTBwbrg
7Fh77Shp41A39RnwKtAswvvzk+d1pXHf7HG/h3aMGF2PbTGR+HHxmNOswFy2Cd1enVHgVNc9kx77
Cel9glKyG3pgjoDM5Bdm8nGAR3fphoAN5Hib8RUm04FQyIorkavC1jSAq1QyVZk4m0Ll4IPKVWHO
ArUuzJaasTI4pVOUntqshib/nrPsZrg2eRvW24nGuA681RLYBxUtTn7LsbwltA1/q7182FXewDJg
wRRot5sVEra6/e2o2iHnpvmaWuANklK7wocNAY/CCblto4jD1MkNZdcLA9IQxRtJVemsq8ewVGxZ
LOUqAImo4k57MUzwwQoTHjYu81nxh9HSi+MuxcnNhgzm9ertqH563Sp+NGyUbW/HNE3//vc/Cz6F
9sj78emPLvqN6PSxeeRd6PRdycGNwpc3kPh7UeifFhr+yK1vHBhyhZ++TlP/CYDhZ89/GD6c8PD8
ZLLDHhx6+QaxLlUxQMaYi6a4eKMcPMlqtWOoSqulr1fvXOhWrbEgXLl+gcrXI5fP0qqQF23n8+Zy
OzXPTxLb9vae1m9nhy9PfrNGGMPIzQHm3akcRAHejcEOkCdAzkd09Xxr7zhyVGPDXcD2vLmvgZb0
i965tvcNtLZsH0WQk/bWHa4WWMP4pPBttXscsBBBc8sbUzxHm3WDc6NornNzKPFzAqXCqfalKMd9
hp6BO83skmvx/BRMiQQbtQ1PLSg6eHdcAuR+0pvZMYooAyxbavSIcOs9CRYsVreEpYBK6kFBdgBm
O6HmsaQGIxXVvAu32ri6Ji8zlWEDxY4cFUcDw470hAw5efbZimvBsDONJRsllkdzW2TI+VLVPaCM
6YG61ou5S7ENnhtYTj8/3YyJP8+67GQIc8xRkjlQUSDRS9eZdm4JpSBBEyeTmnSIiEmp88m9Egyp
EfpySrUKobGzfpLKBaAK+vL8VKVxIE/eisQMkMq201S+j8gDQRk+Hki8RKR+kBiycr4AjH4CZN2f
FUs8Lkqq7lfSUdyGPEs0RQJKsLmIqwSi6HWP2kd4ETNFF5mAVDQaDCYSgDFEQIOUpzdk3+slxDDz
Tq0ZTt0BIiWZuU0exWtGpsFtJKes1jeHE5m7ybup8J1pbR0oL3lBnlDyqDfLXj/eTpCs58oEpVdN
J6UJpMaIPfcXA3IhD6lIGqNtsjTpY+AIx9PmWsHLXOZ7k33NrpzBVIt871xS624gQXIbQSEy71MG
FmKU1TJPsITCTJPl1odStDLaaN2scyONSStHeH4iZNEVjgjuBROjwP5NLIlAEneYbCnHNFbBRu4z
hENX6eBhccrHix4eDJo5AxEydQeU7qBdOcBHANdC6fkpCnDIAmDimC6qNK0thPJBtMNyMyRWrGbu
0GYogssoCg61GWB5z7hwSNp2wfk54YRhdOMINx062G9vG1wKB5OTaIiYM0g/etp1w4VzBFKHLF28
7roOKWU0VCFbcsUKRzYzb156Q3XUHeAVI83TdSRU7qTsANN85H7/tKko9P2e/keb+1ZP/zjR7j2e
/q3Lwx4EvryNwn9Zuun90xB++5gj/Pmmte9fXox4c49V93roVPc6q7hFj/4jRzVU/fdvyKj9abHI
j/L0JizyuUd/upMEv2JC8VemE/8jJwl+baH/2EmCX3vU4QdbYE2xf/sdxwhuKhPUf8gayEdDf/RZ
Mcz2kamn6uMx5D98fGywfMNeqrb0+36TBbbyN9MSvfvUAvxvL29et/zDqL3RF0Gvm13es15//ytx
56cm7mfHq9KPCeXHyPxI7/9+7vvPmb7PW86f6vm24zfL726B376e3rxJ0Bbp/JGBHA0+PvcfAjny
wA+S/1UH+V3Y7Qk3s9SSB6s2bRWV1GuY57OaU7rFxYbD8wypzR1BV1g+121knxBSrO+gaN8UcEHu
adQbrvH8xPIXgy6VqL+4tkGzOnuTRJY3nKjhp3Q3DzWvCp25RSj3O+KcLOWUeNpOwQjN2bmUdKUX
VqiqUSHkHfGYZ11PCSxEAEEchPTKQ2GyzgCu7K51vlTHu95SEpvLQF6s6ETPvMdLqYSVcztEcdPs
jxFHTTiRX8adTfbPT6pq2PKyAxZ/WDEfA0AwhDWm9bGhjFZsBBFXFDKv9nGF3mkRCGAwFhImAQlk
gMR4Q9wig70czod6Krvnp2LALSahrq7TpqdM8hDUskzzDAJ5tPPdtUMU7qjsNQ3Wgs7nO4+WlrNw
gEdfAKaQ9xYzL4ACpCaln3dbOH0WDOAM9bIBymGH7GkRCc8hhc2du8sLr1MPQ33Q5Da+GK3E5xJR
wuvS1WfBq+hbMFApFV64K+YS/rV9fuKAXaVZSQjNB2ikoil18gOcWDQp0FJ3Aq57nKZD8UZEM8jI
VapusQdWsPIQJFHAlWYyrAGEUJJXQgX6/BQHoZZaSipMIgROZomAVNpHGZrgBjOf8Axp9Dul8jcu
FshJKVblKgUR7MBMf+/8lrNd67ZTLb7J5b56fpJ5iLZO2M5wPGiBcxQWuQQpF1ocEOyAdBcISaQk
8ZhR7rASWSQTQo5HSlyBxp1Vng5dDdjdk8UrKjB/fsqjorw4yaXWq1N6uh1VGuylEr0R3gGIjumZ
O59vIoIue4/jByi7a9KOOkC1enAH++R3gLKN1G3I9sQJ0J6fvAJYc3uBru6I3NBDcJFq/NDe117K
alShLY85Vua+AqV9jArC7nQdsMupEVff4UGBxfBhi4+Ls6EpOQM8P+1h45bcwHmcNs3JxRN5L3AR
IPaCnOsTX1jqSIyse9DbcU+zyShZ95LF/MICAvnamLGW+lVOxDGVNKP7/HRW5grIUs7JbzarHg2e
UhjRB4+STrcHTb10ZdpxiHO9F9eQwfddeF9NzB2U9tjR3SW/sY6LnBe7AAI327igw61daAfUbhbr
VvFiaePRfhkRR8MwRzVrepAm1mwY4T6bQ1oc2Y1yfQXBVU1vgnIyAXlVTLziUC97zBfkbMbT+Vmq
OVlPjzv7OoEgYO1kNTs3GYg5czHlY9ALZmfd4L6Y4CMxzJ7MmRuqkS3aIMsjrtxzs2yeny6EB66W
JFU9E/DY3ZT4RXOgoxBnNY4Xl+l+P7ARqBDACYGm+JzsMfYgk3NSrenMC/fbRIg3w1tWXF0ec0Cr
63D4yRlveU+YRlW4dTzo8kpfatQIVyShDgqNDFMrTeGC1+MkmTnbKktX0jgBd0gcr6Qss+x5OW/2
DZJ8ZYKjxsNYQptwTMrRCWEP+95J95RmIQdOGexZMrv86itAWfT73IX44pycxPYOaFVnidgZHM9D
UE6PJFpO4ggOTEOl8Mn1vA+ZKk5VHCMW/kJ0zE4L8anFKgviYnsaGe0yZodTSZ1jLg9I5IR2NOC4
pxYfKOf5ydEFoetlCuQ58who0r1xe2KHQqs9ajIldIkzSIEG765Y7Z0j6MwthDHTd9DjPMcwBCVT
LoZLZMuBYrpHSi4m8mmYO6SOI2DvYPwdzyMYPq/FBB6au9DXVgceud0pSGFMQGOGhnyRwriTxVQD
6fXKcGS1KdPbR8KFpdHICFVHQvvjmdwsU9WOkzPx4ziS0XGz3uqwS7xmPl+KZDOJSRdH3hV16RgF
mCt1qHbW7uQmWjZh9PX5aRlop9Iv2pSKgwWH5iAkV9ltER3Nzs7oMOs0HWfbAwBQSLHGuvqruLis
pvsIksxrPhNHg4sc+1oCrf38dHVtJoCK3Y73pvTqdlIMBzqy+aOs7pULbR3Ku2sfdK+nIUe6AX5G
IcrIpmpSOzJnaFIAns7gHmGFix4+P/EEHOIiNMoAdpgmwGUrXYGR+opIByXT1f581yZaWdRcMRew
PcbjEmsBJjfWBKuottmLEA9j1jt3MUM+P9kn8prKrpHv+CxX+BNK6314DK7H+sz1lABPPcaQhNI0
B5ABpiCrQ9XlDIt19D64G+bJ0eILqGrmMdmZz08tPyMRHIO7xABhgmSdstOMy8pgoR/ngSBxR9Se
EPc4ujZU9/DxBpASh/PWJINiQsdUN69wje+bourizS+Mm2VhxJ1QIlEQXY29XsFriponYsKgocRJ
1NtzK3853R3iTKfdfOSn1ieAfki8GyjoMN17O1wrs+DhZa6RURfj6cZfXcUnR+lgg7YfgBbB25Xp
8UYn6ScPLI0zKDRityqztrIeu+hzyNzx0kYu8sCrjhXve3OzvUW1Z8h9YO87Xud75XAKnJl1zloN
hrNteBZyuRLxfQRAPAEo37Nx34AX5FKFJWFJa1JKeuxKEMyCrbR555TD/JwlGhKqa1xxVqm094pk
iCf0IKUgwXGX+ahliX2v9USIIGlZKS9J7ysyq6mhOqV5cU/F4Dc6q2xe5m5k/NE8u7eGVGLwrhKR
xWNmEe0L+bjb67ddN7K8ZANASA5QTY+pNfpYjiLiSq73+rbaOACVjnBUSl59ftJvarln9J2JjyRB
pyhMNnIn4iSBehe/LBLKdzQ7b5SDG3l2lIDj/iqjQZaAyyYv8OaQlsie9zg+LRK92V4QWnPaB4cb
arnEOIIqo6NR5SUDoG4eJCCSpln8gjA3N9t5+aGSPLfg/VulCJ0CVaCIN9mFu9+b+FJs/jTJldOd
NRy3UwsGOed25c5xgyRrcYuChbvvFJ6yz1NtcjITwvee94Rq82ghS8JyAp1E2sD5AACp4rQhB4MA
xj1f3JWuO55OzMVDNrlGyNwXLihdLxp1VojAsdYT7UBoaViOWdn3QemQNECzBNavqdFb9slCy0x6
fsKS/koPpAIMU0+0vmryBU14JiOczKo3zhd5FHQDok4lqjqcC3SrGqo5c6+GGmvRXUBlt+BytbiF
Z8/i81PnpeCskKBFdf2BVgWX9o1wcPQ7glinDeIl0T0MVDS2PK5cbXttwGioJ5NIfUbV8dN0w+/e
EbxYynLbvMylKD2c9ianCy+gvfTWgrNZYVaCUx1jAtAXBOEn0615DjBxHjckl0VTp2LnngNL8ioX
nOHacxlyVeg/P2WNZbWZ0WST4Lg7HbqKsCilSRCRGkEGsCbKM05fVNYdprvUCcf7BIpjIWmI0l/Y
0Gp30rkNFbBNBQx/fvKDTO9hs2hWekJFOLyzqHWO++uETUZh7dXO5ACusbH7oIY9maC+DV2Edhhu
Q9BXmjqtCubcMrWJzu7mF5yeDkAlUBhpKXq0MNIewQIb9eNmI/SOO1ef97dw47oqozI1K7ghx9XW
MLRX2N1xujWWE5z35+pY9l75/ASSBFQzPpAncnDWNd9zLBOBE3/Hja2qcAFIT5Guhie8VwhqA4cd
u9f2yLHkYX6fq5fGp+LYrS2ozYaNC1TeQhOR73Wg2uNTnxpLect6lAQVz1Buy2ZdFVZqNoFaOZoH
1brPhB7ZSamInglypVfF5U4z5N3V3Nu8DHlPRPSEiys/KfVpv6HG1rIk8XqM6f5M4EZJFRS/39UH
ckQIcOxcr1d1hCNGi7zeT2en0DNkd5Z07cCMG23+UuvF1d6rcgV33G4ow7kI3cIjlMky+Fag9qlX
89QNvmheMXtnR7P8oohgf2ruxN33tjgkICDwyvtbvFBunk7YbRF3uFu7Zmwoz8Sihk729yuvzRS7
lFbIMfF9Hg/8MSOV1krQvdBigK+BCaLQ0wUnt2BXcWh2w+Ro8xqXkqbtnAwJpV1R/NOsCcD/9rLf
f/1C/k/nCX4Z279j4Sr+rhzNW89U+Ejqyw+0vryF2P/83IH1OkNQJ8lL/7Ej6ceOfP/yWPJQT91L
Xn3YnfBIJZX1GL9uWKiTl9gPs5fpNcnz2LXQZ/EPlXz//KTUUZ7kcff6uI3TvOvb5eX/vChD178E
8YtfvfhRmVeP54978r68seEbmo/4pdx+40k2Vv9wS+XGJyP2o1NV/KH7Nj6sx08/ZNmoNa5a8OdZ
tqL1WFkNHg9p6mpyR/WRZaMFeit9fZTWUGv7zDwqS8aJJE/Feft198jCiT0qZUt2eUyz7s8Fo++p
ow4qqS0cR68sOm97Z4sblaQoql7h2DCc4R1GTO4JG0i8YSZcss83CgNp84aLiMPfRFKk0yJbUAej
6UvUFalKnWuOpltsIh1ni7d9jqfTRj5TnZ3PyT3XczrL6cJsaSme01Dj9O7IYPAprMGbal0aGF6s
5bKW/XoCIK+KMByhOwWQaFNkNs800b11A/gsPctq7vRcKxxSvehYkVQhJXfOtqFb7HQDpLjcpfz1
kG3yLmH8Il/uw7KH99dak2D/VCWR/vw0RSN3jHiWPKZiZzLOzCC2BK44HV4CQtTj0JK55aqjS30z
Nv9zS/hJRMqWDQ/VeqV22ZkRtJ69SyFqPnpKz4QGSUfrfjHE4MC2RXnfc4VEcu6YD8QWjlv36RAs
MZTvSzMF4s39q1A9WnLsnXUx1dxqOS0YaxfMFrEohkPuBD3rc/Hcn8FtVG25MxIZHUNht8urlobj
y6hkV3UnoRU585sJJJVVIp3DoBhNtWOD64XCSX1at54eJEs5VtoO8tXQ2UaPav2JrY8kdXMmOnVn
LfNV5ywzA03saIHgRCi/Rscj5c3zdWsi6czDQsCM7WXChoSAzGsHmj/njouOXLsrFbCcnH0GRrIT
9RqEuRhWdHbXrAM8xCZGtb3XBisAlGeNnQk74a7lJbjfYS2un596BdZYmlQsMh+ASwrJ9BmXV/Hg
lzSj9kheW8XxtpvuPHqG76NfeeWi7sfalIuSFrhguGjYKug7KWg8cIvN2qDz+wzzBMIzEiSrNxg3
+g5vg10sQxjStgKR4bey2gU5d9OCuR7gFvJgWh4G4mTtd0m0AnNOaFa64VH8xBgsoM21WBI2TpQg
AvMq4Q1k4qbp5Zxm/i4TfH/eRxmEUc2Q7caZdOq69eyhcYhyZvhYSXfzvhXn56coTaqOKpqqTI05
hRZGPkvouULQKOjJUSnoUriAOY1Z1eCJOw80bjqyw0Z3KMXW62dK1hiw6HJcqpbh+WkbkoLeBp8U
2rQZ6LV20YwzOFkshytgucocEyqjwop5wlCM67niWt9X6xQ1KHijWnW3WOXZATLUrnlkk16pvV2k
AirwU3wB4kI4Gw+Onlr5MX4aj0bX/dDLh5xTTjCuNQfrFIaH8cRhpnrJmzrade7hjgFtYvDbuIWQ
f0Z8LEzCSgDi0xWYnJMFY3PfzAi9GaZ02LHkFjmTKTDNqpLRztXAWEMj6XEqABMsb/xQt7uKE7ba
Ij48deRhYtdi8NJlDRMV4zottM0xPSXH6+b/ueg23oMoCboIayI/W5cs4jazhZ3lYYGZ69CX0tFD
l9uG46XRQ7Fy7FdLw8Ca5FYYZg+s3txkTTOluw+qOKycWBnV4h1mXJx8hR0c7QdfbFaUKuJGDYFY
7atN1J+fkpbHbC4MCe+CWWM7nHeOSuH13Z5QecT4vrrf5r2G7kY5yupHCk1wrFhQi2WvB7FbrMR5
FfblQRPKU/L8VCeANnlslppCg7gXA+RD64aCK2z718XvygzNd5Knx5wJTzlmXa783aqWyihJat/o
ZMDoTNum3GYF6Y2nu82miDQghKSQNy4T2ZMIjdQyHeEVNAabHvss7KM87NVrSELkAdwFHHhYLhJo
Z3i6qGljtXt/p7kGuumpy8Cirt9ymuX2VFm3KWveqPVcw9cABMByXDfbHd7S8mZHd7vXwDpnwOhA
nrOzcc/PC1FmpjxVjmRhj1Xg5iLPzXj31mIvWRRKEmdfkm+rCDS2g/DEEBG9TmgMvb76wf51xujM
Jk4B9/rrjNHMJRAcV8SN228RcrDFbS4WOe3owBeHiNS+2aK0/oDdIdi67+EYGhQc62p+k4hH6Ohw
d8rAcS6TdJK+NcwWaRd72r43Dw+oNpun9US9qElcRHNSNFl4j6PwuiMOfnD22SDZdcTOW4k1hNeq
inFshAsCobQ1uft57bP7OQz4vJEeq+c7zAQ5cj2sKudz4RlCh0sBm2UJF42RTvgxcfa9bNXYaceB
J4bMrsSgAi2yUxkXqu9Lx/D3/amYumF1zOenu6MLVjMhoqUHgnEzeArx2aaFiCTIRxUcGMU6l5bu
M3ot0ZnM4hle+dUBGdrGV2RXY+4Sdgf7+kZL1sbTS3Q7KjIzzWzAIipd6E15m0qGnFS6LfyW8jsn
SBAYTMbQLtBYzjIIOs91cC6ooVhOQTRAuikZIoPsnp+EOtSEUB7goDP4rL63fHHfrPjVwS3Wb0rB
F6K17qSG2qpnLHrfh4IPpyh6zlp66iS99MojrM4hF168TReiwak8qG+0MR7kFAH48SI3ExaBh9oN
LkoKl8e+US9OEZwh2DyEm/Kf4+s+LgzHMTe3nDZS48lz6mXQ5hf8rEz2x80L13fpzlgH1/BPbZ6S
UXyUPOWCOUfPXKLY3O0CITBuSuHWnLgWbtfsjQvnRYIOnuuZrz2XeH46baqb5fF4FSfFn3dRWAUH
yLv0MgNujOhcIu8glz3S5G0GRa7sryFywmeZue0j/9y0FdsBV16AxmyXbhFygd79bbhDoCa3ksNZ
RJ1NBRHMw5xTM6vCNdtsQniyHKiR8oo2c8K4b0MBmsnVt2J3skNEKbohhm56v9neRztoCJ6cm6tz
e1fiVm808kN9QZXWpD1LcLUTbCjsEgDWbdmUoZI97157DqbY05xI+N3TU920kXLjgpwI2tG4Xqt6
g8xOPAnV7ViFNVBzw56/gM4J4seTS2WjsZyaYkLOe2PiayDXa4VGoc5SONLJPSy31Wx5foJvjhCn
aQcOW0vmjsdGUlKVcIRtYYPi9q5VcbtL9jC50qU6EAGr+gaeSYh2hRD4eld6yD1upnezEGux9VQ7
h9l9BwjtQpDJih47kUwKUrgccP6iRnPMDBLCXCpXneoMj13aP1RMczixUKZd6qpcZ7TQ92tUnSpp
Q9EXw7jCunK3fOpwOORzJSH3a0ADiZ0gETdMwXVg4Twgaq41J6oyXU0rU36oLLKYoA4nT4AXiusl
cM/VZnsrSBESnLhwRC+KODidexcwk1rcJf5dTCZq01MY7EJRps5svRr45rODW0uWjiYG5Akv+x0F
EpyetQD1/OQR07GCblrMdspO85mZ5A9XxB8JR0P4NqZAGBfbEemvR2LHeJjlsAkTBm5+PRq9XsKI
wDdzOm0O0Vs2FA2GLeyLFA0VYD4KTjsd9ygfHPg+IfeBbiVdVuK+2SP4StQ5BV2UMy7AWM0lmobh
VHWeDhHAOWskVflme+94yVSFdyFt9w53l6OFyC6pxjvy7h/100XQjRQdGzY+rwhygHhlj+EihhbJ
1KyYoMxCgfMmMIndvYjS5yfJN5imQNcyPF5cs0DYOMA5i6lkl0XRuUAOMEG1kOLExpKTiZy2whQU
Bk4cySnt2/ksc6m5S8nwgj328wREZJyqVEAid2iABJC1PD5qNCHFDAZ2DOzNpISkg2Fx94u9Lg7e
yFQFDqwBKCB8bApeii6ofCmmgt/wGxmeM4IgkFSbegISEIgbp+gUUC7SUgfpVgxCtmjF6tA7/n52
9RkzJGWfIL4LnwHRcy1pl+14Hxwze1ifn0rtuGP6pGlgZj4s4RyOR3RQKgZH8ZA5ngcKUM5noLzg
OQBPxQEUhsNJkHNlB10Xb8fWDOhfI8b1vYtmPGoTRUUn1LuLWxaS4kY5bDKOyehmqFlqFdKKzwCq
WnbUPPhr0B0qZzOgYgCgEhDNyQEnomw9SqptKxuK5qyDih/uAnLGAgOlPT/YTRIWNkTaupoPrcOR
gfl44vTANDJXEpbDdFuxH2vchVN06PqE3if1pqeVCnT6BTglmlGstgwUQHQVtZ5CclZBGZpOUrq3
3bVQXNOvSGc6jEHu3gdTU3ESn4NgxyXhrh/1Irlt0YfR3NeQZYPsjKEIRh0xUFJRFrMNldnTV92I
Zg2mhQVeR1EsAWOIpBAQL+kk70f+ADGxm41AXhXr8b5sUVuLawZOXrpmOWaWNwnmbu159SiOtzBA
DHye5yNGEfbuWKXIQYg5J3D5les7ZE9g+iFgKi31s8qWCC7abAioNahyrAsFopVKKCyVTRRDHXdD
nG62ViVuU2Hpae72xLWUUttUpiskE+cuP8bVtNFIae6BujTStEnXhntJFIQOEUUQ3H4nXA+EhcuW
GGaAlNxElyfUVFM7f6RGqRLG0OgpbbwaY+7hlJbrZzHDQxFwpsuSXaHNyyhOftWPkZSOd2BFgrJF
BD1oEVQ9DhXSrRDkyoIr2Dwj9MnkYwlVobLmuSa+0UjgLKg319I9ixtSOG7jZof03B1tChAPjg1T
8tkQJkyPZbK71zPY5FrHxxlDkvFswix2Et3T8eimwsxp7Ipf6tZlYW/tixKKsa22Xg9ZIIv30qhV
WiKcOfLPu/PrcQvJ+06H+kxu6T1L8dA3HC7zU5r37UeVfyD2+43alx/IfbHqNH3D/SB/6MkEH1YJ
voiq+OHsxUce8qV/JfjlAwMeZxaUjyOBX+8qbrdO/Z/6LUz406ZhPyNZf70F4vDbF4j/C9Z4f+1K
7f/YGu+v7dXH4+Tj/ovHAP9Lzgn9k+XzqXar+2v2FvzqZl8ce1xO8T6r/5GCN1p6GHznQYBvPXns
+++///bt38cx/sbnnqhhE1HTL5ttcE8n1aRN5/fJ7ePS5ffNR3+GlDdDFeSdUOWtBzy/0vrygdgN
oNRV9z3djS9vEew34YwP7XU/a890/iIXp32G8d/uUZWvGwS5jS/vvS7pwaMi7mOljjaRNoc0jbue
bB5rA76aQ5/WY9ZDG241PWj60Pevrub3H535sAY4/kZz8OMQvln90XcenfmVe4Y+Su2P9H1ZSv+p
4EP4ftxj9FPxTx5/2w7kIW9C3W9FfueVSuADgrzhXOFf+I+fKHnHYqZ3uY437Jj+EOTOH6z4T5S+
mGGbN++4K+DdC5I+uJNfUPD8RNfN8hrJNv4mOy95tUWv35OC9FfyND91+1vHbq8IlKuLbWz/FcHG
O1NMn5LxR0Ucb80s/YUijg8D/a2L7ivky+q2D4f+XTdL/gxj/C6X8SMZf5TH+Ho89LNg4wcy3xVk
/E5X8XAJnT/Gr8evdj9Q8hLFSV7F0eYnfgqCnp9OY9xObd4/Limrlq3WeMzrofup3P/1F9DFn0nO
X0EbFR16eEa5TvPqd6I4AvmdKvkpLX+UVr4ha/FzIPcpsY+ZgD9cOT8l4HXqJNxYtgni5+HcL97+
C0G7T/v2jd+9vMWIWzceYeKPivXH3b/88wD+8NYA/otdeKMu72H4nbckv+XokI9Tj49znTZyXx70
vryZ4D/4quQ/7OKVh1f/bzbrozKgf3sh3nwLzA8j+OZk1nvvgfkV0f+M9fyRvvcls34q/pdIZr1G
WP+CWPrNYvJp+39UEP3WXXh/oSD6251f+DHmeH/e54+xy0zebkNWt/kbrur4l5joPfzWU8r+aUz/
MEv9K0r7Gfn9JyrfZ6//uZJ/k9X+A6Hya+KB7sb/KEzexA57a/b0s9S/GSHj70TIb12z8Toz+zrp
/E0A5D9QAP9JpV5H5j8Wq31xwdmvSuHnuvCHxWr7t+ZDf6T25QO5/0lh/CZWMSL/kVWMX5qj+dOs
YvzaZj5InRynfvilWeW/4jLG12tjlbzrNua8uqk/6x0Onx79eZrSx4VeIsWZmfRakey9buQ02SEq
9L1SnG17nvHKP2bkIElzyYgNvUWwLqT2RQf1w3kZzpFlPz81rC/brbLnEVVRK8teVT2dOUOCKGoE
qQt7RcvakDP3KOopUsSkRKcDamsTXvEoAchjgmLwqGfQ4kMbbVXAYXEEVAS6AqfHAXSukiuSYt1u
nAfrVx92B7HOWTww9rQpsVHtRmFOZ/vpstohOKsnUj3iO7XeSWfo+ck9owOH+knPc1E9qx7m0gW5
ZGnVpmp1wplWjal9HJMdd0yxHJiY4x0cMmFX1Nx8O5XHZOGl7IAj5DLtnp+YYPZp3DqT4dimSTiS
924gURzUbbWNa5L3rjOFhCGhX1KusHASWCeGbSiEDgl/N3OOVkuuvWBKO+nn5yfHGMiBdFNElyfc
tNPcZW5cyRCOyYzHnrqRQBApUj1ba3Cd4Ht9oYaSU68zfjxgtHoDUjpu7lAa4IeOen46s1eSLVxj
nmqTr9k9ResmTt0ofj9QPT+S1k0+2ZZPXSX8VhvuvZmAeOdqE4CXpxkceCUZRBY+nQaDUZ+fpFRP
2fqGm2gxdoZ83EM9f2OPpJQCyZ70uqaYaP/sFhgmmwulDoswVHWAjZlSB5my24nW7Kvi7GUz+Ljo
kigz0iQupMsG0EiK5Ypd7xPCekBSM9p9OE/qxb6K6EUQg2APIOqe0ar7WhBgcEWWISP69azcbg7p
uNjzU5oCMYlnDFhZV3VQGZGTKELR1Zu2rAUszhNsO6Hh6FAQp8mQRkVczuSEKTKF8geOv6x1tkz0
rpkt9fb85M3AuZtwejmRYg7OwknxCzgkQ+aSYwzfYDxhnsq5zpUcGqKSs5Q9BdGH6x1lu0uWCXse
MxS0ra56FkzPTyEon7tRMF2mcOOctu6c1dm6Hke7e4mdpRVV6F4TGG+yOhEixBPn7GTpPJ4mNFp9
D4NbNPdAZKzMNNg/PxVNn8Bu51Uoyhl1Z5ULjrHHWWq9yOyK7MwliZCR4U7idWm2/dyqG5aehpTb
mDh6DDZOO9ure0X0vE16R05oDK121KYmYln1j3I9ese+8O/eDmTITKHpXrigSXTKw57Y8Q1TC2Z/
TfcVlspSXLVkVze9udzlWnh+8ktb3R/j3qYGX3H3WM3DVyHEzV0gBe28ICk6tdYVHqNgaSwWhK42
Dp1RT1OvQ4TMLQPn9/2dzO4I6Jyen0B9f72wcIArWFca5CIHN08GYDc9QLab3lTb8i7c7VCaNN1U
UtZTrJv0o0ocbHYBzFwW0Qxdjeyi5171/ETELXguhIKNJQsSZzReB2N/NXN134YRZWdIK98Oyz03
U09JqWWXud1tBzC9kxyIoL8KRIZGS2wUI37aetpeO2i+2IDUJg08RfMZYO/Rcl4gU3IG+TgLTglF
5/XOdAfCOfF8zlugJBHjcPOsJIKO5zDicUq/mFnQbLrgaHoyOv71zPNkJghcUMZddOUdAQcMRo4K
cR62TntTZbWd7Br9XPBgL3PtHrsV9VCsB2JybR7V8a7YJMQ1FjKErdVIZTaowv3Z9G8t72fLwou6
70Dyuc/Q8MA6MAXNgU/IgZyzkY/t6qTpS2xYYXCdIAOa+k0XehrAffDglZI4ii4vVGpti0iN7ksN
Mm6MuRmyZRcsFS4FwIGKbgmn+PXFmzPaKXh2rSrPihtHGY7KLtjGDUF5na3bowJp1U1J+dxwrnYF
E0ADAHMhAbpyGH3CSKkkr9M/76YyCNxiR+R9a35+gQ3eMUt7eMMNYe+f2PlI5MvbqPymLxb7BmJm
I+7zNo6MuCn8MI7IpinyPzBm5rbqH6IRtnVXJ/2L6Vfdi7nxJ3lMd75hKebPg++3Jv2/OBRvngHY
IiD4PRnIt6QtX9XpI7XAD+S+vNL7YRD+7VcyfxNzSKyu1FXe1+9Kzf/3DLf/nuH23zPc/nuG23/P
cPvvGW7/PcPt957hZhs/nOHWO2CvVJxtGxlr6PHAmFea2miTzZ5G+1RlziANKZfgNoeFkfsLK1oO
Jl51Xey52DTMjLvzHMbcUXmhaWCTDarnyVphjobpki7vDQ+td3m6ZBitL1iJQuB40CYIAiuPvGi3
4gJgMhqh6zgCYYhjxLxTAY0sDNsRsBWdUHzdI6SjF0darydrUZ6fLIQczW6EqIq2N6h0NkZnH/lW
dzhozd0s/eo43TJ7s7VnpyiOuWvS8+k8YiOSWA24B8iQ19DZ7cAAEzZLHniDumsc6VBmYwN7E3Hy
1M0kDLfMyz1G3GQjHxWLnXcHqx9AtQtOS2XaxbGhapdVkFbKWxYCMAOyH5dwSpmtMilqmlDXokZo
29Qun8rxfth1KHuVj/MJIfX5chna/tgSp2O/G1j3sAXxoH+9nb3Kw290ttlKELauz0+bTbu30nJD
hmNedgpuTD2WoLKCkdMUytLUcaS7KrDanBERtGflpmpNIpN8wM9dy5w6tRnkEOImX8we6SDYPC7d
KPt6ndv7o3lW9OB2reA0UG2G3iwhMfp3Es1Ur1E82fExXIPJSUxdURNYhgTaSPEcJjeRmMs2nvbc
1YVU++LAKlkd9FW+CdZdvqG86YPx0JCnuDVUmTpFEBbhu/3QNgcBJjN29IvGPLfLeT0fAONABJm/
cSFATqQP6heuD0wMJDRv0emuvMVrtj/0hoDiu+Q4w6ceo+uc9XijvJ7cooBO1ARlxAn15SSQ9U6m
p2B9fsKk9eQyxj2Yb8oNvoupSO+F66YzOwdk4U5P9cuxEUZyHhT0ZJV5zzbyZiKvYMSws6KbbIlL
+SWRvfbkPT+ddT1XxHimL+rhhpc3wQCjS1yN2Byi9d5vT7p4Ky+6xlK0X3rFkc9yY5n6JuEWNVBj
NJCDgKqteGiXTRcwLvPOF56KVi4Or3mIbzWsPmNY4vX64A57sOXTEmz0dSIzATASIlA6HnPSryku
rvYKZMIyUXmSd3zcfuGPabvOob6XOphlb9hI+9caOd1vJzjg942r8/vbbeNxQjrqqoOgarfOIS+b
zN8HO9G8HM93V1TaNBSczcuQDHlzr+cLdzT/v/aurDldJe3fpyrfIXWuZsapF0UUrJo6VayKgoKA
CzenEFkUxQUQoebDvw1oNAZcck4y/2QmN6Ybup/fs3U/3fQirXqrGcthJrvhZpDf4QO9tBJQNoZN
YbZEXK5GyBrsTWK9opJEUxzhO9furMf7xk5menXQy9SDlaYt98BIy1wpXPYbbZlHxTB0QJyBehN3
qTZMi54ryc0T0xGtq+uu2meVaQNS1snJjUNWMjYR3hAGyZSyNlxvonWfR/uhyE4CXArmW1QbLdez
SSdea+3FwleV8XI4jNA60dQbO3Q42yBB5G07K8Ips06fgVphmStHrAR6mTVba4Q0YboxpQ77jkL7
MQ8N9KCsAquX500f7Ww2q43kVLrtURiXSciNVy5qIdiyN99olF3GNMqH0e588vzkeMspLrqVri6X
vXYXaxNWtVlGysPRGMbGcBvCnDkb8VCvSllWr+308X6jSaw2lQ1hk/0mYY1bnB1iJrUWQPuG9vch
Q4RmC8J8d7dfNIgKgqxbaDXSLbaDmzJcI00QYdZLAdqyWRAHM0NUbmE7Dm7UIAKTcXnZkS2kRBsg
RtJWpX2ctCjI1h1HHfBWzFYbJagl9NBOo+uKFIEw0L5FqzOUDFBsWaJVXezrxESXV+LIxCFdGSHc
Fmnzs+cnzzCtbcTbFu+OBK0GYt1VR3cWsYwNYnpdGkW4W8YDi8FWJamPubEM+gat5tQQmu+bbq1U
j+bdzt6GcLjOPT9tx6jaJHZVfIARo9A08a3L6XqngaMI17JEwTIaO0NmIZzbEXbE4dM15Xtmxce0
Gb4oUwHaiHCIZ7q4EenPT61JZ64IxNxpCyFdI1GEaYV6FW+ieBvCkRLFIbzOmpN40Iy6UUdbxUMh
JHYLf9iNtkjTsxaN5QRp1cW92RmDyAGbxDt2UhWglg+Vu4ghhO21pEzQWoxtd/gve+9BpYx+ePLy
dYT+VZOWlYf3CIsvj0L81jOW1xZsvmrrm2+yagWu1QEMGFMgAt3wPOOX/aC+bKdxc3Kf226woCss
06T1/c6IXbUyVWHV3cGR3KV6lRXdZTTMWLH4lqT8ps1FXRAWNR2eDCCla3as8trUnMXQhkgQg1YG
ww6ITTedFWvVCXJvNO02NZrC6nLqTqHRejRyJ3NrtBvttkRY9RFzF0MxRcXLHcLUplRf1IY+MV5w
W9VCQTuItVxI1JuaPuyZu/nY6E0IZii5do1pCKysO/vWyqk0MRj1dpKtwHNhPFQ7WsDu+HDozaUK
NaLZ2RRnZA30Rr5lRQ5aZWVBVJztzrQbMxUpDzSdRMgxGsr7AO6J23Y1sJmtwHR0wnCHqm3NUZls
ch4+3lnzuWFNo3EMg1ZVGAWRhAeavBaIyVAOVU1E5TINNWl1OYgqhqFITGcZr+YKvCuj1a7EKttV
ExZXwzLPckGN4UvT+XyqjJXe9vkJhhhjA/WJYdmIBGvmd1a2J0sLo7ddCoMmQ+mTtbkhFGLTG0DO
xuORzUSFHWXQtTtYuQM3IYYYlcK1OgyE1vPThh8N+3sFjlg26Cp4s4SWt2Wz4w4wbQW022HksbTj
LL8zCoaDwaIp2CsVcnqK3p1utnWl00QCTGOm9LxWBxYi8HarrTpyn+U9pzMn5U2bLq3HSrsnyfS8
ikRbb9Su72G+XlVLhiNN6nZAms643a9hiGALPrnq6aq5moNwC0RmmygmGAyoG1VbU3/dULEQrU0C
TiWqbq3TmOEeWXU5rNupjiV5xthLCTcFqNwuB4zJUBi/rKkTvJLIrf/8tG7V/cCVF9RuM21xS06d
zwI3Wnsct6WtQR/hJpKvTknYaRPxRkP0eT2GcW0TOgZJe9xmTQnbQAssdAMn9wdu9DFpjNm9F1d4
ZqSVeohcD1QcEgaYLM5iS5ZLlW1n41YGWLgcIQQCBnOjkotP0F/39qD6h/vQnNbsy3rTR9cLJlih
DOzLK9qHdlH/1L41R4t/7gzH9xm3e+H+TLe/avfEFtDyAa17LnK/sjmhkpzH+s+XgtP58r82AhLe
aqF5yYVdBV8Yix21ioBwt54fRua76TmndxV7vXqo2JgKvj4mG5CK1l8Wu3H+l8d8D85/9dysuZnr
pJabbHI45/2PsyeXVv0Ra/3Cj+QCLQKjMWdWkF7e9ai93vFtvMhSk8wXYgEMPjm/605rBTIwDv5x
gJco70FDr1QKzw+88g39QlIPGC9cRYAv5y9VvtIF5S+IzjdeAO7lYXQf6DI+Ys3pJWpf0fCSgvKo
/V60fg9ZBSD3aAtWy1+98fDaiZwCkr9a//Y7oy0K9nb+JfHCrzbe/WMV+OvAJxeGdsdSiLuGuV+3
ahyfMYdV4zvfafgcGACP7bg04CypMpn60jAWOHGPbJi14oBRnN+D4+1k1oSfnxwVXkmkFTuW1Kjj
JDMcb2fsOJwtxh22T4pRzyfbs82cFSKyPm/W58twVjfMdbfXGIsSN53GuCdgYTWOzV7p+akKY2ME
jGkm9oLScb6MsuMpJffCCGuZcXVcLwtVWNP2KKqaE4UoUY2aEI4Jy5jvUBtyZrpRmVrYbKvvxH31
+cleEhjNj5tIawxVextqicIzoqzV94oyRlf97XgrUqy/U1giGigdrsTYFsYO1rbY1UvlqccLumGV
Irvc1ZvM8xNbJQwAhoSVbliakbqAU36pTvgcKm5mfbVbrYTCPh4gHsHF47JHt5aLmRTHCrE2NaTk
BTMdXe21sdjtoKPnJ08PrK0dbfQl2R22y90OVBFda7lo9skxFQ3ilW5xhMSZYXXawE3eH3S8ZiUa
DkptadljQsobsNNtOCftCQWGfqzd2PQZxdjy8GCEV4aq0mJCdyZbxMaTGIMyVA5lGaPLuLva2Gb3
o3q3otPd2l7shNP+gu5rIt21DW7dZwE2kRs5Yd+lo0gJpqtZXEMoE685hrD2nLijexO5XiXg1cLv
ScMps8FkW4CYpW/aRn8B7Uk3DlWz6c7lUnM2fX5C6G6HdOVgsI8k21ecddOCtUHZ1w1Fqk2qbOwH
Elcj9OVgF4meG7f5Rr/qom0+kquShOw32lJ0+UhZjofq8xOPL/i2JO9lG6KRTbXbDI3dZIDUDOB4
MBWNkNoC2ayWZqc9ae3q9fa8F6jQJKjVphNoiE0wgtuEzZ0N7AATUl/AcXrByI4UiEuSzB2o3rkH
5qz9Tten3btB53yYed6IPLQpCEavrMe70qbfvYvokdN7U/gvh4j0JWPp/o1EH1op91csIy0cNp5r
pWi8+LGNcV8YXSeHBOna4jDwXW3vmI390OrTYrdAk61u99roWbT7DvlDnpGesVq4UfPx0yIKdstl
GF8eBvmx2OdXNzYSjI2+3sDqH7OvFOxjWzCRD5lU0Vr+fJN6BNYPtaLbg6jPsKFK0RTxNRsqGIAV
9tfXzjF4dBKp0ILuBvXX2M9Fxpvk28RtM8u2umen12ypmbZYWZ9udGZKc5LRnKY0K7+9QPdC7q0N
Nzks4ovQAn24yVmGR6BHqV+oljJMDVCgE4Pwc+an3k1rzRa+kURKwAqysy/+9n+g3N///Y/k59/4
YpHmeiD9j5uVSfYqbBmLda4VPWoS/1H5wv+T76fKt/o/+X6qfJGfL9/DGPUrDonMBrr3dw2/SG8G
fz/I1QcgS9rO+EIHSw4IP++Av51skQcgJ84l+dvZmjfcgAXPPx2wDdqFd1QLWzGQpFahm7xzNkD4
V5L+Rdg6j5z7hmmAMY1uHOBrk1Xgv2f2oJ4smE5yvh1jk7c3kGT3rvxYRs/P42a77I/l83B5WXqW
nzT4uWweD177iRwayX227uz8Ptvs5uEfyqyg4KaZMBz9RAbN2dbz+4GbROU/kr+FZpG2oTs/kTlf
8xxC26aLU2auxcz2n8OlZKy1dEnOf4hNgMNLcHhHHJUfoLxFek5iGnf+RNs0jttR7mfu5qg/mzfP
je9vzxik0+cIknsEdcF6aEDoL5ha+NrRT8GI4KpE88vcKVIYruWefJovUzwh9f7dnE/o+aDef0b/
ph8Iat/lA0Htv2MC8Gu99EpYctVTi8t9ircygNxLSu8uly1G9+fd9ut1dCP2v6qn62U/RVfJ6mlB
eTkSvUth12F+R6XdGn9f1dqNwp+itjsurcxfYHYV6rdV3e0pv9savFnHJyry9m3Vhdq8CfvbKvXm
9OZtnd6q4hNVevPeykKN3gL9bRV6ax73jlb2eg2f2dRmt5Ee7uGVBo+1uNdhf0eFPjCfeyvkubOe
Twp/MvLpVa1HAC8ZgntjoTvxf0ct3zNVeFW9d1TwKXqVM7ovR8JgjLi/S593AP6Oirw+YX998Hit
6OeMHxOKL4DkS+4W19wx5DWQf15h6X45bub5n66oWUJpASgRh3uXvQh3QWa2XDhfaik6wLGhLc/W
Ihy2FuE4nezWg5I/XMSPfzyebMRjprIx6pbVYTkYwItAbTaqelRrTqptX49Ca7AcRDq82E3m5TI3
x4PnJ55EQo4kqOlwX56O2gthWFtMR/1oPAw9liEq4+V+PS77C2PQ32nwIBCGbLUL05VxrMC87MTd
phL2KIfB00ONcVK9Qr/WngwZV1X2a73al6et9mI8rCx0i053UfWbTHks6mTKB54cm5j8UiGf7EiE
k4OXcaci912RkEQGcEsTZCIJxSIA2yygT9BJuo+DtAzhEg1+5xCusIQs0nByqDFOdC1Qm2RRoASO
gzQPxIaLyZu0RVggLWA4FFIQfuMXYAP/BRaAZ7UgPC4TUMg3cBNL0zx+yK8k+T3ymO+BfEEE+YAy
lPAF8pN0sisNp6yLmkbgiYXnU2ALasIxlnh+gsLuNMlJawQ50B7ILvk91HB88/hemk4ppGkgxJ6U
5DtWgi19swpqyDCktHD8UCIqqjnj+lRzmhYTnWZvpjVk6F+5upQXXjvVZB3TZ0hAbedYkjNMK+W3
WJL0vgB7kp9RSLl9fnKO8qoWcBUf82/L9yC31ycniWY1WTcoZFyPTjp9fSKQb2sSz/PLBfINcfyk
a4DtpO3wqO2UG+QVK8gXTpo4UQgvKST2dqSRq/XXmqyTTgsppDp9fXKqSXhfU+V9vvNKIZNGYm8n
GvTRm1LNiLmSPtOAdCnng07TuhtKgXzEc0kXyrmW+ek1STfEAgpn6azGMPNT5MKeknT0xjroezWR
YHvPJWgmM3kgJ7k5Jyxv5Rid7DXz00suLnV1Tkk9Uqq91UTSTj4/5cnDO+q29lYu3XOdo+I7Hzro
9I0XlcqP+UTJOuY/P42Okn/H5QkTkWuHF35dJDfnHMM0p9+wLqzDudBpnsXmckufU2qfY36DTQdP
RuJ7DPRFiXMvvJRK1vbyBSX0N/1p5l1Jmsn3ZynDlt9CNrxbbcuFBsO3bUiRxXYLeuTLnj3DNjo8
yfOmIinwORSen4408jTAX/GiPApZHHI7ojlpgL/idWd+Wg0f609z+rrL/vSipkpBH5/UdNkuAh4O
/WlefFEULVyhALBdxh0nL7q0M+s8urqU2wHbeQxUhOXO6OHYZ+VGBVZBv5kbix7bkAua9SuSz5MK
esKe+cKt2AfaA5hZFF9KYnihIIZP/JQmCDE51YQmGBCbQwgNXscICKch3AwJIZQPvy0MlzEKCltU
ksbDFqiRf5MGtYnHHKCJUIBwnU/kk6QJLOHSTOTYCpN0SXybvnyeHKJ9/Q1Qg5tRSCkStZCDcO+U
DpO0jifYSgCbcniyA2/i9BE1hBs6CWXcpVyfuEcI88R9CR9h9PE9oNPDmyFOuwkN8IaLQ2mawnUW
lASUoEQKrUQKmVQMnQgziiBNCwlGKkztTQQ0w6Z5zMnSpzfuS4PyUILtQBPkcCm3+ekUM7ACnnyV
V8J1Kq+TzgE2+cR3wjUZvrtf7vaUxlZzvbW2NVz/9VCI15z3pdOxfMeIvOM6j0enlmZL4xMX3B3n
BRMq7dUEsKI7yeqMnJkZOZtPe/vmH/KfnIkBMgyWbsvQpl/App4Ss1NihTteD8eQsdRNUxjOpr79
2++1y5Vk30YGhbtSD5OuMz9v1jxfChXk8qDRbyOGws2jhwvUfc0P3h+lUCAH7M+K4esnk6+uQS1a
9vW9d0zpyfokQCnnSNdMGj96Me7PZXFrvLtr9VFm71x/fM1pPuUrCpcSfEkpfrsm5gG9XJX6/fXc
q4MG+oAO+hn5lzfX5L78LYPw97u+bN3PwXf8LnmzibmxeOB66U/R6en2kMcUeQvsd1TfB7rFqwp9
vL5PUXG6GvnFBBrOPdz+Mb0/ztNfaAlfsAfrynar60tD3he4ux+E//lyeWrWr+8sV/Y23dfKfdmK
8KLbka42a4+Z8fFf7/f/B1ucnPivOwEA</Form>
  <Code><![CDATA[$MainForm_Load = {
	#Disable buttons
	$buttonBuildShortcuts.Enabled = $false
	$buttonBuildAutoHotKey.Enabled = $false
	$buttonBuildMQ2AutoLogin.Enabled = $false
	$buttonstartMissingToons.Enabled = $false
	$buttonEQClientiniReadOnly.Enabled = $false
	$buttonFlagCheck.Enabled = $false
	$buttonStartJob2.Enabled = $false
	if (Test-Path ".\PEQConfig.ini") #Get data from INI
	{
		$Script:FirstRun = $false
		$INIcontent = Get-IniContent -filePath .\PEQConfig.ini
		$toonsFile.Text = $INIcontent.Paths.ToonsLocation
		$ShortcutsFolder.Text = $INIcontent.Paths.ShortcutsLocation
		$EQBCSFile.Text = $INIcontent.Paths.EQBCSFileLocation
		If ($INIcontent.Settings.AutoStart -eq 'Checked')
		{
			$checkboxAutoStart.Checked = $true
		}
		If ($INIcontent.Settings.DisplayPopup -eq 'Checked')
		{
			$checkboxDisplayPopup.Checked = $true
		}
		If ($INIcontent.Settings.MakeASound -eq 'Checked')
		{
			$checkboxMakeASound.Checked = $true
		}
		if ($INIcontent.Settings.HungPolltime)
		{
			$textbox2.Text = $INIcontent.Settings.HungPollTime
		}
		if ($INIcontent.Settings.DisconnectedPolltime)
		{
			$textbox1.Text = $INIcontent.Settings.DisconnectedPollTime
		}
		if ($toonsFile.Text -eq '' -or $ShortcutsFolder.Text -eq '' -or $EQBCSFile.Text -eq '')
		{
			$tabcontrol1.SelectedTab = $tabpage3
			Update-Display 'For best results, please fill out all 3 sections' -color 'Yellow'
		}
		
	}
	else
	{
		$tabcontrol1.SelectedTab = $tabpage3
		$Script:FirstRun = $true
		Update-Display 'This looks like your first time running PEQ Config.  Please do the following:' -color 'Orange'
		Update-Display '1. Create a Toons.Csv File.  Use the Build Sample Toons.Csv to get started'
		Update-Display '2. Fill out the locations where each file/path lives and edit your seconds'
		Update-Display '3. Click Save Locations and Poll Time'
		Update-Display '4. Click Build Shortcuts to create all shortcuts from Toons.Csv'
		Update-Display '5. Click Build AutoHotKey Script and paste into .AHK file'
		Update-Display '6. Click Build MQ2AutoLogin INI and paste into MQ2AutoLogin.ini'
		Update-Display '7. Make sure to Enable EQBCS Logging --> EQBCS2.exe -l EQBCS2Log.txt'
		Update-Display ''
		$FirstRun = @{ "FirstRun" = "$($true)" }
		$NewINIContent = @{ "Settings" = $FirstRun }
		Out-IniFile -InputObject $NewINIContent -FilePath ".\PEQConfig.ini" -Force
	}
	$cores = Get-WmiObject -class Win32_processor | Select-Object systemname, Name, DeviceID, NumberOfCores, NumberOfLogicalProcessors
	$labelCPU.Text = "CPU: $($cores.Name)"
	$labelCores.Text = "Cores: $($cores.NumberOfCores)"
	$labelLogicalProcessors.Text = "Logical Processors: $($cores.NumberOfLogicalProcessors)"
	#$labelRunningEQInstances.Text = "Running EQ Processes:  $($RunningEQTitles.Count)"
	#$((get-process -Name eqgame).count)
	if ($checkboxAutoStart.Checked)
	{
		$buttonStartJob.PerformClick()
		$buttonStartJob2.PerformClick()
	}
	
}

$buttonBrowse_Click = {
	$openfiledialog1.Title = "Open Toons.CSV"
	#$openfiledialog1.InitialDirectory = $share
	#$openfiledialog1.DefaultExt = "CSV"
	$openfiledialog1.Filter = "CSV (*.csv)|*.CSV|All files (*.*)|*.*"
	if ($openfiledialog1.ShowDialog() -eq 'OK')
	{
		
		$toonsFile.Text = $openfiledialog1.FileName
		
	}
}

$toonsFile_TextChanged = {
	button-check
}

$buttonBuildShortcuts_Click = {
	buttondown
	if ($FirstRun -eq $false)
	{
		$richtextbox1.Clear()
	}
	$ini = @()
	$toons = Import-Csv -Path $toonsFile.Text #Toons CSV location
	foreach ($toon in $toons)
	{
		if ($toon.Login -ne '')
		{
			$ini += [pscustomobject]@{
				Login = $toon.Login.Trim()
				Server = $toon.Server.Trim()
				Character = $toon.Character.Trim()
				EQPath = $toon.EQPath.Trim()
			}
		}
	}
	
	if (-not ($ShortcutsFolder.Text.EndsWith('\')))
	{
		$ShortcutsFolder.Text = $shortcutsFolder.Text + '\'
	}
	
	Update-Display "Building Shortcuts..." -color 'Orange'
	foreach ($i in $ini)
	{
		$TargetPathExe = $i.EQPath + '\eqgame.exe'
		$Arguments = "patchme /login:$($i.Login)"
		$ShortcutName = $i.Character + '.lnk'
		$WorkingDirectory = $i.EQPath
		#$Description = ''
		
		#$FullLink = $ShortcutsPath + $Shortcut
		$Shell = New-Object -ComObject ("WScript.Shell")
		$ShortCut = $Shell.CreateShortcut($ShortcutsFolder.Text + $ShortcutName)
		$ShortCut.TargetPath = $TargetPathExe #"yourexecutable.exe"
		$ShortCut.Arguments = $Arguments #$Arguments #"-arguementsifrequired"
		$ShortCut.WorkingDirectory = $WorkingDirectory #"c:\your\executable\folder\path";
		#$ShortCut.WindowStyle = 1;
		#$ShortCut.Hotkey = "CTRL+SHIFT+F";
		#$ShortCut.IconLocation = "yourexecutable.exe, 0";
		#$ShortCut.Description = $Description #"Your Custom Shortcut Description";
		$ShortCut.Save()
	}
	Update-Display "Finished Building Shortcuts!" -color 'Green'
	Update-Display "Shortcuts saved to:" -color 'Orange'
	Update-Display "File:///$($ShortcutsFolder.Text)"
	$buttonBuildAutoHotKey.Enabled = $true
	
	buttonup
	
}

$buttonBuildAutoHotKey_Click = {
	buttondown
	if ($FirstRun -eq $false)
	{
		$richtextbox1.Clear()
	}
	$shortcuts = Get-ChildItem -Path $shortcutsFolder.Text -filter "*.lnk" #New shortcuts folder
	$toons = Import-Csv -Path $toonsFile.Text #Toons CSV location
	$ini = @()
	foreach ($toon in $toons)
	{
		if ($toon.Login -ne '')
		{
			$ini += [pscustomobject]@{
				Login = $toon.Login.Trim()
				Server = $toon.Server.Trim()
				Character = $toon.Character.Trim()
				EQPath = $toon.EQPath.Trim()
			}
		}
	}
	$lines = @()
	if ($shortcuts) #only run if $shortcuts contains data
	{
		$richtextbox1.Clear()
		#reorder to match toons spreadsheet order
		foreach ($i in $ini)
		{
			foreach ($s in $shortcuts)
			{
				if ($s.BaseName -eq $i.Character)
				{
					$lines += [PSCustomObject] @{
						FullName = $s.FullName
						Name	 = $s.BaseName
					}
				}
			}
		}
		Clear-Host
		#Build AutoHotKey
		Update-Display 'Note: This is only one example - There are many ways to customize how you start up your army.  Please see the forums more.' -color 'Yellow'
		Update-Display '----Copy/Paste lines below into AutoHotKey script----' -color 'Orange'
		$list = @()
		$list += '#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.'
		$list += '#Warn  ; Recommended for catching common errors.'
		$list += 'SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.'
		$list += 'SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.'
		$list += 'SetTitleMatchMode 3'
		$list += 'SetTitleMatchMode, Fast'
		$list += ''
		foreach ($l in $lines)
		{
			$list += 'Run ' + $($l.FullName)
			$list += 'WinWaitActive, EverQuest'
			#$list += 'WinSetTitle, ' + $($l.Name)
			$list += ''
		}
		Update-Display $list
		Update-Display '----Copy/Paste lines above into AutoHotKey script----' -color 'Orange'
	}
	else
	{
		Update-Display "Shortcuts folder is empty or not found.  Please create EQ shortcuts and try again." -color 'Yellow'
	}
	
	buttonup
}

$buttonBuildMQ2AutoLogin_Click = {
	buttondown
	if ($FirstRun -eq $false)
	{
		$richtextbox1.Clear()
	}
	$toons = Import-Csv -Path $toonsFile.Text #Toons CSV location
	$ini = @()
	foreach ($toon in $toons)
	{
		if ($toon.Login -ne '')
		{
			$ini += [pscustomobject]@{
				Login = '[' + $toon.Login.Trim() + ']'
				Password = 'Password=' + 'MYPASSWORD'
				Server = 'Server=' + $toon.Server.Trim()
				Character = 'Character=' + $toon.Character.Trim()
				EQPath = 'EQPath=' + $toon.EQPath.Trim()
			}
		}
	}
	Clear-Host
	Update-Display 'Note: This is only an example - these settings can be customized to your liking.  Make sure you link your game accounts on http://www.projecteq.net.' -color 'Yellow'
	Update-Display '----Copy/Paste lines below into MQ2AutoLogon.ini.  Make sure to set your password.----' -color 'Orange'
	Update-Display '[Settings]'
	Update-Display 'UseStationNamesInsteadOfSessions=1'
	Update-Display 'KickActiveCharacter=1'
	Update-Display 'KickActiveTrader=1'
	Update-Display 'Debug=0'
	Update-Display 'UseAuth=0'
	Update-Display 'UseMQ2Login=0'
	Update-Display '[Servers]'
	Update-Display "$($toon.Server.Trim())=[PEQ] The Grand Creation - Omens of War"
	Update-Display ''
	$list2 = @()
	$list2 += ''
	foreach ($i in $ini)
	{
		$list2 += $i.Login
		$list2 += $i.Password
		$list2 += $i.Server
		$list2 += $i.Character
		$list2 += $i.EQPath
		$list2 += ''
	}
	Update-Display $list2
	Update-Display '----Copy/Paste lines above into MQ2AutoLogon.ini----' -color 'Orange'
	
	buttonup
}

$buttonBuildSampleTOONSCSV_Click = {
	buttondown
	if ($FirstRun -eq $false)
	{
		$richtextbox1.Clear()
	}
	$nums = 1 .. 12
	$ini = @()
	foreach ($n in $nums)
	{
		$n
		if ($n -eq 7) #Adds a blank line
		{
			$ini += [pscustomobject]@{
				Login	  = ''
				Server    = ''
				Character = ''
				EQPath    = ''
			}
		}
		$ini += [pscustomobject]@{
			Login = 'Login' + $n
			Server = 'ProjectEQ'
			Character = 'ToonName' + $n
			EQPath = 'C:\Users\user\Desktop\RoF2\Everquest'
		}
		
	}
	$savefiledialog1.Title = "Save Sample TOONS.CSV"
	#$openfiledialog1.InitialDirectory = $share
	#$openfiledialog1.DefaultExt = "CSV"
	$savefiledialog1.Filter = "CSV (*.csv)|*.CSV|All files (*.*)|*.*"
	$savefiledialog1.FileName = 'Toons-Sample.csv'
	if ($savefiledialog1.ShowDialog() -eq 'OK')
	{
		Update-Display "Exporting to CSV..." -color 'Orange'
		$ini | Export-Csv -path $savefiledialog1.FileName -Delimiter "," -NoTypeInformation
		Update-Display "File saved to:" -color 'Orange'
		Update-Display "File:///$($savefiledialog1.Filename)"
		
	}
	else
	{
		Update-Display 'Operation Cancelled' -color 'Red'
	}
	
	buttonup
	
}

$richtextbox1_LinkClicked = [System.Windows.Forms.LinkClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.LinkClickedEventArgs]
	Start-Process -FilePath $_.LinkText #make links clickable
	
}

$buttonCPUAffinity_Click = {
	buttondown
	$richtextbox1.Clear()
	$EQRunning = get-process -Name eqgame | Select-Object -ExpandProperty MainWindowTitle
	if ($EQRunning -ne $null)
	{
		Update-Display 'Setting CPU affinity for all running Everquest processes...' -color 'Orange'
		Start-Sleep -Seconds 1
		$LogicalProcessors = ((Get-WmiObject -class Win32_processor).NumberOfLogicalProcessors)
		[int32]$ProcAffinity = [math]::pow(2, $LogicalProcessors) - 1 #Forumla for processor affinity: a(n) = 2^n - 1
		$process = GET-PROCESS eqgame
		foreach ($i in $process)
		{
			$i.ProcessorAffinity = $ProcAffinity
			if ($i.ProcessorAffinity -eq $ProcAffinity)
			{
				Update-Display "$($i.MainWindowTitle) set to affinity" -color 'Green'
			}
			else
			{
				Update-Display "$($i.MainWindowTitle) not set to affinity" -color 'Red'
			}
		}
	}
	else
	{
		Update-Display 'Everquest is not running' -color 'Yellow'
	}
	buttonup
}

$buttonKillAllEQ_Click = {
	buttondown
	$richtextbox1.Clear()
	$EQRunning = get-process -Name eqgame | Select-Object -ExpandProperty MainWindowTitle
	if ($EQRunning -ne $null)
	{
		if ((Show-MsgBox -title "Kill all Everquest Processes" -prompt "Are you sure`?" -Icon Exclamation -BoxType YesNo) -eq "Yes")
		{
			Update-Display 'Killing all Everquest processes...' -color 'Orange'
			Start-Sleep -Seconds 1
			taskkill /f /t /im eqgame.exe
		}
		
	}
	else
	{
		Update-Display 'Everquest is not running' -color 'Yellow'
	}
	buttonup
}

$buttonstartMissingToons_Click = {
	buttondown
	$richtextbox1.Clear()
	$EQNotRunningShortcuts = @()
	$list = @()
	$MissingToons = @()
	$EQRunning = get-process -Name eqgame | Select-Object -ExpandProperty MainWindowTitle
	if ($EQRunning -ne $null)
	{
		$Shortcuts = Get-ChildItem -Path $ShortcutsFolder.Text -File
		foreach ($S in $Shortcuts)
		{
			$list += $S.BaseName
		}
		$EQNotRunning = (Compare-Object -ReferenceObject $EQRunning -DifferenceObject $list).InputObject | Sort-Object
		
		foreach ($Shortcut in $Shortcuts)
		{
			if ($EQNotRunning -contains $Shortcut.BaseName)
			{
				Update-Display "$($Shortcut.BaseName) Not Running" -color 'Yellow'
				$EQNotRunningShortcuts += $Shortcut
				
			}
		}
		#Build AutoHotKey
		$AHKTopLines = @"
#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
#Warn  ; Recommended for catching common errors.
SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.

"@
		
		$MissingToons = foreach ($EQNotRunningShortcut in $EQNotRunningShortcuts)
		{
			'Run ' + $EQNotRunningShortcut.FullName
			'WinWaitActive, EverQuest'
			'WinSetTitle, ' + $EQNotRunningShortcut.Name
			''
		}
		if (-not ($EQNotRunningShortcuts))
		{
			Update-Display 'No missing toons found' -color 'Green'
		}
		else
		{
			$AHKTopLines | Out-File $ENV:TEMP\missing.AHK
			$MissingToons | Out-File $ENV:TEMP\missing.AHK -Append
			Start-Sleep -Seconds 2
			Update-Display 'Re-starting missing toons' -color 'Green'
			Start-Process $ENV:TEMP\missing.AHK
		}
		
	}
	elseif ($EQRunning -eq $null)
	{
		Update-Display 'Everquest is not running' -color 'Yellow'
	}
	else
	{
		Update-Display 'No missing toons found' -color 'Green'
	}
	buttonup
}

$buttonBrowseFolder_Click = {
	if ($folderbrowserdialog4.ShowDialog() -eq 'OK')
	{
		$ShortcutsFolder.Text = $folderbrowserdialog4.SelectedPath + '\'
	}
}

$ShortcutsFolder_TextChanged = {
	button-check
	
}

<#
$buttonRemoveAndSaveOkExitS_Click = {
	buttondown
	if ($FirstRun -eq $false)
	{
		$richtextbox1.Clear()
	}
	$currentPWD = Convert-path (get-location)
	Update-Display "Saving PEQConfig.ini to:" -color 'Orange'
	Update-Display "File:///$currentPWD"
	Start-Sleep -Seconds 1
	$ToonsLocation = @{ "ToonsLocation" = "$($toonsFile.Text)" }
	$ShortcutsLocation = @{ "ShortcutsLocation" = "$($ShortcutsFolder.Text)" }
	$EQBCSFileLocation = @{ "EQBCSFileLocation" = "$($EQBCSFile.Text)" }
	$PollTime = @{ "PollTime" = "$($textbox2.Text)" }
	$NewINIContent = @{ "Paths" = $ToonsLocation + $ShortcutsLocation + $EQBCSFileLocation; "Settings" = $PollTime }
	Out-IniFile -InputObject $NewINIContent -FilePath ".\PEQConfig.ini" -Force
	buttonup
	
} #>

$aboutToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'About' -color 'Yellow'
	Update-Display "PEQ Configurator is designed to ease pre-configuration when working with multiple toons and accounts. A CSV file is needed along with an install of Everquest, MQ2, and logging enabled for EQBCS2.  All accounts should be pre-created on eqemulator. The CSV creation is a manual step but a sample is supplied to get you started. `n`
PEQ Configurator is provided as-is and without any warranty.  Feel free to modify the code and redistribute as desired.  `n`
Links:`
https://autohotkey.com/download/`
http://www.eqemulator.org/`
http://www.projecteq.net`n`
Zuboo" -color 'Orange'
	
	
}

$buttonEQClientiniReadOnly_Click = {
	buttondown
	$richtextbox1.Clear()
	$file = Get-ItemProperty $combobox1.SelectedItem
	if ($file.IsReadOnly -eq $true)
	{
		Update-Display "Removing read-only attribute from:" -color 'Orange'
		Update-Display "$file"
		Set-ItemProperty $file -name IsReadOnly -value $False
	}
	else
	{
		Update-Display "Setting read-only attribute for:" -color 'Orange'
		Update-Display "$file"
		Set-ItemProperty $file -name IsReadOnly -value $true
	}
	$file = Get-ItemProperty $combobox1.SelectedItem #get item-property and verify
	if ($file.IsReadOnly -eq $true)
	{
		Update-Display "$file is Read-Only" -color 'Yellow'
	}
	else
	{
		Update-Display "$file is not Read-Only" -color 'Green'
	}
	buttonup
	
}

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]$ListView,
		[Parameter(Mandatory = $true)]
		[int]$ColumnIndex,
		[System.Windows.Forms.SortOrder]$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
	
	if ($Clear)
	{
		$ListView.Items.Clear();
	}
	
	$lvGroup = $null
	if ($Group -is [System.Windows.Forms.ListViewGroup])
	{
		$lvGroup = $Group
	}
	elseif ($Group -is [string])
	{
		#$lvGroup = $ListView.Group[$Group] # Case sensitive
		foreach ($groupItem in $ListView.Groups)
		{
			if ($groupItem.Name -eq $Group)
			{
				$lvGroup = $groupItem
				break
			}
		}
		
		if ($null -eq $lvGroup)
		{
			$lvGroup = $ListView.Groups.Add($Group, $Group)
		}
	}
	
	if ($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{
			$listitem = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if ($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if ($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if ($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if ($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	$ListBox.DisplayMember = $DisplayMember
	$ListBox.ValueMember = $ValueMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}
#endregion

$combobox1_Click = {
	$ini = @()
	$eqclientlist = @()
	$richtextbox1.Clear()
	if ($toonsFile.Text)
	{
		$toons = Import-Csv -Path $toonsFile.Text #Toons CSV location
		foreach ($toon in $toons)
		{
			if ($toon.Login -ne '')
			{
				$ini += [pscustomobject]@{
					Login = $toon.Login.Trim()
					Server = $toon.Server.Trim()
					Character = $toon.Character.Trim()
					EQPath = $toon.EQPath.Trim()
				}
			}
		}
		$comboData = $ini.EQPath | Select-Object -Unique
		foreach ($c in $comboData)
		{
			$eqclient = $c + '\eqclient.ini'
			$eqclientlist += $eqclient
			$file = Get-ItemProperty $eqclient
			if ($file.IsReadOnly -eq $true)
			{
				Update-Display "$file is Read-Only" -color 'Yellow'
			}
			else
			{
				Update-Display "$file is not Read-Only" -color 'Green'
			}
		}
		Update-ComboBox -ComboBox $combobox1 -Items $eqclientlist
		If ($combobox1.SelectedText -ne "")
		{
			$buttonEQClientiniReadOnly.Enabled = $true
		}
		else
		{
			$buttonEQClientiniReadOnly.Enabled = $false
		}
	}
	else
	{
		Update-Display "There seems to be a problem accessing toons.csv" -color 'Yellow'
		Update-ComboBox -ComboBox $combobox1 -Items ""
		$buttonEQClientiniReadOnly.Enabled = $false
	}
	
}

$combobox1_SelectedIndexChanged = {
	If ($combobox1.SelectedItem -ne "")
	{
		$buttonEQClientiniReadOnly.Enabled = $true
	}
	else
	{
		$buttonEQClientiniReadOnly.Enabled = $false
	}
	#$tooltip1.InitialDelay = "20" #make tooltip show very fast default is 500ms
	$tooltip1.SetToolTip($combobox1, $combobox1.SelectedItem)
}

$buttonTaskbarGroupingFix_Click = {
	buttondown
	Start-Sleep -Milliseconds 500
	$richtextbox1.Clear()
	if (Test-Path -Path Registry::HKEY_CLASSES_ROOT\Applications\eqgame.exe)
	{
		$RegValue = Get-ItemProperty -path Registry::HKEY_CLASSES_ROOT\Applications\eqgame.exe -Name IsHostApp
		if ($RegValue.IsHostApp -eq "")
		{
			Update-Display "Registry value IsHostApp already set - Aborting Operation." -color 'Yellow'
		}
		else
		{
			Update-Display "Setting registry value IsHostApp to null" -color 'Orange'
			Set-ItemProperty -path Registry::HKEY_CLASSES_ROOT\Applications\eqgame.exe -Name IsHostApp -Value "" -Type String
		}
		
	}
	else
	{
		Update-Display "HKEY_CLASSES_ROOT\Applications\eqgame.exe not found.  Aborting operation." -color 'Yellow'
	}
	buttonup
	
}

$buttonHungKickedProcesses_Click = {
	buttondown
	$richtextbox1.Clear()
	$script:Shortcut = $ShortcutsFolder.Text
	$script:EQBCS = $EQBCSFile.Text
	$Script:hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
	$Script:kickedEQ = get-process -Name eqgame | Where-Object { $_.MainWindowTitle -eq 'EverQuest' }
	if ((Show-HungProcess_psf) -eq 'OK')
	{
		
	}
	buttonup
}

$buttonEQMonitor_Click = {
	buttondown
	$richtextbox1.Clear()
	$EQRunning = get-process -Name eqgame
	Get-Process -Name powershell | Where-Object { $_.MainWindowTitle -eq 'Hung EQ Process Monitor' } | Stop-Process
	if ($EQRunning -ne $null)
	{
		if ($textbox2.Text -match '^[a-z]*$' -or $textbox2.Text -match ' ')
		{
			$textbox2.Clear()
			Update-Display 'Numbers only and no spaces please' -color 'yellow'
		}
		else
		{
			$timeout = $textbox2.Text
			Update-Display "A new window labeled `'Hung EQ Process Monitor`' will open (minimized).  It will check for hung EQ processes every $timeout seconds." -color 'Orange'
			Start-Process powershell -ArgumentList "-WindowStyle Minimized -command  & { 
    `$host.ui.RawUI.WindowTitle = 'Hung EQ Process Monitor'
    do {
        `$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
        `$hungTitles = `$hungEQ.MainWindowTitle
        `$hungTitleSelections = `$hungTitles
        if (`$hungEQ)
        {
            Write-Host 'Timeout 1st attempt: Sleeping $timeout seconds'
            Start-Sleep -Seconds $timeout                       
            `$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
            `$hungTitles = `$hungEQ.MainWindowTitle
            `$hungTitleSelections = `$hungTitles | Out-String
             if (`$hungEQ)
            {   
               	Write-Host 'Timeout 2nd attempt: Sleeping 15 Seconds'
                Start-Sleep -Seconds 15
				`$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
            	`$hungTitles = `$hungEQ.MainWindowTitle
            	`$hungTitleSelections = `$hungTitles | Out-String
                if (`$hungEQ)
                {   
                    write-host `$hungTitleSelections            
                    [System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms') | Out-Null 
                    [System.Windows.Forms.MessageBox]::Show(`$hungTitleSelections , 'Hung EQ Processes' , 'OK', 'Exclamation', 'Button1', 'DefaultDesktopOnly')           
                }
            }
        }
        }
        While (get-process -Name eqgame)
        }"
		}
		
		
	}
	else
	{
		Update-Display 'Everquest is not running' -color 'Yellow'
	}
	
	buttonup
	
}

$buttonFlagCheck_Click = {
	buttondown
	$richtextbox1.Clear()
	$count = ((Get-Content $EQBCSFile.Text | Where-Object { $_ -match 'flag' }) | Select-Object -Unique).count
	$flags = (Get-Content $EQBCSFile.Text | Where-Object { $_ -match 'flag' }) | Select-Object -Unique | Sort-Object
	
	$splittoons = @()
	foreach ($flag in $flags)
	{
		$split = $flag -split '>'
		$splittoons += [PSCustomObject] @{
			Toon = ($split[0] -replace '<', '').Trim()
		}
	}
	
	$reftoons = Get-Process -Name eqgame | Select-Object -ExpandProperty MainWindowTitle
	if ($reftoons)
	{
		$compare = Compare-Object -ReferenceObject ($reftoons.Trim()) -DifferenceObject ($splittoons.Toon) -IncludeEqual
		$missingFlag = $compare | Where-Object { $_.SideIndicator -eq '<=' }
		$gotFlag = $compare | Where-Object { $_.SideIndicator -eq '==' }
		$extraFlag = $compare | Where-Object { $_.SideIndicator -eq '=>' } #toon is likely running on another PC
	}
	Update-Display 'Make sure to turn on EQBCS logging' -color 'Orange'
	Update-Display 'EQBCS2.exe -l EQBCS2Log.txt' -color 'Orange'
	Update-Display '**Always clear EQBCS logs before next set of flags**' -color 'Orange'
	Update-Display ''
	Update-Display "Total Flag Count: $count" -color 'Yellow'
	Update-Display ""
	if ($missingFlag)
	{
		Update-Display '**Toons running on this computer who did not receive a flag**:' -color 'Orange'
		Update-Display $missingFlag.InputObject -color 'Yellow'
		Update-Display ""
	}
	if ($gotFlag)
	{
		Update-Display 'Toons running on this computer who received a flag:' -color 'Orange'
		Update-Display $gotFlag.InputObject -color 'Green'
		Update-Display ""
	}
	If ($extraFlag)
	{
		Update-Display 'Toons NOT running on this computer who received a flag:' -color 'Orange'
		Update-Display $extraFlag.InputObject -color 'Cyan'
		Update-Display ""
	}
	
	Update-Display 'All Flags:' -color 'Orange'
	Update-Display $flags -color 'Green'
	
	
	buttonup
}

$button_outputClear_Click = {
	buttondown
	$richtextbox1.Clear()
	buttonup
	
}

$buttonBrowse2_Click = {
	
	if ($openfiledialog5.ShowDialog() -eq 'OK')
	{
		$EQBCSFile.Text = $openfiledialog5.FileName
	}
}

$flagCheckToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'Flag Check' -color 'Yellow'
	Show-EQBCSHelp
	Update-Display 'Parses EQBCS log file.  Reports all flags and total count.  **Always clear EQBCS log for next set of flags**'
}

$eQCPUAffinityToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'EQ CPU Affinity' -color 'Yellow'
	Update-Display 'Forces all EQ processes to use all cores on your PC.'
}

$buildShortcutsToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'Build Shortcuts...' -color 'Yellow'
	Show-ToonsHelp
	Show-ShortcutsHelp
	Update-Display 'This will build all shortcuts based on toon names defined in the Toons.CSV file.'
	
}

$buildAutoHotKeyScriptToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'Build AutoHotKey Script' -color 'Yellow'
	Show-ToonsHelp
	Show-ShortcutsHelp
	Update-Display 'This will build a pre-configured AutoHotKey script which can be pasted into an .AHK file.'
}

$buildMQ2AutoLoginINIToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'Build MQ2AutoLogin INI' -color 'Yellow'
	Show-ToonsHelp
	Update-Display 'This will build the contents of an MQ2AutoLogon INI file which can be pasted into the file.  Plain text passwords are required for MQAutoLogon.INI.  Please edit the file and manually enter these.'
	
}

$buildSampleToonsCSVToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'Build Sample Toons CSV...' -color 'Yellow'
	Update-Display 'A sample Toons.CSV to get you started.  This is required to take full advantage of all of the features within PEQ Configurator.  Once you start adding more toons, a spreadsheet of some kind will make life much easier.  More columns can be added without affecting PEQ Configurator - Just make sure the base columns are always present.'
	
}

$eQClinitiniReadOnlyToggleToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'EQ Client.ini ReadOnly Toggle' -color 'Yellow'
	Show-ToonsHelp
	Update-Display 'The dropdown will report back the Read-Only status of EQClient.ini and the button will toggle it on/off.'
	
}

$taskBarGroupingFixToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'TaskBar Grouping Fix' -color 'Yellow'
	Update-Display 'You must be an administrator to use this feature.  Sets registry value to allow EQ Windows to be moved around independently on the taskbar.'
	
}

$EQBCSFile_TextChanged = {
	button-check
	
}

$firstRunTextToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'First Run Text' -color 'Yellow'
	Update-Display 'This looks like your first time running PEQ Config.  Please do the following:' -color 'Orange'
	Update-Display '1. Create a Toons.Csv File.  Use the Build Sample Toons.Csv to get started'
	Update-Display '2. Fill out the locations where each file/path lives and edit your seconds'
	Update-Display '3. Click Save Locations and Poll Time'
	Update-Display '4. Click Build Shortcuts to create all shortcuts from Toons.Csv'
	Update-Display '5. Click Build AutoHotKey Script and paste into .AHK file'
	Update-Display '6. Click Build MQ2AutoLogin INI and paste into MQ2AutoLogin.ini'
	Update-Display '7. Make sure to Enable EQBCS Logging --> EQBCS2.exe -l EQBCS2Log.txt'
	Update-Display ''
	
}

$toonsFile_Click = {
	$toonsFile.SelectAll()
	
}

$ShortcutsFolder_Click = {
	$ShortcutsFolder.SelectAll()
	
}

$EQBCSFile_Click = {
	$EQBCSFile.SelectAll()
	
}

$Mainform_FormClosing = [System.Windows.Forms.FormClosingEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.FormClosingEventArgs]
	$currentPWD = Convert-path (get-location)
	#Update-Display "Saving PEQConfig.ini to:" -color 'Orange'
	#Update-Display "File:///$currentPWD"
	
	$ToonsLocation = @{ "ToonsLocation" = "$($toonsFile.Text)" }
	$ShortcutsLocation = @{ "ShortcutsLocation" = "$($ShortcutsFolder.Text)" }
	$EQBCSFileLocation = @{ "EQBCSFileLocation" = "$($EQBCSFile.Text)" }
	$HungPollTime = @{ "HungPollTime" = "$($textbox2.Text)" }
	$DisconnectedPollTime = @{ "DisconnectedPollTime" = "$($textbox1.Text)" }
	$AutoStart = @{ "AutoStart" = $checkboxAutoStart.CheckState }
	$DisplayPopup = @{ "DisplayPopup" = $checkboxDisplayPopup.CheckState }
	$MakeASound = @{ "MakeASound" = $checkboxMakeASound.CheckState }
	
	$NewINIContent = @{ "Paths" = $ToonsLocation + $ShortcutsLocation + $EQBCSFileLocation; "Settings" = $DisconnectedPollTime + $HungPollTime + $AutoStart + $DisplayPopup + $MakeASound }
	Out-IniFile -InputObject $NewINIContent -FilePath ".\PEQConfig.ini" -Force
}

$buttonNewEQMonitor_Click = {
	buttondown
	$richtextbox1.Clear()
	$EQRunning = get-process -Name eqgame
	Get-Process -Name powershell | Where-Object { $_.MainWindowTitle -eq 'Hung EQ Process Monitor' } | Stop-Process
	if ($EQRunning -ne $null)
	{
		if ($textbox2.Text -match '^[a-z]*$' -or $textbox2.Text -match ' ')
		{
			$textbox2.Clear()
			Update-Display 'Numbers only and no spaces please' -color 'yellow'
		}
		else
		{
			$timeout = $textbox2.Text
			Update-Display "A new window labeled `'Hung EQ Process Monitor`' will open (minimized).  It will check for hung EQ processes every $timeout seconds." -color 'Orange'
			Start-Process powershell -ArgumentList "-WindowStyle Minimized -command  & { 
    `$host.ui.RawUI.WindowTitle = 'Hung EQ Process Monitor'
    do {
        `$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
        `$hungTitles = `$hungEQ.MainWindowTitle
        `$hungTitleSelections = `$hungTitles
        if (`$hungEQ)
        {
            Write-Host 'Timeout 1st attempt: Sleeping $timeout seconds'
            Start-Sleep -Seconds $timeout                       
            `$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
            `$hungTitles = `$hungEQ.MainWindowTitle
            `$hungTitleSelections = `$hungTitles | Out-String
             if (`$hungEQ)
            {   
               	Write-Host 'Timeout 2nd attempt: Sleeping 15 Seconds'
                Start-Sleep -Seconds 15
				`$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
            	`$hungTitles = `$hungEQ.MainWindowTitle
            	`$hungTitleSelections = `$hungTitles | Out-String
                if (`$hungEQ)
                {   
                    write-host `$hungTitleSelections            
                    [System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms') | Out-Null 
                    [System.Windows.Forms.MessageBox]::Show(`$hungTitleSelections , 'Hung EQ Processes' , 'OK', 'Exclamation', 'Button1', 'DefaultDesktopOnly')           
                }
            }
        }
        }
        While (get-process -Name eqgame)
        }"
		}
		
		
	}
	else
	{
		Update-Display 'Everquest is not running' -color 'Yellow'
	}
	
	buttonup
	
	
}

$buttonStartJob_Click = {
	$buttonStartJob.Enabled = $false
	$richtextbox1.Clear()
	$timeout = $textbox2.Text
	#Create a New Job using the Job Tracker
	$paramAddJobTracker = @{
		Name	  = 'EQMonitor'
		JobScript = {
			#--------------------------------------------------
			#TODO: Set a script block
			#Important: Do not access form controls from this script block.			
			Param ($TimeOutArgument) #Pass any arguments using the ArgumentList parameter			
			#for ($i = 0; $i -lt 50; $i++) { Start-Sleep -Milliseconds 100 }
			$FirstTimeout = $TimeOutArgument * (2/3)
			$SecondTimeout = $TimeOutArgument * (1/3)
			$EQRunning = get-process -Name eqgame
			do
			{
				$hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
				$hungTitles = $hungEQ.MainWindowTitle
				#$hungTitleSelections = $hungTitles
				if ($hungEQ)
				{
					#Write-Host "Timeout 1st attempt: Sleeping  2/3 of $TimeOutArgument seconds"
					Start-Sleep -Seconds $FirstTimeout
					$hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
					$hungTitles = $hungEQ.MainWindowTitle
					#$hungTitleSelections = $hungTitles | Out-String
					if ($hungEQ)
					{
						#Write-Host 'Timeout 2nd attempt: Sleeping 1/3 of $TimeOutArgument seconds'
						Start-Sleep -Seconds $SecondTimeout
						$hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
						#$hungTitles = $hungEQ.MainWindowTitle
						$hungTitles = $hungEQ | Select-Object @{ N = 'Title'; E = { $_.MainWindowTitle } }, Id, @{ N = 'Status'; E = { 'Hung' } }
						#$hungTitleSelections = $hungTitles | Out-String
						if ($hungEQ)
						{
							Write-Output $hungTitles
							#[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms') | Out-Null
							#[System.Windows.Forms.MessageBox]::Show($hungTitleSelections, 'Hung EQ Processes', 'OK', 'Exclamation', 'Button1', 'DefaultDesktopOnly')
						}
					}
				}
			}
			While (get-process -Name PEQConfig)
			Start-Sleep -Milliseconds 100
			#--------------------------------------------------
		}
		ArgumentList = $timeout
		CompletedScript = {
			Param ([System.Management.Automation.Job]$Job)
			#$results = Receive-Job -Job $Job 
			#Enable the Button
			$buttonStartJob.ImageIndex = -1
			$buttonStartJob.Enabled = $true
			
		}
		UpdateScript = {
			Param ([System.Management.Automation.Job]$Job)
			#-------------------------------------------------
			#Get partial Results here			
			$results = Receive-Job -Job $Job #-Keep			
			if ($listview1.Items.Count -eq 0)
			{
				foreach ($h in $results)
				{
					Add-ListViewItem -ListView $listview1 -Items $h.ID -SubItems $h.Title, $h.Status
				}
				$a++
				if ($a -eq 1) #Trigger only once per group of hung processes
				{
					Make-Sound
					Show-Popup					
				}
			}
			else
			{
				$ListboxIDs = @()
				foreach ($l in $listview1.Items | Where-Object { $_.SubItems[2].Text -match 'Hung' }) #Will only search hung items
				{
					$ListboxIDs += $l.text
				}
				foreach ($r in $results)
				{
					if ($ListboxIDs -contains $r.ID)
					{
						#Update-Display "Listbox matches $($r.ID)"
					}
					else
					{
						#Update-Display 'Adding to ListView'
						Add-ListViewItem -ListView $listview1 -Items $r.ID -SubItems $r.Title, $r.Status
						$a++
						if ($a -eq 1) #Trigger only once per group of hung processes
						{
							Make-Sound
							Show-Popup							
						}
						
					}
					
				}
			}
			$listViewItems = $listview1.Items | Where-Object {$_.SubItems[2].Text -match 'Disconnected'}
			foreach ($l in $ListboxIDs) #Verify Processes are still hung
			{
				if (get-process -id $l | Where-Object { $_.Responding -eq $true })
				{
					Update-Display "Process $l is no longer hung" -color 'Orange'
					$ListView1.Items.Clear() ##<--This does work.  $listview1.Clear() does not work					
					$NowRunning = $true
				}
			}
			if ($NowRunning) #Repop listview
			{
				$hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
				$hungTitles = $hungEQ | Select-Object @{ N = 'Title'; E = { $_.MainWindowTitle } }, Id, @{ N = 'Status'; E = { 'Hung' } }
				foreach ($h in $hungTitles)
				{
					Add-ListViewItem -ListView $listview1 -Items $h.ID -SubItems $h.Title, $h.Status
				}
				foreach ($LvItem in $listViewItems) #add Disconnected items back to list
				{
					Add-ListViewItem -ListView $listview1 -Items $LvItem.SubItems[0].Text -SubItems $LvItem.SubItems[1].Text, $LvItem.SubItems[2].Text					
				}
				$NowRunning = $false
			}
			
			#-------------------------------------------------
			#Animate the Button
			if ($null -ne $buttonStartJob.ImageList)
			{
				if ($buttonStartJob.ImageIndex -lt $buttonStartJob.ImageList.Images.Count - 1)
				{
					$buttonStartJob.ImageIndex += 1
				}
				else
				{
					$buttonStartJob.ImageIndex = 0
				}
			}
		}
	}
	
	Add-JobTracker @paramAddJobTracker
}

$jobTracker_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
	#Stop any pending jobs
	Stop-JobTracker
}
#Append the event to the form
#$MainForm.add_FormClosed($jobTracker_FormClosed) #Why is there here?

$timerJobTracker_Tick = {
	Update-JobTracker
}

#region Job Tracker
$JobTrackerList = New-Object System.Collections.ArrayList
function Add-JobTracker
{
	<#
		.SYNOPSIS
			Add a new job to the JobTracker and starts the timer.
	
		.DESCRIPTION
			Add a new job to the JobTracker and starts the timer.
	
		.PARAMETER  Name
			The name to assign to the job.
	
		.PARAMETER  JobScript
			The script block that the job will be performing.
			Important: Do not access form controls from this script block.
	
		.PARAMETER ArgumentList
			The arguments to pass to the job.
		.PARAMETER  CompletedScript
			The script block that will be called when the job is complete.
			The job is passed as an argument. The Job argument is null when the job fails.
	
		.PARAMETER  UpdateScript
			The script block that will be called each time the timer ticks.
			The job is passed as an argument. Use this to get the Job's progress.
	
		.EXAMPLE
			Add-JobTracker -Name 'JobName' `
			-JobScript {	
				Param($Argument1)#Pass any arguments using the ArgumentList parameter
				#Important: Do not access form controls from this script block.
				Get-WmiObject Win32_Process -Namespace "root\CIMV2"
			}`
			-CompletedScript {
				Param($Job)		
				$results = Receive-Job -Job $Job
			}`
			-UpdateScript {
				Param($Job)
				#$results = Receive-Job -Job $Job -Keep
			}
	
		.LINK
			
	#>
	
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[string]$Name,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[ScriptBlock]$JobScript,
		$ArgumentList = $null,
		[ScriptBlock]$CompletedScript,
		[ScriptBlock]$UpdateScript)
	
	#Start the Job
	$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
	
	if ($null -ne $job)
	{
		#Create a Custom Object to keep track of the Job & Script Blocks
		$members = @{
			'Job'		     = $Job;
			'CompleteScript' = $CompletedScript;
			'UpdateScript'   = $UpdateScript
		}
		
		$psObject = New-Object System.Management.Automation.PSObject -Property $members
		
		[void]$JobTrackerList.Add($psObject)
		
		#Start the Timer
		if (-not $timerJobTracker.Enabled)
		{
			$timerJobTracker.Start()
		}
	}
	elseif ($null -ne $CompletedScript)
	{
		#Failed
		Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
	}
	
}

function Update-JobTracker
{
	<#
		.SYNOPSIS
			Checks the status of each job on the list.
	#>
	
	#Poll the jobs for status updates
	$timerJobTracker.Stop() #Freeze the Timer
	
	for ($index = 0; $index -lt $JobTrackerList.Count; $index++)
	{
		$psObject = $JobTrackerList[$index]
		
		if ($null -ne $psObject)
		{
			if ($null -ne $psObject.Job)
			{
				if ($psObject.Job.State -eq 'Blocked')
				{
					#Try to unblock the job
					Receive-Job $psObject.Job | Out-Null
				}
				elseif ($psObject.Job.State -ne 'Running')
				{
					#Call the Complete Script Block
					if ($null -ne $psObject.CompleteScript)
					{
						#$results = Receive-Job -Job $psObject.Job
						Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
					}
					
					$JobTrackerList.RemoveAt($index)
					Remove-Job -Job $psObject.Job
					$index-- #Step back so we don't skip a job
				}
				elseif ($null -ne $psObject.UpdateScript)
				{
					#Call the Update Script Block
					Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
				}
			}
		}
		else
		{
			$JobTrackerList.RemoveAt($index)
			$index-- #Step back so we don't skip a job
		}
	}
	
	if ($JobTrackerList.Count -gt 0)
	{
		$timerJobTracker.Start() #Resume the timer
	}
}

function Stop-JobTracker
{
	<#
		.SYNOPSIS
			Stops and removes all Jobs from the list.
	#>
	#Stop the timer
	$timerJobTracker.Stop()
	
	#Remove all the jobs
	while ($JobTrackerList.Count -gt 0)
	{
		$job = $JobTrackerList[0].Job
		$JobTrackerList.RemoveAt(0)
		Stop-Job $job
		Remove-Job $job
	}
}
#endregion

$buttonStartJob2_Click = {
	
	$buttonStartJob2.Enabled = $false
	$EQBCSFile = $EQBCSFile.Text
	$ShortcutsFolder = $ShortcutsFolder.Text
	$DCtimeout = $textbox1.Text
	#Create a New Job using the Job Tracker
	$paramAddJobTracker = @{
		Name	  = 'EQMonitor2'
		JobScript = {
			#--------------------------------------------------
			#TODO: Set a script block
			#Important: Do not access form controls from this script block.
			
			Param ($EQBCSFileArg,
				$ShortcutsFolderArg,
				$DCtimeoutArg) #Pass any arguments using the ArgumentList parameter			
			#for ($i = 0; $i -lt 50; $i++) { Start-Sleep -Milliseconds 100 }
			#Watches EQBCS log file for disconnected users and reports them
			$alltoons = @()
			$restarttoons = @()
			$HasLeft = @()
			$HasLeftToons = @()
			$count = 0
			$Shortcuts = Get-ChildItem -Path $ShortcutsFolderArg -File
			foreach ($S in $Shortcuts)
			{
				$alltoons += $S.BaseName
			}
			
			$alltoons = $alltoons | Sort-Object
			
			#Read log file
			Do
			{
				#Write-Host "pass $count"
				$restarttoons = @()
				$HasLeft = @()
				$HasLeftToons = @()
				$line = @()
				$t = @()
				$h = @()
				$s = @()
				$content = Get-Content $EQBCSFileArg #Read logfile contents
				$a = 1
				$ArrayForEach = @(foreach ($line in $content) #Add Line numbers
					{
						"$a `t" + $line
						$a++
					})
				
				if ($ArrayForEach.count -lt $LastLineNumber)
				{
					#Write-Warning 'EQBCS has been likely been restarted'
					#Write-Host 'Resetting line count' -ForegroundColor Yellow
					$count = 0
				}
				if ($count -eq 0) #first pass - get last line - Skips any previous log information
				{
					$LastOne = ($ArrayForEach | Select-Object -Last 1)
					$LastLineNumber = ($ArrayForEach | Where-Object { $_ -eq $LastOne }).Split("`t")[0]
					#Write-Host "Beginning on Line $($ArrayForEach.Count) - Should only see this once" -ForegroundColor Cyan
				}
				else
				{
					#write-host "Line count $($ArrayForEach.Count)" -ForegroundColor Cyan
				}
				
				Try #gets any new lines after $lastmatch #Select-String is buggy
				{
					#$ArrayForEach = $ArrayForEach | Select-String $lastmatch -Context 0, 1000000 | ForEach-Object { $_.Context.PostContext }
					#Write-Host 'Select String'
					$ArrayCount = 1
					$NewArrayForEach = @(foreach ($array in $ArrayForEach)
						{
							if ($ArrayCount -gt $LastLineNumber) #if ($a -ge $($ArrayForEach.Count))
							{
								$Array
							}
							$ArrayCount++
						})
				}
				catch
				{
					Write-Warning 'Error $arrayForEach'
				}
								
				#region CheckHasLeft
				$HasLeft = @(foreach ($line in $NewArrayForEach)
					{
						if ($line -match 'has left the server.')
						{
							$line
						}
					})
				
				#Get has left toons
				$HasLeftToons = @(foreach ($t in $HasLeft)
					{
						
						$t.split(' ')[2]
						
					})
				
				$HasLeftToons = $HasLeftToons | Select-Object -Unique
				#$HasLeftToons
				#endregion CheckHasLeft
				
				#region ReportKickedToons
				if ($HasLeftToons.count -ge 1)
				{
					foreach ($h in $HasLeftToons)
					{
						#Write-Warning 'Kicked toons detected:'
						<#
						foreach ($s in $Shortcuts)
						{
							if ($s.BaseName -match $h)
							{
								Write-Output "$($s.BaseName)"								
							}
						}
						#>
						$DisconnectedEQ = get-process -Name eqgame | Where-Object { $_.MainWindowTitle -eq $h }
						$DisconnectedTitles = $DisconnectedEQ | Select-Object @{ N = 'Title'; E = { $_.MainWindowTitle } }, Id, @{ N = 'Status'; E = { 'Disconnected' } }
						Write-Output $DisconnectedTitles
					}
				}
				else
				{
					#write-host 'No disconnected toons detected' -ForegroundColor Green
				}
				#endregion ReportKickedToons
				
				
				if ($NewArrayForEach -ne $null) #Update $lastmatch if $arrayforeach contains new data
				{
					#$lastmatch = ($ArrayForEach | Select-Object -Last 1)
					$LastOne = ($NewArrayForEach | Select-Object -Last 1)
					$LastLineNumber = ($NewArrayForEach | Where-Object { $_ -eq $LastOne }).Split("`t")[0]
					
				}
				#Write-Host "Last line: $LastOne"
				#Write-Host ''
				Start-Sleep -Seconds $DCtimeoutArg
				$count++
			}
			While (get-process -Name PEQConfig)
			#--------------------------------------------------
		}
		ArgumentList = $EQBCSFile, $ShortcutsFolder, $DCtimeout
		CompletedScript = {
			Param ([System.Management.Automation.Job]$Job)
			#$results = Receive-Job -Job $Job 
			#Enable the Button
			$buttonStartJob2.ImageIndex = -1
			$buttonStartJob2.Enabled = $true
		}
		UpdateScript = {
			Param ([System.Management.Automation.Job]$Job)
			#-------------------------------------------------
			#Get partial Results here
			$results = Receive-Job -Job $Job #-Keep
			if ($listview1.Items.Count -eq 0)
			{
				foreach ($h in $results)
				{
					Add-ListViewItem -ListView $listview1 -Items $h.ID -SubItems $h.Title, $h.Status
					$a++
					if ($a -eq 1) #Trigger only once per group of hung processes
					{
						Make-Sound
						Show-Popup						
					}
				}
			}
			else
			{
				$ListboxIDs = @()
				foreach ($l in $listview1.Items)
				{
					$ListboxIDs += $l.text
				}
				foreach ($r in $results)
				{
					if ($ListboxIDs -contains $r.ID)
					{
						#Update-Display "Listbox matches $($r.ID)"
					}
					else
					{
						#Update-Display 'Adding to ListView'
						Add-ListViewItem -ListView $listview1 -Items $r.ID -SubItems $r.Title, $r.Status
						$a++
						if ($a -eq 1) #Trigger only once per group of hung processes
						{
							Make-Sound
							Show-Popup							
						}
					}
				}
			}
			
			<#
			foreach ($l in $ListboxIDs) #Verify Processes are still hung
			{
				if (get-process -id $l | Where-Object { $_.Responding -eq $true })
				{
					Update-Display "Process $l is no longer hung" -color 'yellow'
					$ListView1.Items.Clear() ##<--This does work.  $listview1.Clear() does not work					
					$NowRunning = $true
				}
			}
			if ($NowRunning) #Repop listview
			{
				$hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
				$hungTitles = $hungEQ | Select-Object @{ N = 'Title'; E = { $_.MainWindowTitle } }, Id, @{ N = 'Status'; E = { 'Hung' } }
				foreach ($h in $hungTitles)
				{
					Add-ListViewItem -ListView $listview1 -Items $h.ID -SubItems $h.Title, $h.Status
				}
				$NowRunning = $false
			}#>
			#-------------------------------------------------
			#Animate the Button
			if ($null -ne $buttonStartJob2.ImageList)
			{
				if ($buttonStartJob2.ImageIndex -lt $buttonStartJob2.ImageList.Images.Count - 1)
				{
					$buttonStartJob2.ImageIndex += 1
				}
				else
				{
					$buttonStartJob2.ImageIndex = 0
				}
			}
		}
	}
	
	Add-JobTracker @paramAddJobTracker
}

$buttonStop_Click = {
	buttondown
	Stop-JobTracker
	#$results = Receive-Job -Job $Job 
	#Enable the Button
	$buttonStartJob.ImageIndex = -1
	$buttonStartJob.Enabled = $true
	$buttonStartJob2.ImageIndex = -1
	$buttonStartJob2.Enabled = $true
	buttonup
	
}


$buttonKillAndRestartAll_Click={
	buttondown
	if ((Show-MsgBox -Prompt 'Are you sure?' -Title 'Kill All' -icon Exclamation -BoxType YesNo) -eq 'Yes')
	{
		#region Get-RestartList
		$RestartAll = @()
		$RestartTitles = $listview1.Items
		foreach ($l in $RestartTitles)
		{
			$RestartAll += $l.SubItems[1].Text
		}
		#endregion Get-RestartList
		#region Kill-Process
		foreach ($l in $listview1.Items)
		{
			Update-Display 'Killing all hung/disconnected processes' -color 'Yellow'
			Get-Process -id $l.Text | Stop-Process
			$l.Remove()
			Start-Sleep -Milliseconds 350
		}
		#endregion Kill-Process
		#region Restart-Items
		$Shortcuts = Get-ChildItem -Path $ShortcutsFolder.Text -File
		foreach ($s in $Shortcuts)
		{	
			foreach ($r in $RestartAll)
			{
				if ($r -match $s.BaseName)
				{
					Invoke-Item $s.FullName
					Start-Sleep -Seconds 5
				}
			}
		}
		#endregion Restart-Items
		
	}
	buttonup
	
}

$buttonKillAndRestartSelect_Click= {
	if ((Show-MsgBox -Prompt 'Are you sure?' -Title 'Kill Selected' -icon Exclamation -BoxType YesNo) -eq 'Yes')
	{
		#region Get-RestartList
		$RestartAll = @()
		$RestartTitles = $listview1.SelectedItems
		foreach ($l in $RestartTitles)
		{
			$RestartAll += $l.SubItems[1].Text
		}
		#endregion Get-RestartList
		#region Kill-Process
		foreach ($l in $listview1.SelectedItems)
		{
			Update-Display "Killing selected process $($l.Text)" -color 'Yellow'
			Get-Process -id $l.Text | Stop-Process
			$l.Remove()
			Start-Sleep -Milliseconds 350
		}
		#endregion Kill-Process
		#region Restart-Items
		$Shortcuts = Get-ChildItem -Path $ShortcutsFolder.Text -File
		foreach ($s in $Shortcuts)
		{
			foreach ($r in $RestartAll)
			{
				if ($r -match $s.BaseName)
				{
					Invoke-Item $s.FullName
					Start-Sleep -Seconds 5
				}
			}
		}
		#endregion Restart-Items
	}
}

$button1_Click={
	$ListView1.Items.Clear()
	
}


$buttonClearEQBCS_Click={
	buttondown
	if (Test-Path (Join-Path $(Split-Path $EQBCSFile.Text) eqbcs2.exe) -PathType Leaf)
	{
		#$EQBCSLeaf = (Split-Path C:\users\elation\Desktop\RoF2\E3_RoF2\EQBCS2Log.txt -Leaf)
		#$EQBCSNewLog = (Join-Path $(Split-Path C:\users\elation\Desktop\RoF2\E3_RoF2\EQBCS2Log.txt) eqbcs2.exe) + ' -l ' + $EQBCSLeaf
		'Log cleared' | Out-File $EQBCSFile.Text -Encoding ascii -Force
	}
	buttonup
	
}

$restartMissingToonslegacyToolStripMenuItem_Click={
	$richtextbox1.Clear()
	Update-Display 'Restart Missing Toons' -color 'Yellow'
	Show-ShortcutsHelp
	Update-Display 'If a toon is missing, this will search your shortcuts folder, compare it to those running, and restart the missing toon.'
	
	
}

$eQMonitorlegacyToolStripMenuItem_Click={
	$richtextbox1.Clear()
	Update-Display 'EQ Process Monitor' -color 'Yellow'
	Update-Display 'Opens a separate, minimized PowerShell window that polls EQGame.exe every 30 seconds or specified custom time.  If an EQ process hangs, a popup will report it with the toon(s) that hung.  Lag, zoning, and other anomalies can cause false positives.  The window will close when all EQ processes are ended.'
	
	
}

$checkForHungKickedProcesseslegacyToolStripMenuItem_Click={
	$richtextbox1.Clear()
	Update-Display 'Check for Hung/Kicked Processes...' -color 'Yellow'
	Show-ShortcutsHelp
	Show-EQBCSHelp
	Update-Display 'Checks for hung or kicked EQ sessions and allows you to kill those processes.'
	Update-Display 'Checks if a character was kicked out of the game and MQ2 quit.  This usually results in the process name reverting back to EverQuest instead of the toon name.'
	Update-Display 'Allows you to manually check for toons that have been kicked to login, character select.  This requires an in-game /bcaa //bc <UniqueWord> to be used first.'
	
}

$eQMonitorToolStripMenuItem_Click={
	Update-Display 'Check for Hung/Disconnected EQ Processes...' -color 'Yellow'
	Show-ShortcutsHelp
	Show-EQBCSHelp
	Update-Display 'Checks for hung or disconnected EQ sessions and allows you to kill and restart them.  Timeouts can be customized.  The stop button stops both monitors.  Autostart will start both monitors on start of program.  Display Popup will show a popup for hung or disconnected toons.  Make a sound will play a sound for each hang or disconnect.  Kill and restart will kill any EQ process listed in the list view - either all or selected depending on which button is used.'	
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>
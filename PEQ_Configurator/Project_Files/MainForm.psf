<File version="3.1">
  <FileID>6ccc0928-8b6b-4294-9e75-bca1c17bd3eb</FileID>
  <Preview>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</Preview>
  <Form>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</Form>
  <Code><![CDATA[$MainForm_Load = {
	#Disable buttons
	$buttonBuildShortcuts.Enabled = $false
	$buttonBuildAutoHotKey.Enabled = $false
	$buttonBuildMQ2AutoLogin.Enabled = $false
	$buttonstartMissingToons.Enabled = $false
	$buttonEQClientiniReadOnly.Enabled = $false
	$buttonFlagCheck.Enabled = $false
	$buttonStartJob2.Enabled = $false
	if (Test-Path ".\PEQConfig.ini") #Get data from INI
	{
		$Script:FirstRun = $false
		$INIcontent = Get-IniContent -filePath .\PEQConfig.ini
		$toonsFile.Text = $INIcontent.Paths.ToonsLocation
		$ShortcutsFolder.Text = $INIcontent.Paths.ShortcutsLocation
		$EQBCSFile.Text = $INIcontent.Paths.EQBCSFileLocation
		If ($INIcontent.Settings.AutoStart -eq 'Checked')
		{
			$checkboxAutoStart.Checked = $true
		}
		If ($INIcontent.Settings.DisplayPopup -eq 'Checked')
		{
			$checkboxDisplayPopup.Checked = $true
		}
		If ($INIcontent.Settings.MakeASound -eq 'Checked')
		{
			$checkboxMakeASound.Checked = $true
		}
		if ($INIcontent.Settings.HungPolltime)
		{
			$textbox2.Text = $INIcontent.Settings.HungPollTime
		}
		if ($INIcontent.Settings.DisconnectedPolltime)
		{
			$textbox1.Text = $INIcontent.Settings.DisconnectedPollTime
		}
		if ($toonsFile.Text -eq '' -or $ShortcutsFolder.Text -eq '' -or $EQBCSFile.Text -eq '')
		{
			$tabcontrol1.SelectedTab = $tabpage3
			Update-Display 'For best results, please fill out all 3 sections' -color 'Yellow'
		}
		
	}
	else
	{
		$tabcontrol1.SelectedTab = $tabpage3
		$Script:FirstRun = $true
		Update-Display 'This looks like your first time running PEQ Config.  Please do the following:' -color 'Orange'
		Update-Display '1. Create a Toons.Csv File.  Use the Build Sample Toons.Csv to get started'
		Update-Display '2. Fill out the locations where each file/path lives and edit your seconds'
		Update-Display '3. Click Save Locations and Poll Time'
		Update-Display '4. Click Build Shortcuts to create all shortcuts from Toons.Csv'
		Update-Display '5. Click Build AutoHotKey Script and paste into .AHK file'
		Update-Display '6. Click Build MQ2AutoLogin INI and paste into MQ2AutoLogin.ini'
		Update-Display '7. Make sure to Enable EQBCS Logging --> EQBCS2.exe -l EQBCS2Log.txt'
		Update-Display ''
		$FirstRun = @{ "FirstRun" = "$($true)" }
		$NewINIContent = @{ "Settings" = $FirstRun }
		Out-IniFile -InputObject $NewINIContent -FilePath ".\PEQConfig.ini" -Force
	}
	$cores = Get-WmiObject -class Win32_processor | Select-Object systemname, Name, DeviceID, NumberOfCores, NumberOfLogicalProcessors
	$labelCPU.Text = "CPU: $($cores.Name)"
	$labelCores.Text = "Cores: $($cores.NumberOfCores)"
	$labelLogicalProcessors.Text = "Logical Processors: $($cores.NumberOfLogicalProcessors)"
	#$labelRunningEQInstances.Text = "Running EQ Processes:  $($RunningEQTitles.Count)"
	#$((get-process -Name eqgame).count)
	if ($checkboxAutoStart.Checked)
	{
		$buttonStartJob.PerformClick()
		$buttonStartJob2.PerformClick()
	}
	
}

$buttonBrowse_Click = {
	$openfiledialog1.Title = "Open Toons.CSV"
	#$openfiledialog1.InitialDirectory = $share
	#$openfiledialog1.DefaultExt = "CSV"
	$openfiledialog1.Filter = "CSV (*.csv)|*.CSV|All files (*.*)|*.*"
	if ($openfiledialog1.ShowDialog() -eq 'OK')
	{
		
		$toonsFile.Text = $openfiledialog1.FileName
		
	}
}

$toonsFile_TextChanged = {
	button-check
}

$buttonBuildShortcuts_Click = {
	buttondown
	if ($FirstRun -eq $false)
	{
		$richtextbox1.Clear()
	}
	$ini = @()
	$toons = Import-Csv -Path $toonsFile.Text #Toons CSV location
	foreach ($toon in $toons)
	{
		if ($toon.Login -ne '')
		{
			$ini += [pscustomobject]@{
				Login = $toon.Login.Trim()
				Server = $toon.Server.Trim()
				Character = $toon.Character.Trim()
				EQPath = $toon.EQPath.Trim()
			}
		}
	}
	
	if (-not ($ShortcutsFolder.Text.EndsWith('\')))
	{
		$ShortcutsFolder.Text = $shortcutsFolder.Text + '\'
	}
	
	Update-Display "Building Shortcuts..." -color 'Orange'
	foreach ($i in $ini)
	{
		$TargetPathExe = $i.EQPath + '\eqgame.exe'
		$Arguments = "patchme /login:$($i.Login)"
		$ShortcutName = $i.Character + '.lnk'
		$WorkingDirectory = $i.EQPath
		#$Description = ''
		
		#$FullLink = $ShortcutsPath + $Shortcut
		$Shell = New-Object -ComObject ("WScript.Shell")
		$ShortCut = $Shell.CreateShortcut($ShortcutsFolder.Text + $ShortcutName)
		$ShortCut.TargetPath = $TargetPathExe #"yourexecutable.exe"
		$ShortCut.Arguments = $Arguments #$Arguments #"-arguementsifrequired"
		$ShortCut.WorkingDirectory = $WorkingDirectory #"c:\your\executable\folder\path";
		#$ShortCut.WindowStyle = 1;
		#$ShortCut.Hotkey = "CTRL+SHIFT+F";
		#$ShortCut.IconLocation = "yourexecutable.exe, 0";
		#$ShortCut.Description = $Description #"Your Custom Shortcut Description";
		$ShortCut.Save()
	}
	Update-Display "Finished Building Shortcuts!" -color 'Green'
	Update-Display "Shortcuts saved to:" -color 'Orange'
	Update-Display "File:///$($ShortcutsFolder.Text)"
	$buttonBuildAutoHotKey.Enabled = $true
	
	buttonup
	
}

$buttonBuildAutoHotKey_Click = {
	buttondown
	if ($FirstRun -eq $false)
	{
		$richtextbox1.Clear()
	}
	$shortcuts = Get-ChildItem -Path $shortcutsFolder.Text -filter "*.lnk" #New shortcuts folder
	$toons = Import-Csv -Path $toonsFile.Text #Toons CSV location
	$ini = @()
	foreach ($toon in $toons)
	{
		if ($toon.Login -ne '')
		{
			$ini += [pscustomobject]@{
				Login = $toon.Login.Trim()
				Server = $toon.Server.Trim()
				Character = $toon.Character.Trim()
				EQPath = $toon.EQPath.Trim()
			}
		}
	}
	$lines = @()
	if ($shortcuts) #only run if $shortcuts contains data
	{
		$richtextbox1.Clear()
		#reorder to match toons spreadsheet order
		foreach ($i in $ini)
		{
			foreach ($s in $shortcuts)
			{
				if ($s.BaseName -eq $i.Character)
				{
					$lines += [PSCustomObject] @{
						FullName = $s.FullName
						Name	 = $s.BaseName
					}
				}
			}
		}
		Clear-Host
		#Build AutoHotKey
		Update-Display 'Note: This is only one example - There are many ways to customize how you start up your army.  Please see the forums more.' -color 'Yellow'
		Update-Display '----Copy/Paste lines below into AutoHotKey script----' -color 'Orange'
		$list = @()
		$list += '#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.'
		$list += '#Warn  ; Recommended for catching common errors.'
		$list += 'SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.'
		$list += 'SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.'
		$list += 'SetTitleMatchMode 3'
		$list += 'SetTitleMatchMode, Fast'
		$list += ''
		foreach ($l in $lines)
		{
			$list += 'Run ' + $($l.FullName)
			$list += 'WinWaitActive, EverQuest'
			#$list += 'WinSetTitle, ' + $($l.Name)
			$list += ''
		}
		Update-Display $list
		Update-Display '----Copy/Paste lines above into AutoHotKey script----' -color 'Orange'
	}
	else
	{
		Update-Display "Shortcuts folder is empty or not found.  Please create EQ shortcuts and try again." -color 'Yellow'
	}
	
	buttonup
}

$buttonBuildMQ2AutoLogin_Click = {
	buttondown
	if ($FirstRun -eq $false)
	{
		$richtextbox1.Clear()
	}
	$toons = Import-Csv -Path $toonsFile.Text #Toons CSV location
	$ini = @()
	foreach ($toon in $toons)
	{
		if ($toon.Login -ne '')
		{
			$ini += [pscustomobject]@{
				Login = '[' + $toon.Login.Trim() + ']'
				Password = 'Password=' + 'MYPASSWORD'
				Server = 'Server=' + $toon.Server.Trim()
				Character = 'Character=' + $toon.Character.Trim()
				EQPath = 'EQPath=' + $toon.EQPath.Trim()
			}
		}
	}
	Clear-Host
	Update-Display 'Note: This is only an example - these settings can be customized to your liking.  Make sure you link your game accounts on http://www.projecteq.net.' -color 'Yellow'
	Update-Display '----Copy/Paste lines below into MQ2AutoLogon.ini.  Make sure to set your password.----' -color 'Orange'
	Update-Display '[Settings]'
	Update-Display 'UseStationNamesInsteadOfSessions=1'
	Update-Display 'KickActiveCharacter=1'
	Update-Display 'KickActiveTrader=1'
	Update-Display 'Debug=0'
	Update-Display 'UseAuth=0'
	Update-Display 'UseMQ2Login=0'
	Update-Display '[Servers]'
	Update-Display "$($toon.Server.Trim())=[PEQ] The Grand Creation - Omens of War"
	Update-Display ''
	$list2 = @()
	$list2 += ''
	foreach ($i in $ini)
	{
		$list2 += $i.Login
		$list2 += $i.Password
		$list2 += $i.Server
		$list2 += $i.Character
		$list2 += $i.EQPath
		$list2 += ''
	}
	Update-Display $list2
	Update-Display '----Copy/Paste lines above into MQ2AutoLogon.ini----' -color 'Orange'
	
	buttonup
}

$buttonBuildSampleTOONSCSV_Click = {
	buttondown
	if ($FirstRun -eq $false)
	{
		$richtextbox1.Clear()
	}
	$nums = 1 .. 12
	$ini = @()
	foreach ($n in $nums)
	{
		$n
		if ($n -eq 7) #Adds a blank line
		{
			$ini += [pscustomobject]@{
				Login	  = ''
				Server    = ''
				Character = ''
				EQPath    = ''
			}
		}
		$ini += [pscustomobject]@{
			Login = 'Login' + $n
			Server = 'ProjectEQ'
			Character = 'ToonName' + $n
			EQPath = 'C:\Users\user\Desktop\RoF2\Everquest'
		}
		
	}
	$savefiledialog1.Title = "Save Sample TOONS.CSV"
	#$openfiledialog1.InitialDirectory = $share
	#$openfiledialog1.DefaultExt = "CSV"
	$savefiledialog1.Filter = "CSV (*.csv)|*.CSV|All files (*.*)|*.*"
	$savefiledialog1.FileName = 'Toons-Sample.csv'
	if ($savefiledialog1.ShowDialog() -eq 'OK')
	{
		Update-Display "Exporting to CSV..." -color 'Orange'
		$ini | Export-Csv -path $savefiledialog1.FileName -Delimiter "," -NoTypeInformation
		Update-Display "File saved to:" -color 'Orange'
		Update-Display "File:///$($savefiledialog1.Filename)"
		
	}
	else
	{
		Update-Display 'Operation Cancelled' -color 'Red'
	}
	
	buttonup
	
}

$richtextbox1_LinkClicked = [System.Windows.Forms.LinkClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.LinkClickedEventArgs]
	Start-Process -FilePath $_.LinkText #make links clickable
	
}

$buttonCPUAffinity_Click = {
	buttondown
	$richtextbox1.Clear()
	$EQRunning = get-process -Name eqgame | Select-Object -ExpandProperty MainWindowTitle
	if ($EQRunning -ne $null)
	{
		Update-Display 'Setting CPU affinity for all running Everquest processes...' -color 'Orange'
		Start-Sleep -Seconds 1
		$LogicalProcessors = ((Get-WmiObject -class Win32_processor).NumberOfLogicalProcessors)
		[int32]$ProcAffinity = [math]::pow(2, $LogicalProcessors) - 1 #Forumla for processor affinity: a(n) = 2^n - 1
		$process = GET-PROCESS eqgame
		foreach ($i in $process)
		{
			$i.ProcessorAffinity = $ProcAffinity
			if ($i.ProcessorAffinity -eq $ProcAffinity)
			{
				Update-Display "$($i.MainWindowTitle) set to affinity" -color 'Green'
			}
			else
			{
				Update-Display "$($i.MainWindowTitle) not set to affinity" -color 'Red'
			}
		}
	}
	else
	{
		Update-Display 'Everquest is not running' -color 'Yellow'
	}
	buttonup
}

$buttonKillAllEQ_Click = {
	buttondown
	$richtextbox1.Clear()
	$EQRunning = get-process -Name eqgame | Select-Object -ExpandProperty MainWindowTitle
	if ($EQRunning -ne $null)
	{
		if ((Show-MsgBox -title "Kill all Everquest Processes" -prompt "Are you sure`?" -Icon Exclamation -BoxType YesNo) -eq "Yes")
		{
			Update-Display 'Killing all Everquest processes...' -color 'Orange'
			Start-Sleep -Seconds 1
			taskkill /f /t /im eqgame.exe
		}
		
	}
	else
	{
		Update-Display 'Everquest is not running' -color 'Yellow'
	}
	buttonup
}

$buttonstartMissingToons_Click = {
	buttondown
	$richtextbox1.Clear()
	$EQNotRunningShortcuts = @()
	$list = @()
	$MissingToons = @()
	$EQRunning = get-process -Name eqgame | Select-Object -ExpandProperty MainWindowTitle
	if ($EQRunning -ne $null)
	{
		$Shortcuts = Get-ChildItem -Path $ShortcutsFolder.Text -File
		foreach ($S in $Shortcuts)
		{
			$list += $S.BaseName
		}
		$EQNotRunning = (Compare-Object -ReferenceObject $EQRunning -DifferenceObject $list).InputObject | Sort-Object
		
		foreach ($Shortcut in $Shortcuts)
		{
			if ($EQNotRunning -contains $Shortcut.BaseName)
			{
				Update-Display "$($Shortcut.BaseName) Not Running" -color 'Yellow'
				$EQNotRunningShortcuts += $Shortcut
				
			}
		}
		#Build AutoHotKey
		$AHKTopLines = @"
#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
#Warn  ; Recommended for catching common errors.
SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.

"@
		
		$MissingToons = foreach ($EQNotRunningShortcut in $EQNotRunningShortcuts)
		{
			'Run ' + $EQNotRunningShortcut.FullName
			'WinWaitActive, EverQuest'
			'WinSetTitle, ' + $EQNotRunningShortcut.Name
			''
		}
		if (-not ($EQNotRunningShortcuts))
		{
			Update-Display 'No missing toons found' -color 'Green'
		}
		else
		{
			$AHKTopLines | Out-File $ENV:TEMP\missing.AHK
			$MissingToons | Out-File $ENV:TEMP\missing.AHK -Append
			Start-Sleep -Seconds 2
			Update-Display 'Re-starting missing toons' -color 'Green'
			Start-Process $ENV:TEMP\missing.AHK
		}
		
	}
	elseif ($EQRunning -eq $null)
	{
		Update-Display 'Everquest is not running' -color 'Yellow'
	}
	else
	{
		Update-Display 'No missing toons found' -color 'Green'
	}
	buttonup
}

$buttonBrowseFolder_Click = {
	if ($folderbrowserdialog4.ShowDialog() -eq 'OK')
	{
		$ShortcutsFolder.Text = $folderbrowserdialog4.SelectedPath + '\'
	}
}

$ShortcutsFolder_TextChanged = {
	button-check
	
}

<#
$buttonRemoveAndSaveOkExitS_Click = {
	buttondown
	if ($FirstRun -eq $false)
	{
		$richtextbox1.Clear()
	}
	$currentPWD = Convert-path (get-location)
	Update-Display "Saving PEQConfig.ini to:" -color 'Orange'
	Update-Display "File:///$currentPWD"
	Start-Sleep -Seconds 1
	$ToonsLocation = @{ "ToonsLocation" = "$($toonsFile.Text)" }
	$ShortcutsLocation = @{ "ShortcutsLocation" = "$($ShortcutsFolder.Text)" }
	$EQBCSFileLocation = @{ "EQBCSFileLocation" = "$($EQBCSFile.Text)" }
	$PollTime = @{ "PollTime" = "$($textbox2.Text)" }
	$NewINIContent = @{ "Paths" = $ToonsLocation + $ShortcutsLocation + $EQBCSFileLocation; "Settings" = $PollTime }
	Out-IniFile -InputObject $NewINIContent -FilePath ".\PEQConfig.ini" -Force
	buttonup
	
} #>

$aboutToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'About' -color 'Yellow'
	Update-Display "PEQ Configurator is designed to ease pre-configuration when working with multiple toons and accounts. A CSV file is needed along with an install of Everquest, MQ2, and logging enabled for EQBCS2.  All accounts should be pre-created on eqemulator. The CSV creation is a manual step but a sample is supplied to get you started. `n`
PEQ Configurator is provided as-is and without any warranty.  Feel free to modify the code and redistribute as desired.  `n`
Links:`
https://autohotkey.com/download/`
http://www.eqemulator.org/`
http://www.projecteq.net`n`
Zuboo" -color 'Orange'
	
	
}

$buttonEQClientiniReadOnly_Click = {
	buttondown
	$richtextbox1.Clear()
	$file = Get-ItemProperty $combobox1.SelectedItem
	if ($file.IsReadOnly -eq $true)
	{
		Update-Display "Removing read-only attribute from:" -color 'Orange'
		Update-Display "$file"
		Set-ItemProperty $file -name IsReadOnly -value $False
	}
	else
	{
		Update-Display "Setting read-only attribute for:" -color 'Orange'
		Update-Display "$file"
		Set-ItemProperty $file -name IsReadOnly -value $true
	}
	$file = Get-ItemProperty $combobox1.SelectedItem #get item-property and verify
	if ($file.IsReadOnly -eq $true)
	{
		Update-Display "$file is Read-Only" -color 'Yellow'
	}
	else
	{
		Update-Display "$file is not Read-Only" -color 'Green'
	}
	buttonup
	
}

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]$ListView,
		[Parameter(Mandatory = $true)]
		[int]$ColumnIndex,
		[System.Windows.Forms.SortOrder]$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
	
	if ($Clear)
	{
		$ListView.Items.Clear();
	}
	
	$lvGroup = $null
	if ($Group -is [System.Windows.Forms.ListViewGroup])
	{
		$lvGroup = $Group
	}
	elseif ($Group -is [string])
	{
		#$lvGroup = $ListView.Group[$Group] # Case sensitive
		foreach ($groupItem in $ListView.Groups)
		{
			if ($groupItem.Name -eq $Group)
			{
				$lvGroup = $groupItem
				break
			}
		}
		
		if ($null -eq $lvGroup)
		{
			$lvGroup = $ListView.Groups.Add($Group, $Group)
		}
	}
	
	if ($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{
			$listitem = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if ($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if ($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if ($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if ($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	$ListBox.DisplayMember = $DisplayMember
	$ListBox.ValueMember = $ValueMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}
#endregion

$combobox1_Click = {
	$ini = @()
	$eqclientlist = @()
	$richtextbox1.Clear()
	if ($toonsFile.Text)
	{
		$toons = Import-Csv -Path $toonsFile.Text #Toons CSV location
		foreach ($toon in $toons)
		{
			if ($toon.Login -ne '')
			{
				$ini += [pscustomobject]@{
					Login = $toon.Login.Trim()
					Server = $toon.Server.Trim()
					Character = $toon.Character.Trim()
					EQPath = $toon.EQPath.Trim()
				}
			}
		}
		$comboData = $ini.EQPath | Select-Object -Unique
		foreach ($c in $comboData)
		{
			$eqclient = $c + '\eqclient.ini'
			$eqclientlist += $eqclient
			$file = Get-ItemProperty $eqclient
			if ($file.IsReadOnly -eq $true)
			{
				Update-Display "$file is Read-Only" -color 'Yellow'
			}
			else
			{
				Update-Display "$file is not Read-Only" -color 'Green'
			}
		}
		Update-ComboBox -ComboBox $combobox1 -Items $eqclientlist
		If ($combobox1.SelectedText -ne "")
		{
			$buttonEQClientiniReadOnly.Enabled = $true
		}
		else
		{
			$buttonEQClientiniReadOnly.Enabled = $false
		}
	}
	else
	{
		Update-Display "There seems to be a problem accessing toons.csv" -color 'Yellow'
		Update-ComboBox -ComboBox $combobox1 -Items ""
		$buttonEQClientiniReadOnly.Enabled = $false
	}
	
}

$combobox1_SelectedIndexChanged = {
	If ($combobox1.SelectedItem -ne "")
	{
		$buttonEQClientiniReadOnly.Enabled = $true
	}
	else
	{
		$buttonEQClientiniReadOnly.Enabled = $false
	}
	#$tooltip1.InitialDelay = "20" #make tooltip show very fast default is 500ms
	$tooltip1.SetToolTip($combobox1, $combobox1.SelectedItem)
}

$buttonTaskbarGroupingFix_Click = {
	buttondown
	Start-Sleep -Milliseconds 500
	$richtextbox1.Clear()
	if (Test-Path -Path Registry::HKEY_CLASSES_ROOT\Applications\eqgame.exe)
	{
		$RegValue = Get-ItemProperty -path Registry::HKEY_CLASSES_ROOT\Applications\eqgame.exe -Name IsHostApp
		if ($RegValue.IsHostApp -eq "")
		{
			Update-Display "Registry value IsHostApp already set - Aborting Operation." -color 'Yellow'
		}
		else
		{
			Update-Display "Setting registry value IsHostApp to null" -color 'Orange'
			Set-ItemProperty -path Registry::HKEY_CLASSES_ROOT\Applications\eqgame.exe -Name IsHostApp -Value "" -Type String
		}
		
	}
	else
	{
		Update-Display "HKEY_CLASSES_ROOT\Applications\eqgame.exe not found.  Aborting operation." -color 'Yellow'
	}
	buttonup
	
}

$buttonHungKickedProcesses_Click = {
	buttondown
	$richtextbox1.Clear()
	$script:Shortcut = $ShortcutsFolder.Text
	$script:EQBCS = $EQBCSFile.Text
	$Script:hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
	$Script:kickedEQ = get-process -Name eqgame | Where-Object { $_.MainWindowTitle -eq 'EverQuest' }
	if ((Show-HungProcess_psf) -eq 'OK')
	{
		
	}
	buttonup
}

$buttonEQMonitor_Click = {
	buttondown
	$richtextbox1.Clear()
	$EQRunning = get-process -Name eqgame
	Get-Process -Name powershell | Where-Object { $_.MainWindowTitle -eq 'Hung EQ Process Monitor' } | Stop-Process
	if ($EQRunning -ne $null)
	{
		if ($textbox2.Text -match '^[a-z]*$' -or $textbox2.Text -match ' ')
		{
			$textbox2.Clear()
			Update-Display 'Numbers only and no spaces please' -color 'yellow'
		}
		else
		{
			$timeout = $textbox2.Text
			Update-Display "A new window labeled `'Hung EQ Process Monitor`' will open (minimized).  It will check for hung EQ processes every $timeout seconds." -color 'Orange'
			Start-Process powershell -ArgumentList "-WindowStyle Minimized -command  & { 
    `$host.ui.RawUI.WindowTitle = 'Hung EQ Process Monitor'
    do {
        `$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
        `$hungTitles = `$hungEQ.MainWindowTitle
        `$hungTitleSelections = `$hungTitles
        if (`$hungEQ)
        {
            Write-Host 'Timeout 1st attempt: Sleeping $timeout seconds'
            Start-Sleep -Seconds $timeout                       
            `$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
            `$hungTitles = `$hungEQ.MainWindowTitle
            `$hungTitleSelections = `$hungTitles | Out-String
             if (`$hungEQ)
            {   
               	Write-Host 'Timeout 2nd attempt: Sleeping 15 Seconds'
                Start-Sleep -Seconds 15
				`$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
            	`$hungTitles = `$hungEQ.MainWindowTitle
            	`$hungTitleSelections = `$hungTitles | Out-String
                if (`$hungEQ)
                {   
                    write-host `$hungTitleSelections            
                    [System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms') | Out-Null 
                    [System.Windows.Forms.MessageBox]::Show(`$hungTitleSelections , 'Hung EQ Processes' , 'OK', 'Exclamation', 'Button1', 'DefaultDesktopOnly')           
                }
            }
        }
        }
        While (get-process -Name eqgame)
        }"
		}
		
		
	}
	else
	{
		Update-Display 'Everquest is not running' -color 'Yellow'
	}
	
	buttonup
	
}

$buttonFlagCheck_Click = {
	buttondown
	$richtextbox1.Clear()
	$count = ((Get-Content $EQBCSFile.Text | Where-Object { $_ -match 'flag' }) | Select-Object -Unique).count
	$flags = (Get-Content $EQBCSFile.Text | Where-Object { $_ -match 'flag' }) | Select-Object -Unique | Sort-Object
	
	$splittoons = @()
	foreach ($flag in $flags)
	{
		$split = $flag -split '>'
		$splittoons += [PSCustomObject] @{
			Toon = ($split[0] -replace '<', '').Trim()
		}
	}
	
	$reftoons = Get-Process -Name eqgame | Select-Object -ExpandProperty MainWindowTitle
	if ($reftoons)
	{
		$compare = Compare-Object -ReferenceObject ($reftoons.Trim()) -DifferenceObject ($splittoons.Toon) -IncludeEqual
		$missingFlag = $compare | Where-Object { $_.SideIndicator -eq '<=' }
		$gotFlag = $compare | Where-Object { $_.SideIndicator -eq '==' }
		$extraFlag = $compare | Where-Object { $_.SideIndicator -eq '=>' } #toon is likely running on another PC
	}
	Update-Display 'Make sure to turn on EQBCS logging' -color 'Orange'
	Update-Display 'EQBCS2.exe -l EQBCS2Log.txt' -color 'Orange'
	Update-Display '**Always clear EQBCS logs before next set of flags**' -color 'Orange'
	Update-Display ''
	Update-Display "Total Flag Count: $count" -color 'Yellow'
	Update-Display ""
	if ($missingFlag)
	{
		Update-Display '**Toons running on this computer who did not receive a flag**:' -color 'Orange'
		Update-Display $missingFlag.InputObject -color 'Yellow'
		Update-Display ""
	}
	if ($gotFlag)
	{
		Update-Display 'Toons running on this computer who received a flag:' -color 'Orange'
		Update-Display $gotFlag.InputObject -color 'Green'
		Update-Display ""
	}
	If ($extraFlag)
	{
		Update-Display 'Toons NOT running on this computer who received a flag:' -color 'Orange'
		Update-Display $extraFlag.InputObject -color 'Cyan'
		Update-Display ""
	}
	
	Update-Display 'All Flags:' -color 'Orange'
	Update-Display $flags -color 'Green'
	
	
	buttonup
}

$button_outputClear_Click = {
	buttondown
	$richtextbox1.Clear()
	buttonup
	
}

$buttonBrowse2_Click = {
	
	if ($openfiledialog5.ShowDialog() -eq 'OK')
	{
		$EQBCSFile.Text = $openfiledialog5.FileName
	}
}

$flagCheckToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'Flag Check' -color 'Yellow'
	Show-EQBCSHelp
	Update-Display 'Parses EQBCS log file.  Reports all flags and total count.  **Always clear EQBCS log for next set of flags**'
}

$eQCPUAffinityToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'EQ CPU Affinity' -color 'Yellow'
	Update-Display 'Forces all EQ processes to use all cores on your PC.'
}

$buildShortcutsToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'Build Shortcuts...' -color 'Yellow'
	Show-ToonsHelp
	Show-ShortcutsHelp
	Update-Display 'This will build all shortcuts based on toon names defined in the Toons.CSV file.'
	
}

$buildAutoHotKeyScriptToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'Build AutoHotKey Script' -color 'Yellow'
	Show-ToonsHelp
	Show-ShortcutsHelp
	Update-Display 'This will build a pre-configured AutoHotKey script which can be pasted into an .AHK file.'
}

$buildMQ2AutoLoginINIToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'Build MQ2AutoLogin INI' -color 'Yellow'
	Show-ToonsHelp
	Update-Display 'This will build the contents of an MQ2AutoLogon INI file which can be pasted into the file.  Plain text passwords are required for MQAutoLogon.INI.  Please edit the file and manually enter these.'
	
}

$buildSampleToonsCSVToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'Build Sample Toons CSV...' -color 'Yellow'
	Update-Display 'A sample Toons.CSV to get you started.  This is required to take full advantage of all of the features within PEQ Configurator.  Once you start adding more toons, a spreadsheet of some kind will make life much easier.  More columns can be added without affecting PEQ Configurator - Just make sure the base columns are always present.'
	
}

$eQClinitiniReadOnlyToggleToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'EQ Client.ini ReadOnly Toggle' -color 'Yellow'
	Show-ToonsHelp
	Update-Display 'The dropdown will report back the Read-Only status of EQClient.ini and the button will toggle it on/off.'
	
}

$taskBarGroupingFixToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'TaskBar Grouping Fix' -color 'Yellow'
	Update-Display 'You must be an administrator to use this feature.  Sets registry value to allow EQ Windows to be moved around independently on the taskbar.'
	
}

$EQBCSFile_TextChanged = {
	button-check
	
}

$firstRunTextToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'First Run Text' -color 'Yellow'
	Update-Display 'This looks like your first time running PEQ Config.  Please do the following:' -color 'Orange'
	Update-Display '1. Create a Toons.Csv File.  Use the Build Sample Toons.Csv to get started'
	Update-Display '2. Fill out the locations where each file/path lives'
	Update-Display '3. Click Build Shortcuts to create all shortcuts from Toons.Csv'
	Update-Display '4. (Optional/Example) Click Build AutoHotKey Script and paste into .AHK file'
	Update-Display '5. (Optional/Example) Click Build MQ2AutoLogin INI and paste into MQ2AutoLogin.ini'
	Update-Display '6. Make sure to Enable EQBCS Logging --> EQBCS2.exe -l EQBCS2Log.txt'
	Update-Display ''
	
}

$toonsFile_Click = {
	$toonsFile.SelectAll()
	
}

$ShortcutsFolder_Click = {
	$ShortcutsFolder.SelectAll()
	
}

$EQBCSFile_Click = {
	$EQBCSFile.SelectAll()
	
}

$Mainform_FormClosing = [System.Windows.Forms.FormClosingEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.FormClosingEventArgs]
	$currentPWD = Convert-path (get-location)
	#Update-Display "Saving PEQConfig.ini to:" -color 'Orange'
	#Update-Display "File:///$currentPWD"
	
	$ToonsLocation = @{ "ToonsLocation" = "$($toonsFile.Text)" }
	$ShortcutsLocation = @{ "ShortcutsLocation" = "$($ShortcutsFolder.Text)" }
	$EQBCSFileLocation = @{ "EQBCSFileLocation" = "$($EQBCSFile.Text)" }
	$HungPollTime = @{ "HungPollTime" = "$($textbox2.Text)" }
	$DisconnectedPollTime = @{ "DisconnectedPollTime" = "$($textbox1.Text)" }
	$AutoStart = @{ "AutoStart" = $checkboxAutoStart.CheckState }
	$DisplayPopup = @{ "DisplayPopup" = $checkboxDisplayPopup.CheckState }
	$MakeASound = @{ "MakeASound" = $checkboxMakeASound.CheckState }
	
	$NewINIContent = @{ "Paths" = $ToonsLocation + $ShortcutsLocation + $EQBCSFileLocation; "Settings" = $DisconnectedPollTime + $HungPollTime + $AutoStart + $DisplayPopup + $MakeASound }
	Out-IniFile -InputObject $NewINIContent -FilePath ".\PEQConfig.ini" -Force
}

$buttonNewEQMonitor_Click = {
	buttondown
	$richtextbox1.Clear()
	$EQRunning = get-process -Name eqgame
	Get-Process -Name powershell | Where-Object { $_.MainWindowTitle -eq 'Hung EQ Process Monitor' } | Stop-Process
	if ($EQRunning -ne $null)
	{
		if ($textbox2.Text -match '^[a-z]*$' -or $textbox2.Text -match ' ')
		{
			$textbox2.Clear()
			Update-Display 'Numbers only and no spaces please' -color 'yellow'
		}
		else
		{
			$timeout = $textbox2.Text
			Update-Display "A new window labeled `'Hung EQ Process Monitor`' will open (minimized).  It will check for hung EQ processes every $timeout seconds." -color 'Orange'
			Start-Process powershell -ArgumentList "-WindowStyle Minimized -command  & { 
    `$host.ui.RawUI.WindowTitle = 'Hung EQ Process Monitor'
    do {
        `$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
        `$hungTitles = `$hungEQ.MainWindowTitle
        `$hungTitleSelections = `$hungTitles
        if (`$hungEQ)
        {
            Write-Host 'Timeout 1st attempt: Sleeping $timeout seconds'
            Start-Sleep -Seconds $timeout                       
            `$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
            `$hungTitles = `$hungEQ.MainWindowTitle
            `$hungTitleSelections = `$hungTitles | Out-String
             if (`$hungEQ)
            {   
               	Write-Host 'Timeout 2nd attempt: Sleeping 15 Seconds'
                Start-Sleep -Seconds 15
				`$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
            	`$hungTitles = `$hungEQ.MainWindowTitle
            	`$hungTitleSelections = `$hungTitles | Out-String
                if (`$hungEQ)
                {   
                    write-host `$hungTitleSelections            
                    [System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms') | Out-Null 
                    [System.Windows.Forms.MessageBox]::Show(`$hungTitleSelections , 'Hung EQ Processes' , 'OK', 'Exclamation', 'Button1', 'DefaultDesktopOnly')           
                }
            }
        }
        }
        While (get-process -Name eqgame)
        }"
		}
		
		
	}
	else
	{
		Update-Display 'Everquest is not running' -color 'Yellow'
	}
	
	buttonup
	
	
}

$buttonStartJob_Click = {
	$buttonStartJob.Enabled = $false
	$richtextbox1.Clear()
	$timeout = $textbox2.Text
	#Create a New Job using the Job Tracker
	$paramAddJobTracker = @{
		Name	  = 'EQMonitor'
		JobScript = {
			#--------------------------------------------------
			#TODO: Set a script block
			#Important: Do not access form controls from this script block.			
			Param ($TimeOutArgument) #Pass any arguments using the ArgumentList parameter			
			#for ($i = 0; $i -lt 50; $i++) { Start-Sleep -Milliseconds 100 }
			$FirstTimeout = $TimeOutArgument * (2/3)
			$SecondTimeout = $TimeOutArgument * (1/3)
			$EQRunning = get-process -Name eqgame
			do
			{
				$hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
				$hungTitles = $hungEQ.MainWindowTitle
				#$hungTitleSelections = $hungTitles
				if ($hungEQ)
				{
					#Write-Host "Timeout 1st attempt: Sleeping  2/3 of $TimeOutArgument seconds"
					Start-Sleep -Seconds $FirstTimeout
					$hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
					$hungTitles = $hungEQ.MainWindowTitle
					#$hungTitleSelections = $hungTitles | Out-String
					if ($hungEQ)
					{
						#Write-Host 'Timeout 2nd attempt: Sleeping 1/3 of $TimeOutArgument seconds'
						Start-Sleep -Seconds $SecondTimeout
						$hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
						#$hungTitles = $hungEQ.MainWindowTitle
						$hungTitles = $hungEQ | Select-Object @{ N = 'Title'; E = { $_.MainWindowTitle } }, Id, @{ N = 'Status'; E = { 'Hung' } }
						#$hungTitleSelections = $hungTitles | Out-String
						if ($hungEQ)
						{
							Write-Output $hungTitles
							#[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms') | Out-Null
							#[System.Windows.Forms.MessageBox]::Show($hungTitleSelections, 'Hung EQ Processes', 'OK', 'Exclamation', 'Button1', 'DefaultDesktopOnly')
						}
					}
				}
			}
			While (get-process -Name PEQConfig)
			Start-Sleep -Milliseconds 100
			#--------------------------------------------------
		}
		ArgumentList = $timeout
		CompletedScript = {
			Param ([System.Management.Automation.Job]$Job)
			#$results = Receive-Job -Job $Job 
			#Enable the Button
			$buttonStartJob.ImageIndex = -1
			$buttonStartJob.Enabled = $true
			
		}
		UpdateScript = {
			Param ([System.Management.Automation.Job]$Job)
			#-------------------------------------------------
			#Get partial Results here			
			$results = Receive-Job -Job $Job #-Keep			
			if ($listview1.Items.Count -eq 0)
			{
				foreach ($h in $results)
				{
					Add-ListViewItem -ListView $listview1 -Items $h.ID -SubItems $h.Title, $h.Status
				}
				$a++
				if ($a -eq 1) #Trigger only once per group of hung processes
				{
					Make-Sound
					Show-Popup					
				}
			}
			else
			{
				$ListboxIDs = @()
				foreach ($l in $listview1.Items | Where-Object { $_.SubItems[2].Text -match 'Hung' }) #Will only search hung items
				{
					$ListboxIDs += $l.text
				}
				foreach ($r in $results)
				{
					if ($ListboxIDs -contains $r.ID)
					{
						#Update-Display "Listbox matches $($r.ID)"
					}
					else
					{
						#Update-Display 'Adding to ListView'
						Add-ListViewItem -ListView $listview1 -Items $r.ID -SubItems $r.Title, $r.Status
						$a++
						if ($a -eq 1) #Trigger only once per group of hung processes
						{
							Make-Sound
							Show-Popup							
						}
						
					}
					
				}
			}
			$listViewItems = $listview1.Items | Where-Object {$_.SubItems[2].Text -match 'Disconnected'}
			foreach ($l in $ListboxIDs) #Verify Processes are still hung
			{
				if (get-process -id $l | Where-Object { $_.Responding -eq $true })
				{
					Update-Display "Process $l is no longer hung" -color 'Orange'
					$ListView1.Items.Clear() ##<--This does work.  $listview1.Clear() does not work					
					$NowRunning = $true
				}
			}
			if ($NowRunning) #Repop listview
			{
				$hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
				$hungTitles = $hungEQ | Select-Object @{ N = 'Title'; E = { $_.MainWindowTitle } }, Id, @{ N = 'Status'; E = { 'Hung' } }
				foreach ($h in $hungTitles)
				{
					Add-ListViewItem -ListView $listview1 -Items $h.ID -SubItems $h.Title, $h.Status
				}
				foreach ($LvItem in $listViewItems) #add Disconnected items back to list
				{
					Add-ListViewItem -ListView $listview1 -Items $LvItem.SubItems[0].Text -SubItems $LvItem.SubItems[1].Text, $LvItem.SubItems[2].Text					
				}
				$NowRunning = $false
			}
			
			#-------------------------------------------------
			#Animate the Button
			if ($null -ne $buttonStartJob.ImageList)
			{
				if ($buttonStartJob.ImageIndex -lt $buttonStartJob.ImageList.Images.Count - 1)
				{
					$buttonStartJob.ImageIndex += 1
				}
				else
				{
					$buttonStartJob.ImageIndex = 0
				}
			}
		}
	}
	
	Add-JobTracker @paramAddJobTracker
}

$jobTracker_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
	#Stop any pending jobs
	Stop-JobTracker
}
#Append the event to the form
#$MainForm.add_FormClosed($jobTracker_FormClosed) #Why is there here?

$timerJobTracker_Tick = {
	Update-JobTracker
}

#region Job Tracker
$JobTrackerList = New-Object System.Collections.ArrayList
function Add-JobTracker
{
	<#
		.SYNOPSIS
			Add a new job to the JobTracker and starts the timer.
	
		.DESCRIPTION
			Add a new job to the JobTracker and starts the timer.
	
		.PARAMETER  Name
			The name to assign to the job.
	
		.PARAMETER  JobScript
			The script block that the job will be performing.
			Important: Do not access form controls from this script block.
	
		.PARAMETER ArgumentList
			The arguments to pass to the job.
		.PARAMETER  CompletedScript
			The script block that will be called when the job is complete.
			The job is passed as an argument. The Job argument is null when the job fails.
	
		.PARAMETER  UpdateScript
			The script block that will be called each time the timer ticks.
			The job is passed as an argument. Use this to get the Job's progress.
	
		.EXAMPLE
			Add-JobTracker -Name 'JobName' `
			-JobScript {	
				Param($Argument1)#Pass any arguments using the ArgumentList parameter
				#Important: Do not access form controls from this script block.
				Get-WmiObject Win32_Process -Namespace "root\CIMV2"
			}`
			-CompletedScript {
				Param($Job)		
				$results = Receive-Job -Job $Job
			}`
			-UpdateScript {
				Param($Job)
				#$results = Receive-Job -Job $Job -Keep
			}
	
		.LINK
			
	#>
	
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[string]$Name,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[ScriptBlock]$JobScript,
		$ArgumentList = $null,
		[ScriptBlock]$CompletedScript,
		[ScriptBlock]$UpdateScript)
	
	#Start the Job
	$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
	
	if ($null -ne $job)
	{
		#Create a Custom Object to keep track of the Job & Script Blocks
		$members = @{
			'Job'		     = $Job;
			'CompleteScript' = $CompletedScript;
			'UpdateScript'   = $UpdateScript
		}
		
		$psObject = New-Object System.Management.Automation.PSObject -Property $members
		
		[void]$JobTrackerList.Add($psObject)
		
		#Start the Timer
		if (-not $timerJobTracker.Enabled)
		{
			$timerJobTracker.Start()
		}
	}
	elseif ($null -ne $CompletedScript)
	{
		#Failed
		Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
	}
	
}

function Update-JobTracker
{
	<#
		.SYNOPSIS
			Checks the status of each job on the list.
	#>
	
	#Poll the jobs for status updates
	$timerJobTracker.Stop() #Freeze the Timer
	
	for ($index = 0; $index -lt $JobTrackerList.Count; $index++)
	{
		$psObject = $JobTrackerList[$index]
		
		if ($null -ne $psObject)
		{
			if ($null -ne $psObject.Job)
			{
				if ($psObject.Job.State -eq 'Blocked')
				{
					#Try to unblock the job
					Receive-Job $psObject.Job | Out-Null
				}
				elseif ($psObject.Job.State -ne 'Running')
				{
					#Call the Complete Script Block
					if ($null -ne $psObject.CompleteScript)
					{
						#$results = Receive-Job -Job $psObject.Job
						Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
					}
					
					$JobTrackerList.RemoveAt($index)
					Remove-Job -Job $psObject.Job
					$index-- #Step back so we don't skip a job
				}
				elseif ($null -ne $psObject.UpdateScript)
				{
					#Call the Update Script Block
					Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
				}
			}
		}
		else
		{
			$JobTrackerList.RemoveAt($index)
			$index-- #Step back so we don't skip a job
		}
	}
	
	if ($JobTrackerList.Count -gt 0)
	{
		$timerJobTracker.Start() #Resume the timer
	}
}

function Stop-JobTracker
{
	<#
		.SYNOPSIS
			Stops and removes all Jobs from the list.
	#>
	#Stop the timer
	$timerJobTracker.Stop()
	
	#Remove all the jobs
	while ($JobTrackerList.Count -gt 0)
	{
		$job = $JobTrackerList[0].Job
		$JobTrackerList.RemoveAt(0)
		Stop-Job $job
		Remove-Job $job
	}
}
#endregion

$buttonStartJob2_Click = {
	
	$buttonStartJob2.Enabled = $false
	$EQBCSFile = $EQBCSFile.Text
	$ShortcutsFolder = $ShortcutsFolder.Text
	$DCtimeout = $textbox1.Text
	#Create a New Job using the Job Tracker
	$paramAddJobTracker = @{
		Name	  = 'EQMonitor2'
		JobScript = {
			#--------------------------------------------------
			#TODO: Set a script block
			#Important: Do not access form controls from this script block.
			
			Param ($EQBCSFileArg,
				$ShortcutsFolderArg,
				$DCtimeoutArg) #Pass any arguments using the ArgumentList parameter			
			#for ($i = 0; $i -lt 50; $i++) { Start-Sleep -Milliseconds 100 }
			#Watches EQBCS log file for disconnected users and reports them
			$alltoons = @()
			$restarttoons = @()
			$HasLeft = @()
			$HasLeftToons = @()
			$count = 0
			$Shortcuts = Get-ChildItem -Path $ShortcutsFolderArg -File
			foreach ($S in $Shortcuts)
			{
				$alltoons += $S.BaseName
			}
			
			$alltoons = $alltoons | Sort-Object
			
			#Read log file
			Do
			{
				#Write-Host "pass $count"
				$restarttoons = @()
				$HasLeft = @()
				$HasLeftToons = @()
				$line = @()
				$t = @()
				$h = @()
				$s = @()
				$content = Get-Content $EQBCSFileArg #Read logfile contents
				$a = 1
				$ArrayForEach = @(foreach ($line in $content) #Add Line numbers
					{
						"$a `t" + $line
						$a++
					})
				
				if ($ArrayForEach.count -lt $LastLineNumber)
				{
					#Write-Warning 'EQBCS has been likely been restarted'
					#Write-Host 'Resetting line count' -ForegroundColor Yellow
					$count = 0
				}
				if ($count -eq 0) #first pass - get last line - Skips any previous log information
				{
					$LastOne = ($ArrayForEach | Select-Object -Last 1)
					$LastLineNumber = ($ArrayForEach | Where-Object { $_ -eq $LastOne }).Split("`t")[0]
					#Write-Host "Beginning on Line $($ArrayForEach.Count) - Should only see this once" -ForegroundColor Cyan
				}
				else
				{
					#write-host "Line count $($ArrayForEach.Count)" -ForegroundColor Cyan
				}
				
				Try #gets any new lines after $lastmatch #Select-String is buggy
				{
					#$ArrayForEach = $ArrayForEach | Select-String $lastmatch -Context 0, 1000000 | ForEach-Object { $_.Context.PostContext }
					#Write-Host 'Select String'
					$ArrayCount = 1
					$NewArrayForEach = @(foreach ($array in $ArrayForEach)
						{
							if ($ArrayCount -gt $LastLineNumber) #if ($a -ge $($ArrayForEach.Count))
							{
								$Array
							}
							$ArrayCount++
						})
				}
				catch
				{
					Write-Warning 'Error $arrayForEach'
				}
								
				#region CheckHasLeft
				$HasLeft = @(foreach ($line in $NewArrayForEach)
					{
						if ($line -match 'has left the server.')
						{
							$line
						}
					})
				
				#Get has left toons
				$HasLeftToons = @(foreach ($t in $HasLeft)
					{
						
						$t.split(' ')[2]
						
					})
				
				$HasLeftToons = $HasLeftToons | Select-Object -Unique
				#$HasLeftToons
				#endregion CheckHasLeft
				
				#region ReportKickedToons
				if ($HasLeftToons.count -ge 1)
				{
					foreach ($h in $HasLeftToons)
					{
						#Write-Warning 'Kicked toons detected:'
						<#
						foreach ($s in $Shortcuts)
						{
							if ($s.BaseName -match $h)
							{
								Write-Output "$($s.BaseName)"								
							}
						}
						#>
						$DisconnectedEQ = get-process -Name eqgame | Where-Object { $_.MainWindowTitle -eq $h }
						$DisconnectedTitles = $DisconnectedEQ | Select-Object @{ N = 'Title'; E = { $_.MainWindowTitle } }, Id, @{ N = 'Status'; E = { 'Disconnected' } }
						Write-Output $DisconnectedTitles
					}
				}
				else
				{
					#write-host 'No disconnected toons detected' -ForegroundColor Green
				}
				#endregion ReportKickedToons
				
				
				if ($NewArrayForEach -ne $null) #Update $lastmatch if $arrayforeach contains new data
				{
					#$lastmatch = ($ArrayForEach | Select-Object -Last 1)
					$LastOne = ($NewArrayForEach | Select-Object -Last 1)
					$LastLineNumber = ($NewArrayForEach | Where-Object { $_ -eq $LastOne }).Split("`t")[0]
					
				}
				#Write-Host "Last line: $LastOne"
				#Write-Host ''
				Start-Sleep -Seconds $DCtimeoutArg
				$count++
			}
			While (get-process -Name PEQConfig)
			#--------------------------------------------------
		}
		ArgumentList = $EQBCSFile, $ShortcutsFolder, $DCtimeout
		CompletedScript = {
			Param ([System.Management.Automation.Job]$Job)
			#$results = Receive-Job -Job $Job 
			#Enable the Button
			$buttonStartJob2.ImageIndex = -1
			$buttonStartJob2.Enabled = $true
		}
		UpdateScript = {
			Param ([System.Management.Automation.Job]$Job)
			#-------------------------------------------------
			#Get partial Results here
			$results = Receive-Job -Job $Job #-Keep
			if ($listview1.Items.Count -eq 0)
			{
				foreach ($h in $results)
				{
					Add-ListViewItem -ListView $listview1 -Items $h.ID -SubItems $h.Title, $h.Status
					$a++
					if ($a -eq 1) #Trigger only once per group of hung processes
					{
						Make-Sound
						Show-Popup						
					}
				}
			}
			else
			{
				$ListboxIDs = @()
				foreach ($l in $listview1.Items)
				{
					$ListboxIDs += $l.text
				}
				foreach ($r in $results)
				{
					if ($ListboxIDs -contains $r.ID)
					{
						#Update-Display "Listbox matches $($r.ID)"
					}
					else
					{
						#Update-Display 'Adding to ListView'
						Add-ListViewItem -ListView $listview1 -Items $r.ID -SubItems $r.Title, $r.Status
						$a++
						if ($a -eq 1) #Trigger only once per group of hung processes
						{
							Make-Sound
							Show-Popup							
						}
					}
				}
			}
			
			<#
			foreach ($l in $ListboxIDs) #Verify Processes are still hung
			{
				if (get-process -id $l | Where-Object { $_.Responding -eq $true })
				{
					Update-Display "Process $l is no longer hung" -color 'yellow'
					$ListView1.Items.Clear() ##<--This does work.  $listview1.Clear() does not work					
					$NowRunning = $true
				}
			}
			if ($NowRunning) #Repop listview
			{
				$hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
				$hungTitles = $hungEQ | Select-Object @{ N = 'Title'; E = { $_.MainWindowTitle } }, Id, @{ N = 'Status'; E = { 'Hung' } }
				foreach ($h in $hungTitles)
				{
					Add-ListViewItem -ListView $listview1 -Items $h.ID -SubItems $h.Title, $h.Status
				}
				$NowRunning = $false
			}#>
			#-------------------------------------------------
			#Animate the Button
			if ($null -ne $buttonStartJob2.ImageList)
			{
				if ($buttonStartJob2.ImageIndex -lt $buttonStartJob2.ImageList.Images.Count - 1)
				{
					$buttonStartJob2.ImageIndex += 1
				}
				else
				{
					$buttonStartJob2.ImageIndex = 0
				}
			}
		}
	}
	
	Add-JobTracker @paramAddJobTracker
}

$buttonStopMonitors_Click = {
	buttondown
	Stop-JobTracker
	#$results = Receive-Job -Job $Job 
	#Enable the Button
	$buttonStartJob.ImageIndex = -1
	$buttonStartJob.Enabled = $true
	$buttonStartJob2.ImageIndex = -1
	$buttonStartJob2.Enabled = $true
	buttonup
	
}


$buttonKillAndRestartAll_Click={
	buttondown
	$richtextbox1.Clear()
	if ($listview1.Items.Count -gt 0)
	{
		if ((Show-MsgBox -Prompt 'Are you sure?' -Title 'Kill All' -icon Exclamation -BoxType YesNo) -eq 'Yes')
		{
			#region Get-RestartList
			$RestartAll = @()
			$RestartTitles = $listview1.Items
			foreach ($l in $RestartTitles)
			{
				$RestartAll += $l.SubItems[1].Text
			}
			#endregion Get-RestartList
			#region Kill-Process
			foreach ($l in $listview1.Items)
			{
				Update-Display 'Killing all hung/disconnected processes' -color 'Yellow'
				Get-Process -id $l.Text | Stop-Process
				$l.Remove()
				Start-Sleep -Milliseconds 350
			}
			#endregion Kill-Process
			#region Restart-Items
			$Shortcuts = Get-ChildItem -Path $ShortcutsFolder.Text -File
			foreach ($s in $Shortcuts)
			{
				foreach ($r in $RestartAll)
				{
					if ($r -match $s.BaseName)
					{
						Invoke-Item $s.FullName
						Start-Sleep -Seconds 5
					}
				}
			}
			#endregion Restart-Items
			
		}
	}
	else
	{
		Update-Display 'No disconnected or hung sessions listed' -color 'Yellow'
	}
	buttonup
	
}

$buttonKillAndRestartSelect_Click= {
	buttondown
	$richtextbox1.Clear()
	if ($listview1.Items.Count -gt 0)
	{
		if ((Show-MsgBox -Prompt 'Are you sure?' -Title 'Kill Selected' -icon Exclamation -BoxType YesNo) -eq 'Yes')
		{
			#region Get-RestartList
			$RestartAll = @()
			$RestartTitles = $listview1.SelectedItems
			foreach ($l in $RestartTitles)
			{
				$RestartAll += $l.SubItems[1].Text
			}
			#endregion Get-RestartList
			#region Kill-Process
			foreach ($l in $listview1.SelectedItems)
			{
				Update-Display "Killing selected process $($l.Text)" -color 'Yellow'
				Get-Process -id $l.Text | Stop-Process
				$l.Remove()
				Start-Sleep -Milliseconds 350
			}
			#endregion Kill-Process
			#region Restart-Items
			$Shortcuts = Get-ChildItem -Path $ShortcutsFolder.Text -File
			foreach ($s in $Shortcuts)
			{
				foreach ($r in $RestartAll)
				{
					if ($r -match $s.BaseName)
					{
						Invoke-Item $s.FullName
						Start-Sleep -Seconds 5
					}
				}
			}
			#endregion Restart-Items
		}
	}
	else
	{
		Update-Display 'No disconnected or hung sessions listed' -color 'Yellow'
	}
	buttonup
}

$button1_Click={
	$ListView1.Items.Clear()
	
}


$buttonClearEQBCS_Click={
	buttondown
	if (Test-Path (Join-Path $(Split-Path $EQBCSFile.Text) eqbcs2.exe) -PathType Leaf)
	{
		#$EQBCSLeaf = (Split-Path C:\users\elation\Desktop\RoF2\E3_RoF2\EQBCS2Log.txt -Leaf)
		#$EQBCSNewLog = (Join-Path $(Split-Path C:\users\elation\Desktop\RoF2\E3_RoF2\EQBCS2Log.txt) eqbcs2.exe) + ' -l ' + $EQBCSLeaf
		'Log cleared' | Out-File $EQBCSFile.Text -Encoding ascii -Force
	}
	buttonup
	
}

$restartMissingToonslegacyToolStripMenuItem_Click={
	$richtextbox1.Clear()
	Update-Display 'Restart Missing Toons' -color 'Yellow'
	Show-ShortcutsHelp
	Update-Display 'If a toon is missing, this will search your shortcuts folder, compare it to those running, and restart the missing toon.'
	
	
}

$eQMonitorlegacyToolStripMenuItem_Click={
	$richtextbox1.Clear()
	Update-Display 'EQ Process Monitor' -color 'Yellow'
	Update-Display 'Opens a separate, minimized PowerShell window that polls EQGame.exe every 30 seconds or specified custom time.  If an EQ process hangs, a popup will report it with the toon(s) that hung.  Lag, zoning, and other anomalies can cause false positives.  The window will close when all EQ processes are ended.'
	
	
}

$checkForHungKickedProcesseslegacyToolStripMenuItem_Click={
	$richtextbox1.Clear()
	Update-Display 'Check for Hung/Kicked Processes...' -color 'Yellow'
	Show-ShortcutsHelp
	Show-EQBCSHelp
	Update-Display 'Checks for hung or kicked EQ sessions and allows you to kill those processes.'
	Update-Display 'Checks if a character was kicked out of the game and MQ2 quit.  This usually results in the process name reverting back to EverQuest instead of the toon name.'
	Update-Display 'Allows you to manually check for toons that have been kicked to login, character select.  This requires an in-game /bcaa //bc <UniqueWord> to be used first.'
	
}

$eQMonitorToolStripMenuItem_Click={
	Update-Display 'Check for Hung/Disconnected EQ Processes...' -color 'Yellow'
	Show-ShortcutsHelp
	Show-EQBCSHelp
	Update-Display 'Checks for hung or disconnected EQ sessions and allows you to kill and restart them.  Timeouts can be customized.  The stop button stops both monitors.  Autostart will start both monitors on start of program.  Display Popup will show a popup for hung or disconnected toons.  Make a sound will play a sound for each hang or disconnect.  Kill and restart will kill any EQ process listed in the list view - either all or selected depending on which button is used.'	
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>
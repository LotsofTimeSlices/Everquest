<File version="3.1">
  <FileID>6ccc0928-8b6b-4294-9e75-bca1c17bd3eb</FileID>
  <Preview>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
7ty588D/q8TmBEDeyS2v1xJCPnnk/+jNmzctCoD8rKOjE7du3VT+XxmGeTYiuxCX4i7b04f/Z21G
ABiGeTYi/2cfFgCJFHSJsjOxIBCEkE+Hh/9XJc+8AEiU7mPFOPKow2AwEEI+ReT/oexXQV4OsPT/
SgixDWxCAOSORj7HTQh5NmDjT4jtYxMCIIcTQp4tLP2vEkJsB/l//EwIgDyq4A1+hBBCyCeDbHM/
VQGQCyEFYPylPYQQQgj5ZJD32H2qZwDkzM1mMyGEEEI+QeTl9/H2+BMXAImUAEIIIYR88oy3xZ+K
ABBCCCHk04UCQAghhNghFABCCCHEDnlqAjDQP1Y4IYQQQp49BkU7re+0ogDUioIa9X2KVWjNhBBC
CHkWke10q7FPabetIgDjSKMghBBCyLPLeONvVQEghBBCiO3wkQRAJwSgVjuoTEwIIYQQ26NGYPww
ArB27brq4XcA8xAUcyCEEEKIbXIbwOEjEU8mAHPmzK0+dPgoQkIPKdZACCGEENsk/MgxrFq95skE
gGEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEYhmEY
hmEYhmEYhmEYhmEYhmEY5hPPc8/9/yHSk4mH/HhwAAAAAElFTkSuQmCC</Preview>
  <Form>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
9/v/AU7hTwPkQAEA</Form>
  <Code><![CDATA[$MainForm_Load = {
	#Disable buttons
	$buttonBuildShortcuts.Enabled = $false
	$buttonBuildAutoHotKey.Enabled = $false
	$buttonBuildMQ2AutoLogin.Enabled = $false
	$buttonstartMissingToons.Enabled = $false
	$buttonEQClientiniReadOnly.Enabled = $false
	$buttonFlagCheck.Enabled = $false
	$buttonStartJob2.Enabled = $false
	if (Test-Path ".\PEQConfig.ini") #Get data from INI
	{
		$Script:FirstRun = $false
		$INIcontent = Get-IniContent -filePath .\PEQConfig.ini
		$toonsFile.Text = $INIcontent.Paths.ToonsLocation
		$ShortcutsFolder.Text = $INIcontent.Paths.ShortcutsLocation
		$EQBCSFile.Text = $INIcontent.Paths.EQBCSFileLocation
		If ($INIcontent.Settings.AutoStart -eq 'Checked')
		{
			$checkboxAutoStart.Checked = $true
		}
		If ($INIcontent.Settings.DisplayPopup -eq 'Checked')
		{
			$checkboxDisplayPopup.Checked = $true
		}
		If ($INIcontent.Settings.MakeASound -eq 'Checked')
		{
			$checkboxMakeASound.Checked = $true
		}
		if ($INIcontent.Settings.HungPolltime)
		{
			$textbox2.Text = $INIcontent.Settings.HungPollTime
		}
		if ($INIcontent.Settings.DisconnectedPolltime)
		{
			$textbox1.Text = $INIcontent.Settings.DisconnectedPollTime
		}
		if ($toonsFile.Text -eq '' -or $ShortcutsFolder.Text -eq '' -or $EQBCSFile.Text -eq '')
		{
			$tabcontrol1.SelectedTab = $tabpage3
			Update-Display 'For best results, please fill out all 3 sections' -color 'Yellow'
		}
		
	}
	else
	{
		$tabcontrol1.SelectedTab = $tabpage3
		$Script:FirstRun = $true
		Update-Display 'This looks like your first time running PEQ Config.  Please do the following:' -color 'Orange'
		Update-Display '1. Create a Toons.Csv File.  Use the Build Sample Toons.Csv to get started'
		Update-Display '2. Fill out the locations where each file/path lives and edit your seconds'
		Update-Display '3. Click Save Locations and Poll Time'
		Update-Display '4. Click Build Shortcuts to create all shortcuts from Toons.Csv'
		Update-Display '5. Click Build AutoHotKey Script and paste into .AHK file'
		Update-Display '6. Click Build MQ2AutoLogin INI and paste into MQ2AutoLogin.ini'
		Update-Display '7. Make sure to Enable EQBCS Logging --> EQBCS2.exe -l EQBCS2Log.txt'
		Update-Display ''
		$FirstRun = @{ "FirstRun" = "$($true)" }
		$NewINIContent = @{ "Settings" = $FirstRun }
		Out-IniFile -InputObject $NewINIContent -FilePath ".\PEQConfig.ini" -Force
	}
	$cores = Get-WmiObject -class Win32_processor | Select-Object systemname, Name, DeviceID, NumberOfCores, NumberOfLogicalProcessors
	$labelCPU.Text = "CPU: $($cores.Name)"
	$labelCores.Text = "Cores: $($cores.NumberOfCores)"
	$labelLogicalProcessors.Text = "Logical Processors: $($cores.NumberOfLogicalProcessors)"
	#$labelRunningEQInstances.Text = "Running EQ Processes:  $($RunningEQTitles.Count)"
	#$((get-process -Name eqgame).count)
	if ($checkboxAutoStart.Checked)
	{
		$buttonStartJob.PerformClick()
		$buttonStartJob2.PerformClick()
	}
	
}

$buttonBrowse_Click = {
	$openfiledialog1.Title = "Open Toons.CSV"
	#$openfiledialog1.InitialDirectory = $share
	#$openfiledialog1.DefaultExt = "CSV"
	$openfiledialog1.Filter = "CSV (*.csv)|*.CSV|All files (*.*)|*.*"
	if ($openfiledialog1.ShowDialog() -eq 'OK')
	{
		
		$toonsFile.Text = $openfiledialog1.FileName
		
	}
}

$toonsFile_TextChanged = {
	button-check
}

$buttonBuildShortcuts_Click = {
	buttondown
	if ($FirstRun -eq $false)
	{
		$richtextbox1.Clear()
	}
	$ini = @()
	$toons = Import-Csv -Path $toonsFile.Text #Toons CSV location
	foreach ($toon in $toons)
	{
		if ($toon.Login -ne '')
		{
			$ini += [pscustomobject]@{
				Login = $toon.Login.Trim()
				Server = $toon.Server.Trim()
				Character = $toon.Character.Trim()
				EQPath = $toon.EQPath.Trim()
			}
		}
	}
	
	if (-not ($ShortcutsFolder.Text.EndsWith('\')))
	{
		$ShortcutsFolder.Text = $shortcutsFolder.Text + '\'
	}
	
	Update-Display "Building Shortcuts..." -color 'Orange'
	foreach ($i in $ini)
	{
		$TargetPathExe = $i.EQPath + '\eqgame.exe'
		$Arguments = "patchme /login:$($i.Login)"
		$ShortcutName = $i.Character + '.lnk'
		$WorkingDirectory = $i.EQPath
		#$Description = ''
		
		#$FullLink = $ShortcutsPath + $Shortcut
		$Shell = New-Object -ComObject ("WScript.Shell")
		$ShortCut = $Shell.CreateShortcut($ShortcutsFolder.Text + $ShortcutName)
		$ShortCut.TargetPath = $TargetPathExe #"yourexecutable.exe"
		$ShortCut.Arguments = $Arguments #$Arguments #"-arguementsifrequired"
		$ShortCut.WorkingDirectory = $WorkingDirectory #"c:\your\executable\folder\path";
		#$ShortCut.WindowStyle = 1;
		#$ShortCut.Hotkey = "CTRL+SHIFT+F";
		#$ShortCut.IconLocation = "yourexecutable.exe, 0";
		#$ShortCut.Description = $Description #"Your Custom Shortcut Description";
		$ShortCut.Save()
	}
	Update-Display "Finished Building Shortcuts!" -color 'Green'
	Update-Display "Shortcuts saved to:" -color 'Orange'
	Update-Display "File:///$($ShortcutsFolder.Text)"
	$buttonBuildAutoHotKey.Enabled = $true
	
	buttonup
	
}

$buttonBuildAutoHotKey_Click = {
	buttondown
	if ($FirstRun -eq $false)
	{
		$richtextbox1.Clear()
	}
	$shortcuts = Get-ChildItem -Path $shortcutsFolder.Text -filter "*.lnk" #New shortcuts folder
	$toons = Import-Csv -Path $toonsFile.Text #Toons CSV location
	$ini = @()
	foreach ($toon in $toons)
	{
		if ($toon.Login -ne '')
		{
			$ini += [pscustomobject]@{
				Login = $toon.Login.Trim()
				Server = $toon.Server.Trim()
				Character = $toon.Character.Trim()
				EQPath = $toon.EQPath.Trim()
			}
		}
	}
	$lines = @()
	if ($shortcuts) #only run if $shortcuts contains data
	{
		$richtextbox1.Clear()
		#reorder to match toons spreadsheet order
		foreach ($i in $ini)
		{
			foreach ($s in $shortcuts)
			{
				if ($s.BaseName -eq $i.Character)
				{
					$lines += [PSCustomObject] @{
						FullName = $s.FullName
						Name	 = $s.BaseName
					}
				}
			}
		}
		Clear-Host
		#Build AutoHotKey
		Update-Display 'Note: This is only one example - There are many ways to customize how you start up your army.  Please see the forums more.' -color 'Yellow'
		Update-Display '----Copy/Paste lines below into AutoHotKey script----' -color 'Orange'
		$list = @()
		$list += '#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.'
		$list += '#Warn  ; Recommended for catching common errors.'
		$list += 'SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.'
		$list += 'SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.'
		$list += 'SetTitleMatchMode 3'
		$list += 'SetTitleMatchMode, Fast'
		$list += ''
		foreach ($l in $lines)
		{
			$list += 'Run ' + $($l.FullName)
			$list += 'WinWaitActive, EverQuest'
			#$list += 'WinSetTitle, ' + $($l.Name)
			$list += ''
		}
		Update-Display $list
		Update-Display '----Copy/Paste lines above into AutoHotKey script----' -color 'Orange'
	}
	else
	{
		Update-Display "Shortcuts folder is empty or not found.  Please create EQ shortcuts and try again." -color 'Yellow'
	}
	
	buttonup
}

$buttonBuildMQ2AutoLogin_Click = {
	buttondown
	if ($FirstRun -eq $false)
	{
		$richtextbox1.Clear()
	}
	$toons = Import-Csv -Path $toonsFile.Text #Toons CSV location
	$ini = @()
	foreach ($toon in $toons)
	{
		if ($toon.Login -ne '')
		{
			$ini += [pscustomobject]@{
				Login = '[' + $toon.Login.Trim() + ']'
				Password = 'Password=' + 'MYPASSWORD'
				Server = 'Server=' + $toon.Server.Trim()
				Character = 'Character=' + $toon.Character.Trim()
				EQPath = 'EQPath=' + $toon.EQPath.Trim()
			}
		}
	}
	Clear-Host
	Update-Display 'Note: This is only an example - these settings can be customized to your liking.  Make sure you link your game accounts on http://www.projecteq.net.' -color 'Yellow'
	Update-Display '----Copy/Paste lines below into MQ2AutoLogon.ini.  Make sure to set your password.----' -color 'Orange'
	Update-Display '[Settings]'
	Update-Display 'UseStationNamesInsteadOfSessions=1'
	Update-Display 'KickActiveCharacter=1'
	Update-Display 'KickActiveTrader=1'
	Update-Display 'Debug=0'
	Update-Display 'UseAuth=0'
	Update-Display 'UseMQ2Login=0'
	Update-Display '[Servers]'
	Update-Display "$($toon.Server.Trim())=[PEQ] The Grand Creation - Omens of War"
	Update-Display ''
	$list2 = @()
	$list2 += ''
	foreach ($i in $ini)
	{
		$list2 += $i.Login
		$list2 += $i.Password
		$list2 += $i.Server
		$list2 += $i.Character
		$list2 += $i.EQPath
		$list2 += ''
	}
	Update-Display $list2
	Update-Display '----Copy/Paste lines above into MQ2AutoLogon.ini----' -color 'Orange'
	
	buttonup
}

$buttonBuildSampleTOONSCSV_Click = {
	buttondown
	if ($FirstRun -eq $false)
	{
		$richtextbox1.Clear()
	}
	$nums = 1 .. 12
	$classes = @"
ber
brd
clr
dru
enc
mag
mnk
rng
rog
shm
war
wiz
"@
	$class = ($classes -split "`n").Trim()	
	$ini = @()
	foreach ($n in $nums)
	{
		$n		
		if ($n -eq 7) #Adds a blank line
		{
			$ini += [pscustomobject]@{
				Login	  = ''
				Server    = ''
				Character = ''
				EQPath    = ''
				Class	  = ''
				Group     = ''
			}
		}
		$ini += [pscustomobject]@{
			Login = 'Login' + $n
			Server = 'ProjectEQ'
			Character = 'ToonName' + $n
			EQPath = 'C:\Users\user\Desktop\RoF2\Everquest'
			Class = $class[$n - 1]
			Group = if ($n -le 6) {1} else {2}
		}
		
	}
	$savefiledialog1.Title = "Save Sample TOONS.CSV"
	#$openfiledialog1.InitialDirectory = $share
	#$openfiledialog1.DefaultExt = "CSV"
	$savefiledialog1.Filter = "CSV (*.csv)|*.CSV|All files (*.*)|*.*"
	$savefiledialog1.FileName = 'Toons-Sample.csv'
	if ($savefiledialog1.ShowDialog() -eq 'OK')
	{
		Update-Display "Exporting to CSV..." -color 'Orange'
		$ini | Export-Csv -path $savefiledialog1.FileName -Delimiter "," -NoTypeInformation
		Update-Display "File saved to:" -color 'Orange'
		Update-Display "File:///$($savefiledialog1.Filename)"
		
	}
	else
	{
		Update-Display 'Operation Cancelled' -color 'Red'
	}
	
	buttonup
	
}

$richtextbox1_LinkClicked = [System.Windows.Forms.LinkClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.LinkClickedEventArgs]
	Start-Process -FilePath $_.LinkText #make links clickable
	
}

$buttonCPUAffinity_Click = {
	buttondown
	$richtextbox1.Clear()
	$EQRunning = get-process -Name eqgame | Select-Object -ExpandProperty MainWindowTitle
	if ($EQRunning -ne $null)
	{
		Update-Display 'Setting CPU affinity for all running Everquest processes...' -color 'Orange'
		Start-Sleep -Seconds 1
		$LogicalProcessors = ((Get-WmiObject -class Win32_processor).NumberOfLogicalProcessors)
		[int32]$ProcAffinity = [math]::pow(2, $LogicalProcessors) - 1 #Forumla for processor affinity: a(n) = 2^n - 1
		$process = GET-PROCESS eqgame
		foreach ($i in $process)
		{
			$i.ProcessorAffinity = $ProcAffinity
			if ($i.ProcessorAffinity -eq $ProcAffinity)
			{
				Update-Display "$($i.MainWindowTitle) set to affinity" -color 'Green'
			}
			else
			{
				Update-Display "$($i.MainWindowTitle) not set to affinity" -color 'Red'
			}
		}
	}
	else
	{
		Update-Display 'Everquest is not running' -color 'Yellow'
	}
	buttonup
}

$buttonKillAllEQ_Click = {
	buttondown
	$richtextbox1.Clear()
	$EQRunning = get-process -Name eqgame | Select-Object -ExpandProperty MainWindowTitle
	if ($EQRunning -ne $null)
	{
		if ((Show-MsgBox -title "Kill all Everquest Processes" -prompt "Are you sure`?" -Icon Exclamation -BoxType YesNo) -eq "Yes")
		{
			Update-Display 'Killing all Everquest processes...' -color 'Orange'
			Start-Sleep -Seconds 1
			taskkill /f /t /im eqgame.exe
		}
		
	}
	else
	{
		Update-Display 'Everquest is not running' -color 'Yellow'
	}
	buttonup
}

$buttonstartMissingToons_Click = {
	buttondown
	$richtextbox1.Clear()
	$EQNotRunningShortcuts = @()
	$list = @()
	$MissingToons = @()
	$EQRunning = get-process -Name eqgame | Select-Object -ExpandProperty MainWindowTitle
	if ($EQRunning -ne $null)
	{
		$Shortcuts = Get-ChildItem -Path $ShortcutsFolder.Text -File
		foreach ($S in $Shortcuts)
		{
			$list += $S.BaseName
		}
		$EQNotRunning = (Compare-Object -ReferenceObject $EQRunning -DifferenceObject $list).InputObject | Sort-Object
		
		foreach ($Shortcut in $Shortcuts)
		{
			if ($EQNotRunning -contains $Shortcut.BaseName)
			{
				Update-Display "$($Shortcut.BaseName) Not Running" -color 'Yellow'
				$EQNotRunningShortcuts += $Shortcut
				
			}
		}
		#Build AutoHotKey
		$AHKTopLines = @"
#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
#Warn  ; Recommended for catching common errors.
SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.

"@
		
		$MissingToons = foreach ($EQNotRunningShortcut in $EQNotRunningShortcuts)
		{
			'Run ' + $EQNotRunningShortcut.FullName
			'WinWaitActive, EverQuest'
			'WinSetTitle, ' + $EQNotRunningShortcut.Name
			''
		}
		if (-not ($EQNotRunningShortcuts))
		{
			Update-Display 'No missing toons found' -color 'Green'
		}
		else
		{
			$AHKTopLines | Out-File $ENV:TEMP\missing.AHK
			$MissingToons | Out-File $ENV:TEMP\missing.AHK -Append
			Start-Sleep -Seconds 2
			Update-Display 'Re-starting missing toons' -color 'Green'
			Start-Process $ENV:TEMP\missing.AHK
		}
		
	}
	elseif ($EQRunning -eq $null)
	{
		Update-Display 'Everquest is not running' -color 'Yellow'
	}
	else
	{
		Update-Display 'No missing toons found' -color 'Green'
	}
	buttonup
}

$buttonBrowseFolder_Click = {
	if ($folderbrowserdialog4.ShowDialog() -eq 'OK')
	{
		$ShortcutsFolder.Text = $folderbrowserdialog4.SelectedPath + '\'
	}
}

$ShortcutsFolder_TextChanged = {
	button-check
	
}

<#
$buttonRemoveAndSaveOkExitS_Click = {
	buttondown
	if ($FirstRun -eq $false)
	{
		$richtextbox1.Clear()
	}
	$currentPWD = Convert-path (get-location)
	Update-Display "Saving PEQConfig.ini to:" -color 'Orange'
	Update-Display "File:///$currentPWD"
	Start-Sleep -Seconds 1
	$ToonsLocation = @{ "ToonsLocation" = "$($toonsFile.Text)" }
	$ShortcutsLocation = @{ "ShortcutsLocation" = "$($ShortcutsFolder.Text)" }
	$EQBCSFileLocation = @{ "EQBCSFileLocation" = "$($EQBCSFile.Text)" }
	$PollTime = @{ "PollTime" = "$($textbox2.Text)" }
	$NewINIContent = @{ "Paths" = $ToonsLocation + $ShortcutsLocation + $EQBCSFileLocation; "Settings" = $PollTime }
	Out-IniFile -InputObject $NewINIContent -FilePath ".\PEQConfig.ini" -Force
	buttonup
	
} #>

$aboutToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'About' -color 'Yellow'
	Update-Display "PEQ Configurator is designed to ease pre-configuration when working with multiple toons and accounts. A CSV file is needed along with an install of Everquest, MQ2, and logging enabled for EQBCS2.  All accounts should be pre-created on eqemulator. The CSV creation is a manual step but a sample is supplied to get you started. `n`
PEQ Configurator is provided as-is and without any warranty.  Feel free to modify the code and redistribute as desired.  `n`
Links:`
https://autohotkey.com/download/`
http://www.eqemulator.org/`
http://www.projecteq.net`
https://github.com/LotsofTimeSlices/Everquest`n`
Zuboo" -color 'Orange'	
	
}

$buttonEQClientiniReadOnly_Click = {
	buttondown
	$richtextbox1.Clear()
	$file = Get-ItemProperty $combobox1.SelectedItem
	if ($file.IsReadOnly -eq $true)
	{
		Update-Display "Removing read-only attribute from:" -color 'Orange'
		Update-Display "$file"
		Set-ItemProperty $file -name IsReadOnly -value $False
	}
	else
	{
		Update-Display "Setting read-only attribute for:" -color 'Orange'
		Update-Display "$file"
		Set-ItemProperty $file -name IsReadOnly -value $true
	}
	$file = Get-ItemProperty $combobox1.SelectedItem #get item-property and verify
	if ($file.IsReadOnly -eq $true)
	{
		Update-Display "$file is Read-Only" -color 'Yellow'
	}
	else
	{
		Update-Display "$file is not Read-Only" -color 'Green'
	}
	buttonup
	
}

#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]$ListView,
		[Parameter(Mandatory = $true)]
		[int]$ColumnIndex,
		[System.Windows.Forms.SortOrder]$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
	
	if ($Clear)
	{
		$ListView.Items.Clear();
	}
	
	$lvGroup = $null
	if ($Group -is [System.Windows.Forms.ListViewGroup])
	{
		$lvGroup = $Group
	}
	elseif ($Group -is [string])
	{
		#$lvGroup = $ListView.Group[$Group] # Case sensitive
		foreach ($groupItem in $ListView.Groups)
		{
			if ($groupItem.Name -eq $Group)
			{
				$lvGroup = $groupItem
				break
			}
		}
		
		if ($null -eq $lvGroup)
		{
			$lvGroup = $ListView.Groups.Add($Group, $Group)
		}
	}
	
	if ($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{
			$listitem = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if ($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if ($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if ($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if ($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	$ListBox.DisplayMember = $DisplayMember
	$ListBox.ValueMember = $ValueMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}
#endregion

$combobox1_Click = {
	$ini = @()
	$eqclientlist = @()
	$richtextbox1.Clear()
	if ($toonsFile.Text)
	{
		$toons = Import-Csv -Path $toonsFile.Text #Toons CSV location
		foreach ($toon in $toons)
		{
			if ($toon.Login -ne '')
			{
				$ini += [pscustomobject]@{
					Login = $toon.Login.Trim()
					Server = $toon.Server.Trim()
					Character = $toon.Character.Trim()
					EQPath = $toon.EQPath.Trim()
				}
			}
		}
		$comboData = $ini.EQPath | Select-Object -Unique
		foreach ($c in $comboData)
		{
			$eqclient = $c + '\eqclient.ini'
			$eqclientlist += $eqclient
			$file = Get-ItemProperty $eqclient
			if ($file.IsReadOnly -eq $true)
			{
				Update-Display "$file is Read-Only" -color 'Yellow'
			}
			else
			{
				Update-Display "$file is not Read-Only" -color 'Green'
			}
		}
		Update-ComboBox -ComboBox $combobox1 -Items $eqclientlist
		If ($combobox1.SelectedText -ne "")
		{
			$buttonEQClientiniReadOnly.Enabled = $true
		}
		else
		{
			$buttonEQClientiniReadOnly.Enabled = $false
		}
	}
	else
	{
		Update-Display "There seems to be a problem accessing toons.csv" -color 'Yellow'
		Update-ComboBox -ComboBox $combobox1 -Items ""
		$buttonEQClientiniReadOnly.Enabled = $false
	}
	
}

$combobox1_SelectedIndexChanged = {
	If ($combobox1.SelectedItem -ne "")
	{
		$buttonEQClientiniReadOnly.Enabled = $true
	}
	else
	{
		$buttonEQClientiniReadOnly.Enabled = $false
	}
	#$tooltip1.InitialDelay = "20" #make tooltip show very fast default is 500ms
	$tooltip1.SetToolTip($combobox1, $combobox1.SelectedItem)
}

$buttonTaskbarGroupingFix_Click = {
	buttondown
	Start-Sleep -Milliseconds 500
	$richtextbox1.Clear()
	if (Test-Path -Path Registry::HKEY_CLASSES_ROOT\Applications\eqgame.exe)
	{
		$RegValue = Get-ItemProperty -path Registry::HKEY_CLASSES_ROOT\Applications\eqgame.exe -Name IsHostApp
		if ($RegValue.IsHostApp -eq "")
		{
			Update-Display "Registry value IsHostApp already set - Aborting Operation." -color 'Yellow'
		}
		else
		{
			Update-Display "Setting registry value IsHostApp to null" -color 'Orange'
			Set-ItemProperty -path Registry::HKEY_CLASSES_ROOT\Applications\eqgame.exe -Name IsHostApp -Value "" -Type String
		}
		
	}
	else
	{
		Update-Display "HKEY_CLASSES_ROOT\Applications\eqgame.exe not found.  Aborting operation." -color 'Yellow'
	}
	buttonup
	
}

$buttonHungKickedProcesses_Click = {
	buttondown
	$richtextbox1.Clear()
	$script:Shortcut = $ShortcutsFolder.Text
	$script:EQBCS = $EQBCSFile.Text
	$Script:hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
	$Script:kickedEQ = get-process -Name eqgame | Where-Object { $_.MainWindowTitle -eq 'EverQuest' }
	if ((Show-HungProcess_psf) -eq 'OK')
	{
		
	}
	buttonup
}

$buttonEQMonitor_Click = {
	buttondown
	$richtextbox1.Clear()
	$EQRunning = get-process -Name eqgame
	Get-Process -Name powershell | Where-Object { $_.MainWindowTitle -eq 'Hung EQ Process Monitor' } | Stop-Process
	if ($EQRunning -ne $null)
	{
		if ($textbox2.Text -match '^[a-z]*$' -or $textbox2.Text -match ' ')
		{
			$textbox2.Clear()
			Update-Display 'Numbers only and no spaces please' -color 'yellow'
		}
		else
		{
			$timeout = $textbox2.Text
			Update-Display "A new window labeled `'Hung EQ Process Monitor`' will open (minimized).  It will check for hung EQ processes every $timeout seconds." -color 'Orange'
			Start-Process powershell -ArgumentList "-WindowStyle Minimized -command  & { 
    `$host.ui.RawUI.WindowTitle = 'Hung EQ Process Monitor'
    do {
        `$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
        `$hungTitles = `$hungEQ.MainWindowTitle
        `$hungTitleSelections = `$hungTitles
        if (`$hungEQ)
        {
            Write-Host 'Timeout 1st attempt: Sleeping $timeout seconds'
            Start-Sleep -Seconds $timeout                       
            `$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
            `$hungTitles = `$hungEQ.MainWindowTitle
            `$hungTitleSelections = `$hungTitles | Out-String
             if (`$hungEQ)
            {   
               	Write-Host 'Timeout 2nd attempt: Sleeping 15 Seconds'
                Start-Sleep -Seconds 15
				`$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
            	`$hungTitles = `$hungEQ.MainWindowTitle
            	`$hungTitleSelections = `$hungTitles | Out-String
                if (`$hungEQ)
                {   
                    write-host `$hungTitleSelections            
                    [System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms') | Out-Null 
                    [System.Windows.Forms.MessageBox]::Show(`$hungTitleSelections , 'Hung EQ Processes' , 'OK', 'Exclamation', 'Button1', 'DefaultDesktopOnly')           
                }
            }
        }
        }
        While (get-process -Name eqgame)
        }"
		}
		
		
	}
	else
	{
		Update-Display 'Everquest is not running' -color 'Yellow'
	}
	
	buttonup
	
}

$buttonFlagCheck_Click = {
	buttondown
	$richtextbox1.Clear()
	$count = ((Get-Content $EQBCSFile.Text | Where-Object { $_ -match 'flag' }) | Select-Object -Unique).count
	$flags = (Get-Content $EQBCSFile.Text | Where-Object { $_ -match 'flag' }) | Select-Object -Unique | Sort-Object
	
	$splittoons = @()
	foreach ($flag in $flags)
	{
		$split = $flag -split '>'
		$splittoons += [PSCustomObject] @{
			Toon = ($split[0] -replace '<', '').Trim()
		}
	}
	
	$reftoons = Get-Process -Name eqgame | Select-Object -ExpandProperty MainWindowTitle
	if ($reftoons)
	{
		$compare = Compare-Object -ReferenceObject ($reftoons.Trim()) -DifferenceObject ($splittoons.Toon) -IncludeEqual
		$missingFlag = $compare | Where-Object { $_.SideIndicator -eq '<=' }
		$gotFlag = $compare | Where-Object { $_.SideIndicator -eq '==' }
		$extraFlag = $compare | Where-Object { $_.SideIndicator -eq '=>' } #toon is likely running on another PC
	}
	Update-Display 'Make sure to turn on EQBCS logging' -color 'Orange'
	Update-Display 'EQBCS2.exe -l EQBCS2Log.txt' -color 'Orange'
	Update-Display '**Always clear EQBCS logs before next set of flags**' -color 'Orange'
	Update-Display ''
	Update-Display "Total Flag Count: $count" -color 'Yellow'
	Update-Display ""
	if ($missingFlag)
	{
		Update-Display '**Toons running on this computer who did not receive a flag**:' -color 'Orange'
		Update-Display $missingFlag.InputObject -color 'Yellow'
		Update-Display ""
	}
	if ($gotFlag)
	{
		Update-Display 'Toons running on this computer who received a flag:' -color 'Orange'
		Update-Display $gotFlag.InputObject -color 'Green'
		Update-Display ""
	}
	If ($extraFlag)
	{
		Update-Display 'Toons NOT running on this computer who received a flag:' -color 'Orange'
		Update-Display $extraFlag.InputObject -color 'Cyan'
		Update-Display ""
	}
	
	Update-Display 'All Flags:' -color 'Orange'
	Update-Display $flags -color 'Green'
	
	
	buttonup
}

$button_outputClear_Click = {
	buttondown
	$richtextbox1.Clear()
	buttonup
	
}

$buttonBrowse2_Click = {
	
	if ($openfiledialog5.ShowDialog() -eq 'OK')
	{
		$EQBCSFile.Text = $openfiledialog5.FileName
	}
}

$flagCheckToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'Flag Check' -color 'Yellow'
	Show-EQBCSHelp
	Update-Display 'Parses EQBCS log file.  Reports all flags and total count.  **Always clear EQBCS log for next set of flags**'
}

$eQCPUAffinityToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'EQ CPU Affinity' -color 'Yellow'
	Update-Display 'Forces all EQ processes to use all cores on your PC.'
}

$buildShortcutsToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'Build Shortcuts...' -color 'Yellow'
	Show-ToonsHelp
	Show-ShortcutsHelp
	Update-Display 'This will build all shortcuts based on toon names defined in the Toons.CSV file.'
	
}

$buildAutoHotKeyScriptToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'Build AutoHotKey Script' -color 'Yellow'
	Show-ToonsHelp
	Show-ShortcutsHelp
	Update-Display 'This will build a pre-configured AutoHotKey script which can be pasted into an .AHK file.'
}

$buildMQ2AutoLoginINIToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'Build MQ2AutoLogin INI' -color 'Yellow'
	Show-ToonsHelp
	Update-Display 'This will build the contents of an MQ2AutoLogon INI file which can be pasted into the file.  Plain text passwords are required for MQAutoLogon.INI.  Please edit the file and manually enter these.'
	
}

$buildSampleToonsCSVToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'Build Sample Toons CSV...' -color 'Yellow'
	Update-Display 'A sample Toons.CSV to get you started.  This is required to take full advantage of all of the features within PEQ Configurator.  Once you start adding more toons, a spreadsheet of some kind will make life much easier.  More columns can be added without affecting PEQ Configurator - Just make sure the base columns are always present.'
	
}

$eQClinitiniReadOnlyToggleToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'EQ Client.ini ReadOnly Toggle' -color 'Yellow'
	Show-ToonsHelp
	Update-Display 'The dropdown will report back the Read-Only status of EQClient.ini and the button will toggle it on/off.'
	
}

$taskBarGroupingFixToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'TaskBar Grouping Fix' -color 'Yellow'
	Update-Display 'You must be an administrator to use this feature.  Sets registry value to allow EQ Windows to be moved around independently on the taskbar.'
	
}

$EQBCSFile_TextChanged = {
	button-check
	
}

$firstRunTextToolStripMenuItem_Click = {
	$richtextbox1.Clear()
	Update-Display 'First Run Text' -color 'Yellow'
	Update-Display 'This looks like your first time running PEQ Config.  Please do the following:' -color 'Orange'
	Update-Display '1. Create a Toons.Csv File.  Use the Build Sample Toons.Csv to get started'
	Update-Display '2. Fill out the locations where each file/path lives'
	Update-Display '3. Click Build Shortcuts to create all shortcuts from Toons.Csv'
	Update-Display '4. (Optional/Example) Click Build AutoHotKey Script and paste into .AHK file'
	Update-Display '5. (Optional/Example) Click Build MQ2AutoLogin INI and paste into MQ2AutoLogin.ini'
	Update-Display '6. Make sure to Enable EQBCS Logging --> EQBCS2.exe -l EQBCS2Log.txt'
	Update-Display ''
	
}

$toonsFile_Click = {
	$toonsFile.SelectAll()
	
}

$ShortcutsFolder_Click = {
	$ShortcutsFolder.SelectAll()
	
}

$EQBCSFile_Click = {
	$EQBCSFile.SelectAll()
	
}

$Mainform_FormClosing = [System.Windows.Forms.FormClosingEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.FormClosingEventArgs]
	$currentPWD = Convert-path (get-location)
	#Update-Display "Saving PEQConfig.ini to:" -color 'Orange'
	#Update-Display "File:///$currentPWD"
	
	$ToonsLocation = @{ "ToonsLocation" = "$($toonsFile.Text)" }
	$ShortcutsLocation = @{ "ShortcutsLocation" = "$($ShortcutsFolder.Text)" }
	$EQBCSFileLocation = @{ "EQBCSFileLocation" = "$($EQBCSFile.Text)" }
	$HungPollTime = @{ "HungPollTime" = "$($textbox2.Text)" }
	$DisconnectedPollTime = @{ "DisconnectedPollTime" = "$($textbox1.Text)" }
	$AutoStart = @{ "AutoStart" = $checkboxAutoStart.CheckState }
	$DisplayPopup = @{ "DisplayPopup" = $checkboxDisplayPopup.CheckState }
	$MakeASound = @{ "MakeASound" = $checkboxMakeASound.CheckState }
	
	$NewINIContent = @{ "Paths" = $ToonsLocation + $ShortcutsLocation + $EQBCSFileLocation; "Settings" = $DisconnectedPollTime + $HungPollTime + $AutoStart + $DisplayPopup + $MakeASound }
	Out-IniFile -InputObject $NewINIContent -FilePath ".\PEQConfig.ini" -Force
}

$buttonNewEQMonitor_Click = {
	buttondown
	$richtextbox1.Clear()
	$EQRunning = get-process -Name eqgame
	Get-Process -Name powershell | Where-Object { $_.MainWindowTitle -eq 'Hung EQ Process Monitor' } | Stop-Process
	if ($EQRunning -ne $null)
	{
		if ($textbox2.Text -match '^[a-z]*$' -or $textbox2.Text -match ' ')
		{
			$textbox2.Clear()
			Update-Display 'Numbers only and no spaces please' -color 'yellow'
		}
		else
		{
			$timeout = $textbox2.Text
			Update-Display "A new window labeled `'Hung EQ Process Monitor`' will open (minimized).  It will check for hung EQ processes every $timeout seconds." -color 'Orange'
			Start-Process powershell -ArgumentList "-WindowStyle Minimized -command  & { 
    `$host.ui.RawUI.WindowTitle = 'Hung EQ Process Monitor'
    do {
        `$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
        `$hungTitles = `$hungEQ.MainWindowTitle
        `$hungTitleSelections = `$hungTitles
        if (`$hungEQ)
        {
            Write-Host 'Timeout 1st attempt: Sleeping $timeout seconds'
            Start-Sleep -Seconds $timeout                       
            `$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
            `$hungTitles = `$hungEQ.MainWindowTitle
            `$hungTitleSelections = `$hungTitles | Out-String
             if (`$hungEQ)
            {   
               	Write-Host 'Timeout 2nd attempt: Sleeping 15 Seconds'
                Start-Sleep -Seconds 15
				`$hungEQ = get-process -Name eqgame | Where-Object {`$_.Responding -eq `$false}
            	`$hungTitles = `$hungEQ.MainWindowTitle
            	`$hungTitleSelections = `$hungTitles | Out-String
                if (`$hungEQ)
                {   
                    write-host `$hungTitleSelections            
                    [System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms') | Out-Null 
                    [System.Windows.Forms.MessageBox]::Show(`$hungTitleSelections , 'Hung EQ Processes' , 'OK', 'Exclamation', 'Button1', 'DefaultDesktopOnly')           
                }
            }
        }
        }
        While (get-process -Name eqgame)
        }"
		}
		
		
	}
	else
	{
		Update-Display 'Everquest is not running' -color 'Yellow'
	}
	
	buttonup
	
	
}

$buttonStartJob_Click = {
	$buttonStartJob.Enabled = $false
	$richtextbox1.Clear()
	$timeout = $textbox2.Text
	#Create a New Job using the Job Tracker
	$paramAddJobTracker = @{
		Name	  = 'EQMonitor'
		JobScript = {
			#--------------------------------------------------
			#TODO: Set a script block
			#Important: Do not access form controls from this script block.			
			Param ($TimeOutArgument) #Pass any arguments using the ArgumentList parameter			
			#for ($i = 0; $i -lt 50; $i++) { Start-Sleep -Milliseconds 100 }
			$FirstTimeout = $TimeOutArgument * (2/3)
			$SecondTimeout = $TimeOutArgument * (1/3)
			$EQRunning = get-process -Name eqgame
			do
			{
				$hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
				$hungTitles = $hungEQ.MainWindowTitle
				#$hungTitleSelections = $hungTitles
				if ($hungEQ)
				{
					#Write-Host "Timeout 1st attempt: Sleeping  2/3 of $TimeOutArgument seconds"
					Start-Sleep -Seconds $FirstTimeout
					$hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
					$hungTitles = $hungEQ.MainWindowTitle
					#$hungTitleSelections = $hungTitles | Out-String
					if ($hungEQ)
					{
						#Write-Host 'Timeout 2nd attempt: Sleeping 1/3 of $TimeOutArgument seconds'
						Start-Sleep -Seconds $SecondTimeout
						$hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
						#$hungTitles = $hungEQ.MainWindowTitle
						$hungTitles = $hungEQ | Select-Object @{ N = 'Title'; E = { $_.MainWindowTitle } }, Id, @{ N = 'Status'; E = { 'Hung' } }
						#$hungTitleSelections = $hungTitles | Out-String
						if ($hungEQ)
						{
							Write-Output $hungTitles
							#[System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms') | Out-Null
							#[System.Windows.Forms.MessageBox]::Show($hungTitleSelections, 'Hung EQ Processes', 'OK', 'Exclamation', 'Button1', 'DefaultDesktopOnly')
						}
					}
				}
			}
			While (get-process -Name PEQConfig)
			Start-Sleep -Milliseconds 100
			#--------------------------------------------------
		}
		ArgumentList = $timeout
		CompletedScript = {
			Param ([System.Management.Automation.Job]$Job)
			#$results = Receive-Job -Job $Job 
			#Enable the Button
			$buttonStartJob.ImageIndex = -1
			$buttonStartJob.Enabled = $true
			
		}
		UpdateScript = {
			Param ([System.Management.Automation.Job]$Job)
			#-------------------------------------------------
			#Get partial Results here			
			$results = Receive-Job -Job $Job #-Keep			
			if ($listview1.Items.Count -eq 0)
			{
				foreach ($h in $results)
				{
					Add-ListViewItem -ListView $listview1 -Items $h.ID -SubItems $h.Title, $h.Status
				}
				$a++
				if ($a -eq 1) #Trigger only once per group of hung processes
				{
					Make-Sound
					Show-Popup					
				}
			}
			else
			{
				$ListboxIDs = @()
				foreach ($l in $listview1.Items | Where-Object { $_.SubItems[2].Text -match 'Hung' }) #Will only search hung items
				{
					$ListboxIDs += $l.text
				}
				foreach ($r in $results)
				{
					if ($ListboxIDs -contains $r.ID)
					{
						#Update-Display "Listbox matches $($r.ID)"
					}
					else
					{
						#Update-Display 'Adding to ListView'
						Add-ListViewItem -ListView $listview1 -Items $r.ID -SubItems $r.Title, $r.Status
						$a++
						if ($a -eq 1) #Trigger only once per group of hung processes
						{
							Make-Sound
							Show-Popup							
						}
						
					}
					
				}
			}
			$listViewItems = $listview1.Items | Where-Object {$_.SubItems[2].Text -match 'Disconnected'}
			foreach ($l in $ListboxIDs) #Verify Processes are still hung
			{
				if (get-process -id $l | Where-Object { $_.Responding -eq $true })
				{
					Update-Display "Process $l is no longer hung" -color 'Orange'
					$ListView1.Items.Clear() ##<--This does work.  $listview1.Clear() does not work					
					$NowRunning = $true
				}
			}
			if ($NowRunning) #Repop listview
			{
				$hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
				$hungTitles = $hungEQ | Select-Object @{ N = 'Title'; E = { $_.MainWindowTitle } }, Id, @{ N = 'Status'; E = { 'Hung' } }
				foreach ($h in $hungTitles)
				{
					Add-ListViewItem -ListView $listview1 -Items $h.ID -SubItems $h.Title, $h.Status
				}
				foreach ($LvItem in $listViewItems) #add Disconnected items back to list
				{
					Add-ListViewItem -ListView $listview1 -Items $LvItem.SubItems[0].Text -SubItems $LvItem.SubItems[1].Text, $LvItem.SubItems[2].Text					
				}
				$NowRunning = $false
			}
			
			#-------------------------------------------------
			#Animate the Button
			if ($null -ne $buttonStartJob.ImageList)
			{
				if ($buttonStartJob.ImageIndex -lt $buttonStartJob.ImageList.Images.Count - 1)
				{
					$buttonStartJob.ImageIndex += 1
				}
				else
				{
					$buttonStartJob.ImageIndex = 0
				}
			}
		}
	}
	
	Add-JobTracker @paramAddJobTracker
}

$jobTracker_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
	#Stop any pending jobs
	Stop-JobTracker
}
#Append the event to the form
#$MainForm.add_FormClosed($jobTracker_FormClosed) #Why is there here?

$timerJobTracker_Tick = {
	Update-JobTracker
}

#region Job Tracker
$JobTrackerList = New-Object System.Collections.ArrayList
function Add-JobTracker
{
	<#
		.SYNOPSIS
			Add a new job to the JobTracker and starts the timer.
	
		.DESCRIPTION
			Add a new job to the JobTracker and starts the timer.
	
		.PARAMETER  Name
			The name to assign to the job.
	
		.PARAMETER  JobScript
			The script block that the job will be performing.
			Important: Do not access form controls from this script block.
	
		.PARAMETER ArgumentList
			The arguments to pass to the job.
		.PARAMETER  CompletedScript
			The script block that will be called when the job is complete.
			The job is passed as an argument. The Job argument is null when the job fails.
	
		.PARAMETER  UpdateScript
			The script block that will be called each time the timer ticks.
			The job is passed as an argument. Use this to get the Job's progress.
	
		.EXAMPLE
			Add-JobTracker -Name 'JobName' `
			-JobScript {	
				Param($Argument1)#Pass any arguments using the ArgumentList parameter
				#Important: Do not access form controls from this script block.
				Get-WmiObject Win32_Process -Namespace "root\CIMV2"
			}`
			-CompletedScript {
				Param($Job)		
				$results = Receive-Job -Job $Job
			}`
			-UpdateScript {
				Param($Job)
				#$results = Receive-Job -Job $Job -Keep
			}
	
		.LINK
			
	#>
	
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[string]$Name,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[ScriptBlock]$JobScript,
		$ArgumentList = $null,
		[ScriptBlock]$CompletedScript,
		[ScriptBlock]$UpdateScript)
	
	#Start the Job
	$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
	
	if ($null -ne $job)
	{
		#Create a Custom Object to keep track of the Job & Script Blocks
		$members = @{
			'Job'		     = $Job;
			'CompleteScript' = $CompletedScript;
			'UpdateScript'   = $UpdateScript
		}
		
		$psObject = New-Object System.Management.Automation.PSObject -Property $members
		
		[void]$JobTrackerList.Add($psObject)
		
		#Start the Timer
		if (-not $timerJobTracker.Enabled)
		{
			$timerJobTracker.Start()
		}
	}
	elseif ($null -ne $CompletedScript)
	{
		#Failed
		Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
	}
	
}

function Update-JobTracker
{
	<#
		.SYNOPSIS
			Checks the status of each job on the list.
	#>
	
	#Poll the jobs for status updates
	$timerJobTracker.Stop() #Freeze the Timer
	
	for ($index = 0; $index -lt $JobTrackerList.Count; $index++)
	{
		$psObject = $JobTrackerList[$index]
		
		if ($null -ne $psObject)
		{
			if ($null -ne $psObject.Job)
			{
				if ($psObject.Job.State -eq 'Blocked')
				{
					#Try to unblock the job
					Receive-Job $psObject.Job | Out-Null
				}
				elseif ($psObject.Job.State -ne 'Running')
				{
					#Call the Complete Script Block
					if ($null -ne $psObject.CompleteScript)
					{
						#$results = Receive-Job -Job $psObject.Job
						Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
					}
					
					$JobTrackerList.RemoveAt($index)
					Remove-Job -Job $psObject.Job
					$index-- #Step back so we don't skip a job
				}
				elseif ($null -ne $psObject.UpdateScript)
				{
					#Call the Update Script Block
					Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
				}
			}
		}
		else
		{
			$JobTrackerList.RemoveAt($index)
			$index-- #Step back so we don't skip a job
		}
	}
	
	if ($JobTrackerList.Count -gt 0)
	{
		$timerJobTracker.Start() #Resume the timer
	}
}

function Stop-JobTracker
{
	<#
		.SYNOPSIS
			Stops and removes all Jobs from the list.
	#>
	#Stop the timer
	$timerJobTracker.Stop()
	
	#Remove all the jobs
	while ($JobTrackerList.Count -gt 0)
	{
		$job = $JobTrackerList[0].Job
		$JobTrackerList.RemoveAt(0)
		Stop-Job $job
		Remove-Job $job
	}
}
#endregion

$buttonStartJob2_Click = {
	
	$buttonStartJob2.Enabled = $false
	$EQBCSFile = $EQBCSFile.Text
	$ShortcutsFolder = $ShortcutsFolder.Text
	$DCtimeout = $textbox1.Text
	#Create a New Job using the Job Tracker
	$paramAddJobTracker = @{
		Name	  = 'EQMonitor2'
		JobScript = {
			#--------------------------------------------------
			#TODO: Set a script block
			#Important: Do not access form controls from this script block.
			
			Param ($EQBCSFileArg,
				$ShortcutsFolderArg,
				$DCtimeoutArg) #Pass any arguments using the ArgumentList parameter			
			#for ($i = 0; $i -lt 50; $i++) { Start-Sleep -Milliseconds 100 }
			#Watches EQBCS log file for disconnected users and reports them
			$alltoons = @()
			$restarttoons = @()
			$HasLeft = @()
			$HasLeftToons = @()
			$count = 0
			$Shortcuts = Get-ChildItem -Path $ShortcutsFolderArg -File
			foreach ($S in $Shortcuts)
			{
				$alltoons += $S.BaseName
			}
			
			$alltoons = $alltoons | Sort-Object
			
			#Read log file
			Do
			{
				#Write-Host "pass $count"
				$restarttoons = @()
				$HasLeft = @()
				$HasLeftToons = @()
				$line = @()
				$t = @()
				$h = @()
				$s = @()
				$content = Get-Content $EQBCSFileArg #Read logfile contents
				$a = 1
				$ArrayForEach = @(foreach ($line in $content) #Add Line numbers
					{
						"$a `t" + $line
						$a++
					})
				
				if ($ArrayForEach.count -lt $LastLineNumber)
				{
					#Write-Warning 'EQBCS has been likely been restarted'
					#Write-Host 'Resetting line count' -ForegroundColor Yellow
					$count = 0
				}
				if ($count -eq 0) #first pass - get last line - Skips any previous log information
				{
					$LastOne = ($ArrayForEach | Select-Object -Last 1)
					$LastLineNumber = ($ArrayForEach | Where-Object { $_ -eq $LastOne }).Split("`t")[0]
					#Write-Host "Beginning on Line $($ArrayForEach.Count) - Should only see this once" -ForegroundColor Cyan
				}
				else
				{
					#write-host "Line count $($ArrayForEach.Count)" -ForegroundColor Cyan
				}
				
				Try #gets any new lines after $lastmatch #Select-String is buggy
				{
					#$ArrayForEach = $ArrayForEach | Select-String $lastmatch -Context 0, 1000000 | ForEach-Object { $_.Context.PostContext }
					#Write-Host 'Select String'
					$ArrayCount = 1
					$NewArrayForEach = @(foreach ($array in $ArrayForEach)
						{
							if ($ArrayCount -gt $LastLineNumber) #if ($a -ge $($ArrayForEach.Count))
							{
								$Array
							}
							$ArrayCount++
						})
				}
				catch
				{
					Write-Warning 'Error $arrayForEach'
				}
								
				#region CheckHasLeft
				$HasLeft = @(foreach ($line in $NewArrayForEach)
					{
						if ($line -match 'has left the server.')
						{
							$line
						}
					})
				
				#Get has left toons
				$HasLeftToons = @(foreach ($t in $HasLeft)
					{
						
						$t.split(' ')[2]
						
					})
				
				$HasLeftToons = $HasLeftToons | Select-Object -Unique
				#$HasLeftToons
				#endregion CheckHasLeft
				
				#region ReportKickedToons
				if ($HasLeftToons.count -ge 1)
				{
					foreach ($h in $HasLeftToons)
					{
						#Write-Warning 'Kicked toons detected:'
						<#
						foreach ($s in $Shortcuts)
						{
							if ($s.BaseName -match $h)
							{
								Write-Output "$($s.BaseName)"								
							}
						}
						#>
						$DisconnectedEQ = get-process -Name eqgame | Where-Object { $_.MainWindowTitle -eq $h }
						$DisconnectedTitles = $DisconnectedEQ | Select-Object @{ N = 'Title'; E = { $_.MainWindowTitle } }, Id, @{ N = 'Status'; E = { 'Disconnected' } }
						Write-Output $DisconnectedTitles
					}
				}
				else
				{
					#write-host 'No disconnected toons detected' -ForegroundColor Green
				}
				#endregion ReportKickedToons
				
				
				if ($NewArrayForEach -ne $null) #Update $lastmatch if $arrayforeach contains new data
				{
					#$lastmatch = ($ArrayForEach | Select-Object -Last 1)
					$LastOne = ($NewArrayForEach | Select-Object -Last 1)
					$LastLineNumber = ($NewArrayForEach | Where-Object { $_ -eq $LastOne }).Split("`t")[0]
					
				}
				#Write-Host "Last line: $LastOne"
				#Write-Host ''
				Start-Sleep -Seconds $DCtimeoutArg
				$count++
			}
			While (get-process -Name PEQConfig)
			#--------------------------------------------------
		}
		ArgumentList = $EQBCSFile, $ShortcutsFolder, $DCtimeout
		CompletedScript = {
			Param ([System.Management.Automation.Job]$Job)
			#$results = Receive-Job -Job $Job 
			#Enable the Button
			$buttonStartJob2.ImageIndex = -1
			$buttonStartJob2.Enabled = $true
		}
		UpdateScript = {
			Param ([System.Management.Automation.Job]$Job)
			#-------------------------------------------------
			#Get partial Results here
			$results = Receive-Job -Job $Job #-Keep
			if ($listview1.Items.Count -eq 0)
			{
				foreach ($h in $results)
				{
					Add-ListViewItem -ListView $listview1 -Items $h.ID -SubItems $h.Title, $h.Status
					$a++
					if ($a -eq 1) #Trigger only once per group of hung processes
					{
						Make-Sound
						Show-Popup						
					}
				}
			}
			else
			{
				$ListboxIDs = @()
				foreach ($l in $listview1.Items)
				{
					$ListboxIDs += $l.text
				}
				foreach ($r in $results)
				{
					if ($ListboxIDs -contains $r.ID)
					{
						#Update-Display "Listbox matches $($r.ID)"
					}
					else
					{
						#Update-Display 'Adding to ListView'
						Add-ListViewItem -ListView $listview1 -Items $r.ID -SubItems $r.Title, $r.Status
						$a++
						if ($a -eq 1) #Trigger only once per group of hung processes
						{
							Make-Sound
							Show-Popup							
						}
					}
				}
			}
			
			<#
			foreach ($l in $ListboxIDs) #Verify Processes are still hung
			{
				if (get-process -id $l | Where-Object { $_.Responding -eq $true })
				{
					Update-Display "Process $l is no longer hung" -color 'yellow'
					$ListView1.Items.Clear() ##<--This does work.  $listview1.Clear() does not work					
					$NowRunning = $true
				}
			}
			if ($NowRunning) #Repop listview
			{
				$hungEQ = get-process -Name eqgame | Where-Object { $_.Responding -eq $false }
				$hungTitles = $hungEQ | Select-Object @{ N = 'Title'; E = { $_.MainWindowTitle } }, Id, @{ N = 'Status'; E = { 'Hung' } }
				foreach ($h in $hungTitles)
				{
					Add-ListViewItem -ListView $listview1 -Items $h.ID -SubItems $h.Title, $h.Status
				}
				$NowRunning = $false
			}#>
			#-------------------------------------------------
			#Animate the Button
			if ($null -ne $buttonStartJob2.ImageList)
			{
				if ($buttonStartJob2.ImageIndex -lt $buttonStartJob2.ImageList.Images.Count - 1)
				{
					$buttonStartJob2.ImageIndex += 1
				}
				else
				{
					$buttonStartJob2.ImageIndex = 0
				}
			}
		}
	}
	
	Add-JobTracker @paramAddJobTracker
}

$buttonStopMonitors_Click = {
	buttondown
	Stop-JobTracker
	#$results = Receive-Job -Job $Job 
	#Enable the Button
	$buttonStartJob.ImageIndex = -1
	$buttonStartJob.Enabled = $true
	$buttonStartJob2.ImageIndex = -1
	$buttonStartJob2.Enabled = $true
	buttonup
	
}


$buttonKillAndRestartAll_Click={
	buttondown
	$richtextbox1.Clear()
	if ($listview1.Items.Count -gt 0)
	{
		if ((Show-MsgBox -Prompt 'Are you sure?' -Title 'Kill All' -icon Exclamation -BoxType YesNo) -eq 'Yes')
		{
			#region Get-RestartList
			$RestartAll = @()
			$RestartTitles = $listview1.Items
			foreach ($l in $RestartTitles)
			{
				$RestartAll += $l.SubItems[1].Text
			}
			#endregion Get-RestartList
			#region Kill-Process
			foreach ($l in $listview1.Items)
			{
				Update-Display 'Killing all hung/disconnected processes' -color 'Yellow'
				Get-Process -id $l.Text | Stop-Process
				$l.Remove()
				Start-Sleep -Milliseconds 350
			}
			#endregion Kill-Process
			#region Restart-Items
			$Shortcuts = Get-ChildItem -Path $ShortcutsFolder.Text -File
			foreach ($s in $Shortcuts)
			{
				foreach ($r in $RestartAll)
				{
					if ($r -match $s.BaseName)
					{
						Invoke-Item $s.FullName
						Start-Sleep -Seconds 5
					}
				}
			}
			#endregion Restart-Items
			
		}
	}
	else
	{
		Update-Display 'No disconnected or hung sessions listed' -color 'Yellow'
	}
	buttonup
	
}

$buttonKillAndRestartSelect_Click= {
	buttondown
	$richtextbox1.Clear()
	if ($listview1.Items.Count -gt 0)
	{
		if ((Show-MsgBox -Prompt 'Are you sure?' -Title 'Kill Selected' -icon Exclamation -BoxType YesNo) -eq 'Yes')
		{
			#region Get-RestartList
			$RestartAll = @()
			$RestartTitles = $listview1.SelectedItems
			foreach ($l in $RestartTitles)
			{
				$RestartAll += $l.SubItems[1].Text
			}
			#endregion Get-RestartList
			#region Kill-Process
			foreach ($l in $listview1.SelectedItems)
			{
				Update-Display "Killing selected process $($l.Text)" -color 'Yellow'
				Get-Process -id $l.Text | Stop-Process
				$l.Remove()
				Start-Sleep -Milliseconds 350
			}
			#endregion Kill-Process
			#region Restart-Items
			$Shortcuts = Get-ChildItem -Path $ShortcutsFolder.Text -File
			foreach ($s in $Shortcuts)
			{
				foreach ($r in $RestartAll)
				{
					if ($r -match $s.BaseName)
					{
						Invoke-Item $s.FullName
						Start-Sleep -Seconds 5
					}
				}
			}
			#endregion Restart-Items
		}
	}
	else
	{
		Update-Display 'No disconnected or hung sessions listed' -color 'Yellow'
	}
	buttonup
}

$button1_Click={
	$ListView1.Items.Clear()
	
}


$buttonClearEQBCS_Click={
	buttondown
	if (Test-Path (Join-Path $(Split-Path $EQBCSFile.Text) eqbcs2.exe) -PathType Leaf)
	{
		#$EQBCSLeaf = (Split-Path C:\users\elation\Desktop\RoF2\E3_RoF2\EQBCS2Log.txt -Leaf)
		#$EQBCSNewLog = (Join-Path $(Split-Path C:\users\elation\Desktop\RoF2\E3_RoF2\EQBCS2Log.txt) eqbcs2.exe) + ' -l ' + $EQBCSLeaf
		'Log cleared' | Out-File $EQBCSFile.Text -Encoding ascii -Force
	}
	buttonup
	
}

$restartMissingToonslegacyToolStripMenuItem_Click={
	$richtextbox1.Clear()
	Update-Display 'Restart Missing Toons' -color 'Yellow'
	Show-ShortcutsHelp
	Update-Display 'If a toon is missing, this will search your shortcuts folder, compare it to those running, and restart the missing toon.'
	
	
}

$eQMonitorlegacyToolStripMenuItem_Click={
	$richtextbox1.Clear()
	Update-Display 'EQ Process Monitor' -color 'Yellow'
	Update-Display 'Opens a separate, minimized PowerShell window that polls EQGame.exe every 30 seconds or specified custom time.  If an EQ process hangs, a popup will report it with the toon(s) that hung.  Lag, zoning, and other anomalies can cause false positives.  The window will close when all EQ processes are ended.'
	
	
}

$checkForHungKickedProcesseslegacyToolStripMenuItem_Click={
	$richtextbox1.Clear()
	Update-Display 'Check for Hung/Kicked Processes...' -color 'Yellow'
	Show-ShortcutsHelp
	Show-EQBCSHelp
	Update-Display 'Checks for hung or kicked EQ sessions and allows you to kill those processes.'
	Update-Display 'Checks if a character was kicked out of the game and MQ2 quit.  This usually results in the process name reverting back to EverQuest instead of the toon name.'
	Update-Display 'Allows you to manually check for toons that have been kicked to login, character select.  This requires an in-game /bcaa //bc <UniqueWord> to be used first.'
	
}

$eQMonitorToolStripMenuItem_Click={
	Update-Display 'Check for Hung/Disconnected EQ Processes...' -color 'Yellow'
	Show-ShortcutsHelp
	Show-EQBCSHelp
	Update-Display 'Checks for hung or disconnected EQ sessions and allows you to kill and restart them.  Timeouts can be customized.  The stop button stops both monitors.  Autostart will start both monitors on start of program.  Display Popup will show a popup for hung or disconnected toons.  Make a sound will play a sound for each hang or disconnect.  Kill and restart will kill any EQ process listed in the list view - either all or selected depending on which button is used.'	
	
}

$savefiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$changeLogToolStripMenuItem_Click={
	$richtextbox1.Clear()
	$ChangeLog = @"
3/8/2020 - PEQ Configurator
UPD:  Added Class and Group columns to Sample Toons.csv
UPD:  Updated help dropdown
UPD:  Added Change Log to help

1/25/2020 - PEQ Configurator
UPD: Added listview check for kill and restart buttons
UPD: Enabled legacy item Missing Toons
UPD: Updated help and tooltips
UPD: Minor UI and grammar changes
UPD: Updated version as major to reflect last change since it was mostly a re-write - v2.x
UPD: Moved Repo on GitHub

1/22/2020 - PEQ Configurator
Major update
UPD: Complete rewrite of process monitor
UPD: Reworked GUI and moved setup to last tab
UPD: Added check and reminder to fill out setup tab
UPD: Removed passwords column in Sample Toons.CSV (manual step)
UPD: Updated help to reflect changes
UPD: Added legacy tab and moved old code to it

7/24/2019 - PEQ Configurator
UPD: Updated EQ CPU Affinity to scale with all logical cores instead of 8 (value of 255)

6/28/2019 - PEQ Configurator
UPD: Updated Hung EQ Process Monitor. Added a second timeout to reduce false positives.

5/31/2019 - PEQ Configurator
FIX: Corrected issue where Restart Missing Toons button would not enable in Hung/Kicked Processes Window

5/25/2019 - PEQ Configurator
UPD: Cleaned up help structure, grammar and moved prereqs to re-usable functions
UPD: Added shortcut folder and EQBCS file location conditions to hung/kicked process buttons

5/22/2019 - PEQ Configurator
ADD: Added manual kicked toons check. For finding toons that have been kicked to login, character select, it's kind of cheesy but works.

4/20/2019 - PEQ Configurator
UPD: Poll time will now error on spaces as well any non-numeric characters
UPD: Poll time will no longer reset to 30 if EQ is not running

4/17/2019 - PEQ Configurator
UPD: Removed Quick Switch window
ADD: First run help
UPD: Added INI save for poll time
UPD: Rearranged buttons
UPD: Updated labels, descriptions, tooltips

1/28/2019 - PEQ Configurator
UPD: Added better filtering for Flag Check

1/26/2019 - PEQ Configurator
UPD: Added sort to flag check
UPD: Grayed out flag check if EQBCS file location is empty

1/26/2019 - PEQ Configurator
ADD: Flag Check
ADD: Help topics

1/25/2019 - PEQ Configurator
ADD: Added process count to Quick Switch
ADD: Added Clear Output button
UPD: Minor UI changes

1/20/2019 - PEQ Configurator
Created EQ process monitor to monitor and notify when an EQ process has become unresponsive. It opens a separate PowerShell window which will poll based time entered or a 30 second default.
Tweaked UI
Removed incorrect ToolTip
"@
	$Log = ($ChangeLog -split "`n").Trim()
	Update-Display 'Change Log' -color 'Yellow'
	Update-Display $Log
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>
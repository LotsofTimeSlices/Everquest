<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2019 v5.6.156
     Generated on:       1/29/2019 4:59 AM
     Generated by:       
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2019
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-QuickSwitch_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formEQSwitch = New-Object 'System.Windows.Forms.Form'
	$labelRunningEQInstances = New-Object 'System.Windows.Forms.Label'
	$listview1 = New-Object 'System.Windows.Forms.ListView'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$buttonQuickSwitchRefresh = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formEQSwitch_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	#region Control Helper Functions
	function Update-ListViewColumnSort
	{
	<#
		.SYNOPSIS
			Sort the ListView's item using the specified column.
		
		.DESCRIPTION
			Sort the ListView's item using the specified column.
			This function uses Add-Type to define a class that sort the items.
			The ListView's Tag property is used to keep track of the sorting.
		
		.PARAMETER ListView
			The ListView control to sort.
		
		.PARAMETER ColumnIndex
			The index of the column to use for sorting.
		
		.PARAMETER SortOrder
			The direction to sort the items. If not specified or set to None, it will toggle.
		
		.EXAMPLE
			Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListView]
			$ListView,
			[Parameter(Mandatory = $true)]
			[int]
			$ColumnIndex,
			[System.Windows.Forms.SortOrder]
			$SortOrder = 'None'
		)
		
		if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
		{
			return;
		}
		
		#region Define ListViewItemComparer
		try
		{
			[ListViewItemComparer] | Out-Null
		}
		catch
		{
			Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
		}
		#endregion
		
		if ($ListView.Tag -is [ListViewItemComparer])
		{
			#Toggle the Sort Order
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
				{
					$ListView.Tag.sortOrder = 'Descending'
				}
				else
				{
					$ListView.Tag.sortOrder = 'Ascending'
				}
			}
			else
			{
				$ListView.Tag.sortOrder = $SortOrder
			}
			
			$ListView.Tag.column = $ColumnIndex
			$ListView.Sort() #Sort the items
		}
		else
		{
			if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
			{
				$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
			}
			
			#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
			$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
			$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
		}
	}
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	#endregion
	
	#region Show-Process
	#https://community.idera.com/database-tools/powershell/powertips/b/tips/posts/bringing-window-in-the-foreground
	function Show-Process($Process, [Switch]$Maximize)
	{
		$sig = '
    [DllImport("user32.dll")] public static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);
    [DllImport("user32.dll")] public static extern int SetForegroundWindow(IntPtr hwnd);
  '
		
		if ($Maximize) { $Mode = 3 }
		else { $Mode = 4 }
		$type = Add-Type -MemberDefinition $sig -Name WindowAPI -PassThru
		$hwnd = $process.MainWindowHandle
		$null = $type::ShowWindowAsync($hwnd, $Mode)
		$null = $type::SetForegroundWindow($hwnd)
	}
	#endregion Show-Process
	
	#region buttonup
	function buttonup
	{
		$this.Cursor = 'Default'
		$this.Enabled = $true
	}
	#endregion buttonup
	
	#region buttondown
	function buttondown
	{
		$this.Cursor = 'WaitCursor'
		$this.Enabled = $false
	}
	#endregion buttondown
	
	$buttonQuickSwitchRefresh_Click = {
		buttondown
		$listview1.Clear()
		$Script:RunningEQ = get-process -Name eqgame
		$Script:RunningEQTitles = $RunningEQ.MainWindowTitle
		$textbox1.AutoCompleteCustomSource.AddRange($RunningEQTitles)
		$labelRunningEQInstances.Text = "Running EQ Processes:  $($RunningEQTitles.Count)"
		Add-ListViewItem -ListView $listview1 -Items $RunningEQTitles
		buttonup
		
	}
	
	$textbox1_KeyDown = [System.Windows.Forms.KeyEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		if ($_.KeyCode -eq 'Enter')
		{
			$ToonClick = $RunningEQ | Where-Object { $_.MainWindowTitle -eq $textbox1.Text }
			Show-Process -Process $ToonClick
		}
	}
	
	$textbox1_Click = {
		$textbox1.SelectAll()	
	}
	
	
	$listview1_Click = {
		foreach ($item in $listview1.SelectedItems)
		{
			$textbox1.Text = $item.Text
			$ToonClick = $RunningEQ | Where-Object { $_.MainWindowTitle -eq $item.Text }
			Show-Process -Process $ToonClick		
		}	
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formEQSwitch.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$listview1.remove_Click($listview1_Click)
			$textbox1.remove_Click($textbox1_Click)
			$textbox1.remove_KeyDown($textbox1_KeyDown)
			$buttonQuickSwitchRefresh.remove_Click($buttonQuickSwitchRefresh_Click)
			$formEQSwitch.remove_Load($formEQSwitch_Load)
			$formEQSwitch.remove_Load($Form_StateCorrection_Load)
			$formEQSwitch.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formEQSwitch.SuspendLayout()
	#
	# formEQSwitch
	#
	$formEQSwitch.Controls.Add($labelRunningEQInstances)
	$formEQSwitch.Controls.Add($listview1)
	$formEQSwitch.Controls.Add($textbox1)
	$formEQSwitch.Controls.Add($buttonQuickSwitchRefresh)
	$formEQSwitch.AutoScaleDimensions = '6, 13'
	$formEQSwitch.AutoScaleMode = 'Font'
	$formEQSwitch.ClientSize = '207, 680'
	$formEQSwitch.FormBorderStyle = 'FixedDialog'
	$formEQSwitch.MaximizeBox = $False
	$formEQSwitch.Name = 'formEQSwitch'
	$formEQSwitch.ShowIcon = $False
	$formEQSwitch.Text = 'EQSwitch'
	$formEQSwitch.add_Load($formEQSwitch_Load)
	#
	# labelRunningEQInstances
	#
	$labelRunningEQInstances.AutoSize = $True
	$labelRunningEQInstances.Location = '12, 40'
	$labelRunningEQInstances.Name = 'labelRunningEQInstances'
	$labelRunningEQInstances.Size = '0, 16'
	$labelRunningEQInstances.TabIndex = 30
	$labelRunningEQInstances.UseCompatibleTextRendering = $True
	#
	# listview1
	#
	$listview1.Activation = 'OneClick'
	$listview1.BackColor = 'Info'
	$listview1.Font = 'Microsoft Sans Serif, 9pt'
	$listview1.HotTracking = $True
	$listview1.HoverSelection = $True
	$listview1.Location = '12, 86'
	$listview1.MultiSelect = $False
	$listview1.Name = 'listview1'
	$listview1.Size = '182, 583'
	$listview1.Sorting = 'Ascending'
	$listview1.TabIndex = 29
	$listview1.UseCompatibleStateImageBehavior = $False
	$listview1.View = 'List'
	$listview1.add_Click($listview1_Click)
	#
	# textbox1
	#
	$textbox1.AutoCompleteMode = 'Append'
	$textbox1.AutoCompleteSource = 'CustomSource'
	$textbox1.BackColor = 'Info'
	$textbox1.Location = '12, 60'
	$textbox1.Name = 'textbox1'
	$textbox1.Size = '182, 20'
	$textbox1.TabIndex = 28
	$textbox1.add_Click($textbox1_Click)
	$textbox1.add_KeyDown($textbox1_KeyDown)
	#
	# buttonQuickSwitchRefresh
	#
	$buttonQuickSwitchRefresh.Location = '12, 10'
	$buttonQuickSwitchRefresh.Name = 'buttonQuickSwitchRefresh'
	$buttonQuickSwitchRefresh.Size = '182, 23'
	$buttonQuickSwitchRefresh.TabIndex = 27
	$buttonQuickSwitchRefresh.Text = 'Quick Switch Refresh'
	$buttonQuickSwitchRefresh.UseCompatibleTextRendering = $True
	$buttonQuickSwitchRefresh.UseVisualStyleBackColor = $True
	$buttonQuickSwitchRefresh.add_Click($buttonQuickSwitchRefresh_Click)
	$formEQSwitch.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formEQSwitch.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formEQSwitch.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formEQSwitch.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formEQSwitch.ShowDialog()

} #End Function

#Call the form
Show-QuickSwitch_psf | Out-Null
